'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9151
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet9"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet9
    Inherits Global.System.Data.DataSet
    
    Private tableMdODatosO As MdODatosODataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MdODatosO")) Is Nothing) Then
                MyBase.Tables.Add(New MdODatosODataTable(ds.Tables("MdODatosO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MdODatosO() As MdODatosODataTable
        Get
            Return Me.tableMdODatosO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet9 = CType(MyBase.Clone,DataSet9)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MdODatosO")) Is Nothing) Then
                MyBase.Tables.Add(New MdODatosODataTable(ds.Tables("MdODatosO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMdODatosO = CType(MyBase.Tables("MdODatosO"),MdODatosODataTable)
        If (initTable = true) Then
            If (Not (Me.tableMdODatosO) Is Nothing) Then
                Me.tableMdODatosO.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet9"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet9.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMdODatosO = New MdODatosODataTable
        MyBase.Tables.Add(Me.tableMdODatosO)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMdODatosO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet9 = New DataSet9
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub MdODatosORowChangeEventHandler(ByVal sender As Object, ByVal e As MdODatosORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MdODatosODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private _columncod_obr_apu As Global.System.Data.DataColumn
        
        Private _columnnum_par_apu As Global.System.Data.DataColumn
        
        Private _columncod_par_m As Global.System.Data.DataColumn
        
        Private _columncod_mob_apu As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private _columncnt_mob_apu As Global.System.Data.DataColumn
        
        Private _columnjrn_mob_apu As Global.System.Data.DataColumn
        
        Private _columnbno_mob_apu As Global.System.Data.DataColumn
        
        Private _columntot_jrn_apu As Global.System.Data.DataColumn
        
        Private _columntot_bno_apu As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private _columnrec_typ_apu As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MdODatosO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_obr_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_obr_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _num_par_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnnum_par_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_par_mColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_par_m
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_mob_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_mob_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cnt_mob_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncnt_mob_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _jrn_mob_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnjrn_mob_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _bno_mob_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnbno_mob_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _tot_jrn_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columntot_jrn_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _tot_bno_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columntot_bno_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _rec_typ_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnrec_typ_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MdODatosORow
            Get
                Return CType(Me.Rows(index),MdODatosORow)
            End Get
        End Property
        
        Public Event MdODatosORowChanging As MdODatosORowChangeEventHandler
        
        Public Event MdODatosORowChanged As MdODatosORowChangeEventHandler
        
        Public Event MdODatosORowDeleting As MdODatosORowChangeEventHandler
        
        Public Event MdODatosORowDeleted As MdODatosORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMdODatosORow(ByVal row As MdODatosORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMdODatosORow(ByVal _cod_obr_apu As String, ByVal _num_par_apu As Double, ByVal _cod_par_m As String, ByVal _cod_mob_apu As Double, ByVal Descripcion As String, ByVal Unidad As String, ByVal _cnt_mob_apu As Double, ByVal _jrn_mob_apu As Double, ByVal _bno_mob_apu As Double, ByVal _tot_jrn_apu As Double, ByVal _tot_bno_apu As Double, ByVal Tipo As Double, ByVal _rec_typ_apu As String) As MdODatosORow
            Dim rowMdODatosORow As MdODatosORow = CType(Me.NewRow,MdODatosORow)
            Dim columnValuesArray() As Object = New Object() {_cod_obr_apu, _num_par_apu, _cod_par_m, _cod_mob_apu, Descripcion, Unidad, _cnt_mob_apu, _jrn_mob_apu, _bno_mob_apu, _tot_jrn_apu, _tot_bno_apu, Tipo, _rec_typ_apu}
            rowMdODatosORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMdODatosORow)
            Return rowMdODatosORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MdODatosODataTable = CType(MyBase.Clone,MdODatosODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MdODatosODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columncod_obr_apu = MyBase.Columns("cod-obr-apu")
            Me._columnnum_par_apu = MyBase.Columns("num-par-apu")
            Me._columncod_par_m = MyBase.Columns("cod-par-m")
            Me._columncod_mob_apu = MyBase.Columns("cod-mob-apu")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me._columncnt_mob_apu = MyBase.Columns("cnt-mob-apu")
            Me._columnjrn_mob_apu = MyBase.Columns("jrn-mob-apu")
            Me._columnbno_mob_apu = MyBase.Columns("bno-mob-apu")
            Me._columntot_jrn_apu = MyBase.Columns("tot-jrn-apu")
            Me._columntot_bno_apu = MyBase.Columns("tot-bno-apu")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me._columnrec_typ_apu = MyBase.Columns("rec-typ-apu")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columncod_obr_apu = New Global.System.Data.DataColumn("cod-obr-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_obr_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_obr_apu")
            Me._columncod_obr_apu.ExtendedProperties.Add("Generator_UserColumnName", "cod-obr-apu")
            MyBase.Columns.Add(Me._columncod_obr_apu)
            Me._columnnum_par_apu = New Global.System.Data.DataColumn("num-par-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnnum_par_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnnum_par_apu")
            Me._columnnum_par_apu.ExtendedProperties.Add("Generator_UserColumnName", "num-par-apu")
            MyBase.Columns.Add(Me._columnnum_par_apu)
            Me._columncod_par_m = New Global.System.Data.DataColumn("cod-par-m", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_par_m.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_par_m")
            Me._columncod_par_m.ExtendedProperties.Add("Generator_UserColumnName", "cod-par-m")
            MyBase.Columns.Add(Me._columncod_par_m)
            Me._columncod_mob_apu = New Global.System.Data.DataColumn("cod-mob-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_mob_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_mob_apu")
            Me._columncod_mob_apu.ExtendedProperties.Add("Generator_UserColumnName", "cod-mob-apu")
            MyBase.Columns.Add(Me._columncod_mob_apu)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me._columncnt_mob_apu = New Global.System.Data.DataColumn("cnt-mob-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncnt_mob_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncnt_mob_apu")
            Me._columncnt_mob_apu.ExtendedProperties.Add("Generator_UserColumnName", "cnt-mob-apu")
            MyBase.Columns.Add(Me._columncnt_mob_apu)
            Me._columnjrn_mob_apu = New Global.System.Data.DataColumn("jrn-mob-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnjrn_mob_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnjrn_mob_apu")
            Me._columnjrn_mob_apu.ExtendedProperties.Add("Generator_UserColumnName", "jrn-mob-apu")
            MyBase.Columns.Add(Me._columnjrn_mob_apu)
            Me._columnbno_mob_apu = New Global.System.Data.DataColumn("bno-mob-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnbno_mob_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnbno_mob_apu")
            Me._columnbno_mob_apu.ExtendedProperties.Add("Generator_UserColumnName", "bno-mob-apu")
            MyBase.Columns.Add(Me._columnbno_mob_apu)
            Me._columntot_jrn_apu = New Global.System.Data.DataColumn("tot-jrn-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columntot_jrn_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columntot_jrn_apu")
            Me._columntot_jrn_apu.ExtendedProperties.Add("Generator_UserColumnName", "tot-jrn-apu")
            MyBase.Columns.Add(Me._columntot_jrn_apu)
            Me._columntot_bno_apu = New Global.System.Data.DataColumn("tot-bno-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columntot_bno_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columntot_bno_apu")
            Me._columntot_bno_apu.ExtendedProperties.Add("Generator_UserColumnName", "tot-bno-apu")
            MyBase.Columns.Add(Me._columntot_bno_apu)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me._columnrec_typ_apu = New Global.System.Data.DataColumn("rec-typ-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnrec_typ_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnrec_typ_apu")
            Me._columnrec_typ_apu.ExtendedProperties.Add("Generator_UserColumnName", "rec-typ-apu")
            MyBase.Columns.Add(Me._columnrec_typ_apu)
            Me._columncod_obr_apu.MaxLength = 16
            Me._columncod_par_m.MaxLength = 14
            Me.columnDescripcion.MaxLength = 55
            Me.columnUnidad.MaxLength = 4
            Me._columnrec_typ_apu.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMdODatosORow() As MdODatosORow
            Return CType(Me.NewRow,MdODatosORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MdODatosORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MdODatosORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MdODatosORowChangedEvent) Is Nothing) Then
                RaiseEvent MdODatosORowChanged(Me, New MdODatosORowChangeEvent(CType(e.Row,MdODatosORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MdODatosORowChangingEvent) Is Nothing) Then
                RaiseEvent MdODatosORowChanging(Me, New MdODatosORowChangeEvent(CType(e.Row,MdODatosORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MdODatosORowDeletedEvent) Is Nothing) Then
                RaiseEvent MdODatosORowDeleted(Me, New MdODatosORowChangeEvent(CType(e.Row,MdODatosORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MdODatosORowDeletingEvent) Is Nothing) Then
                RaiseEvent MdODatosORowDeleting(Me, New MdODatosORowChangeEvent(CType(e.Row,MdODatosORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMdODatosORow(ByVal row As MdODatosORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet9 = New DataSet9
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MdODatosODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MdODatosORow
        Inherits Global.System.Data.DataRow
        
        Private tableMdODatosO As MdODatosODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMdODatosO = CType(Me.Table,MdODatosODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_obr_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO._cod_obr_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-obr-apu' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO._cod_obr_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _num_par_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO._num_par_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'num-par-apu' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO._num_par_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_par_m() As String
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO._cod_par_mColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-par-m' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO._cod_par_mColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_mob_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO._cod_mob_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-mob-apu' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO._cod_mob_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cnt_mob_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO._cnt_mob_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cnt-mob-apu' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO._cnt_mob_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _jrn_mob_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO._jrn_mob_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jrn-mob-apu' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO._jrn_mob_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _bno_mob_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO._bno_mob_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bno-mob-apu' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO._bno_mob_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _tot_jrn_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO._tot_jrn_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot-jrn-apu' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO._tot_jrn_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _tot_bno_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO._tot_bno_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot-bno-apu' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO._tot_bno_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _rec_typ_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableMdODatosO._rec_typ_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rec-typ-apu' in table 'MdODatosO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMdODatosO._rec_typ_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_obr_apuNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO._cod_obr_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_obr_apuNull()
            Me(Me.tableMdODatosO._cod_obr_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_num_par_apuNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO._num_par_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_num_par_apuNull()
            Me(Me.tableMdODatosO._num_par_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_par_mNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO._cod_par_mColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_par_mNull()
            Me(Me.tableMdODatosO._cod_par_mColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_mob_apuNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO._cod_mob_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_mob_apuNull()
            Me(Me.tableMdODatosO._cod_mob_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMdODatosO.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMdODatosO.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cnt_mob_apuNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO._cnt_mob_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cnt_mob_apuNull()
            Me(Me.tableMdODatosO._cnt_mob_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_jrn_mob_apuNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO._jrn_mob_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_jrn_mob_apuNull()
            Me(Me.tableMdODatosO._jrn_mob_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_bno_mob_apuNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO._bno_mob_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_bno_mob_apuNull()
            Me(Me.tableMdODatosO._bno_mob_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_tot_jrn_apuNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO._tot_jrn_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_tot_jrn_apuNull()
            Me(Me.tableMdODatosO._tot_jrn_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_tot_bno_apuNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO._tot_bno_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_tot_bno_apuNull()
            Me(Me.tableMdODatosO._tot_bno_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMdODatosO.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_rec_typ_apuNull() As Boolean
            Return Me.IsNull(Me.tableMdODatosO._rec_typ_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_rec_typ_apuNull()
            Me(Me.tableMdODatosO._rec_typ_apuColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MdODatosORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MdODatosORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MdODatosORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MdODatosORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSet9TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MdODatosOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MdODatosO"
            tableMapping.ColumnMappings.Add("cod-obr-apu", "cod-obr-apu")
            tableMapping.ColumnMappings.Add("num-par-apu", "num-par-apu")
            tableMapping.ColumnMappings.Add("cod-par-m", "cod-par-m")
            tableMapping.ColumnMappings.Add("cod-mob-apu", "cod-mob-apu")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("cnt-mob-apu", "cnt-mob-apu")
            tableMapping.ColumnMappings.Add("jrn-mob-apu", "jrn-mob-apu")
            tableMapping.ColumnMappings.Add("bno-mob-apu", "bno-mob-apu")
            tableMapping.ColumnMappings.Add("tot-jrn-apu", "tot-jrn-apu")
            tableMapping.ColumnMappings.Add("tot-bno-apu", "tot-bno-apu")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("rec-typ-apu", "rec-typ-apu")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        [cod-obr-apu], [num-par-apu], [cod-par-m], [cod-mob-apu], Descripci"& _ 
                "on, Unidad, [cnt-mob-apu], [jrn-mob-apu], [bno-mob-apu], [tot-jrn-apu], [tot-bno"& _ 
                "-apu], Tipo, [rec-typ-apu]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            MdODatosO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY [num-par-apu]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet9.MdODatosODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet9.MdODatosODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet9.MdODatosODataTable = New DataSet9.MdODatosODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
