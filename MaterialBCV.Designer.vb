'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9151
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("MaterialBCV"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class MaterialBCV
    Inherits Global.System.Data.DataSet
    
    Private tableMaterialBCV As MaterialBCVDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MaterialBCV")) Is Nothing) Then
                MyBase.Tables.Add(New MaterialBCVDataTable(ds.Tables("MaterialBCV")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _MaterialBCV() As MaterialBCVDataTable
        Get
            Return Me.tableMaterialBCV
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As MaterialBCV = CType(MyBase.Clone,MaterialBCV)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MaterialBCV")) Is Nothing) Then
                MyBase.Tables.Add(New MaterialBCVDataTable(ds.Tables("MaterialBCV")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMaterialBCV = CType(MyBase.Tables("MaterialBCV"),MaterialBCVDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMaterialBCV) Is Nothing) Then
                Me.tableMaterialBCV.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "MaterialBCV"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet2.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMaterialBCV = New MaterialBCVDataTable
        MyBase.Tables.Add(Me.tableMaterialBCV)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_MaterialBCV() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As MaterialBCV = New MaterialBCV
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub MaterialBCVRowChangeEventHandler(ByVal sender As Object, ByVal e As MaterialBCVRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MaterialBCVDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnGrupoBCV As Global.System.Data.DataColumn
        
        Private columnDescGBCV As Global.System.Data.DataColumn
        
        Private columnAño_IPAC As Global.System.Data.DataColumn
        
        Private columnIdGBCV As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnSuplidor As Global.System.Data.DataColumn
        
        Private columnPUBs As Global.System.Data.DataColumn
        
        Private columnPorcDif As Global.System.Data.DataColumn
        
        Private columnPUUSD As Global.System.Data.DataColumn
        
        Private columnIPM01 As Global.System.Data.DataColumn
        
        Private columnIPM02 As Global.System.Data.DataColumn
        
        Private columnIPM03 As Global.System.Data.DataColumn
        
        Private columnIPM04 As Global.System.Data.DataColumn
        
        Private columnIPM05 As Global.System.Data.DataColumn
        
        Private columnIPM06 As Global.System.Data.DataColumn
        
        Private columnIPM07 As Global.System.Data.DataColumn
        
        Private columnIPM08 As Global.System.Data.DataColumn
        
        Private columnIPM09 As Global.System.Data.DataColumn
        
        Private columnIPM10 As Global.System.Data.DataColumn
        
        Private columnIPM11 As Global.System.Data.DataColumn
        
        Private columnIPM12 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MaterialBCV"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrupoBCVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrupoBCV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescGBCVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescGBCV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Año_IPACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAño_IPAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdGBCVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdGBCV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuplidorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuplidor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PUBsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPUBs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcDifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcDif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PUUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPUUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM04Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM04
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM05Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM05
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM06Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM06
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM07Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM07
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM08Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM08
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM09Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM09
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPM12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPM12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MaterialBCVRow
            Get
                Return CType(Me.Rows(index),MaterialBCVRow)
            End Get
        End Property
        
        Public Event MaterialBCVRowChanging As MaterialBCVRowChangeEventHandler
        
        Public Event MaterialBCVRowChanged As MaterialBCVRowChangeEventHandler
        
        Public Event MaterialBCVRowDeleting As MaterialBCVRowChangeEventHandler
        
        Public Event MaterialBCVRowDeleted As MaterialBCVRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMaterialBCVRow(ByVal row As MaterialBCVRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMaterialBCVRow( _
                    ByVal Codigo As String,  _
                    ByVal Descripcion As String,  _
                    ByVal Fecha As Date,  _
                    ByVal GrupoBCV As Double,  _
                    ByVal DescGBCV As String,  _
                    ByVal Año_IPAC As Double,  _
                    ByVal IdGBCV As String,  _
                    ByVal Unidad As String,  _
                    ByVal Suplidor As String,  _
                    ByVal PUBs As Double,  _
                    ByVal PorcDif As Double,  _
                    ByVal PUUSD As Double,  _
                    ByVal IPM01 As Double,  _
                    ByVal IPM02 As Double,  _
                    ByVal IPM03 As Double,  _
                    ByVal IPM04 As Double,  _
                    ByVal IPM05 As Double,  _
                    ByVal IPM06 As Double,  _
                    ByVal IPM07 As Double,  _
                    ByVal IPM08 As Double,  _
                    ByVal IPM09 As Double,  _
                    ByVal IPM10 As Double,  _
                    ByVal IPM11 As Double,  _
                    ByVal IPM12 As Double) As MaterialBCVRow
            Dim rowMaterialBCVRow As MaterialBCVRow = CType(Me.NewRow,MaterialBCVRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Descripcion, Fecha, GrupoBCV, DescGBCV, Año_IPAC, IdGBCV, Unidad, Suplidor, PUBs, PorcDif, PUUSD, IPM01, IPM02, IPM03, IPM04, IPM05, IPM06, IPM07, IPM08, IPM09, IPM10, IPM11, IPM12}
            rowMaterialBCVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMaterialBCVRow)
            Return rowMaterialBCVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MaterialBCVDataTable = CType(MyBase.Clone,MaterialBCVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MaterialBCVDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnGrupoBCV = MyBase.Columns("GrupoBCV")
            Me.columnDescGBCV = MyBase.Columns("DescGBCV")
            Me.columnAño_IPAC = MyBase.Columns("Año IPAC")
            Me.columnIdGBCV = MyBase.Columns("IdGBCV")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnSuplidor = MyBase.Columns("Suplidor")
            Me.columnPUBs = MyBase.Columns("PUBs")
            Me.columnPorcDif = MyBase.Columns("PorcDif")
            Me.columnPUUSD = MyBase.Columns("PUUSD")
            Me.columnIPM01 = MyBase.Columns("IPM01")
            Me.columnIPM02 = MyBase.Columns("IPM02")
            Me.columnIPM03 = MyBase.Columns("IPM03")
            Me.columnIPM04 = MyBase.Columns("IPM04")
            Me.columnIPM05 = MyBase.Columns("IPM05")
            Me.columnIPM06 = MyBase.Columns("IPM06")
            Me.columnIPM07 = MyBase.Columns("IPM07")
            Me.columnIPM08 = MyBase.Columns("IPM08")
            Me.columnIPM09 = MyBase.Columns("IPM09")
            Me.columnIPM10 = MyBase.Columns("IPM10")
            Me.columnIPM11 = MyBase.Columns("IPM11")
            Me.columnIPM12 = MyBase.Columns("IPM12")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnGrupoBCV = New Global.System.Data.DataColumn("GrupoBCV", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrupoBCV)
            Me.columnDescGBCV = New Global.System.Data.DataColumn("DescGBCV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescGBCV)
            Me.columnAño_IPAC = New Global.System.Data.DataColumn("Año IPAC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAño_IPAC)
            Me.columnIdGBCV = New Global.System.Data.DataColumn("IdGBCV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdGBCV)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnSuplidor = New Global.System.Data.DataColumn("Suplidor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuplidor)
            Me.columnPUBs = New Global.System.Data.DataColumn("PUBs", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPUBs)
            Me.columnPorcDif = New Global.System.Data.DataColumn("PorcDif", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcDif)
            Me.columnPUUSD = New Global.System.Data.DataColumn("PUUSD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPUUSD)
            Me.columnIPM01 = New Global.System.Data.DataColumn("IPM01", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM01)
            Me.columnIPM02 = New Global.System.Data.DataColumn("IPM02", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM02)
            Me.columnIPM03 = New Global.System.Data.DataColumn("IPM03", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM03)
            Me.columnIPM04 = New Global.System.Data.DataColumn("IPM04", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM04)
            Me.columnIPM05 = New Global.System.Data.DataColumn("IPM05", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM05)
            Me.columnIPM06 = New Global.System.Data.DataColumn("IPM06", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM06)
            Me.columnIPM07 = New Global.System.Data.DataColumn("IPM07", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM07)
            Me.columnIPM08 = New Global.System.Data.DataColumn("IPM08", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM08)
            Me.columnIPM09 = New Global.System.Data.DataColumn("IPM09", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM09)
            Me.columnIPM10 = New Global.System.Data.DataColumn("IPM10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM10)
            Me.columnIPM11 = New Global.System.Data.DataColumn("IPM11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM11)
            Me.columnIPM12 = New Global.System.Data.DataColumn("IPM12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPM12)
            Me.columnCodigo.MaxLength = 8
            Me.columnDescripcion.MaxLength = 56
            Me.columnDescGBCV.MaxLength = 44
            Me.columnIdGBCV.MaxLength = 2
            Me.columnUnidad.MaxLength = 6
            Me.columnSuplidor.MaxLength = 48
            Me.ExtendedProperties.Add("Generator_TablePropName", "_MaterialBCV")
            Me.ExtendedProperties.Add("Generator_UserTableName", "MaterialBCV")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMaterialBCVRow() As MaterialBCVRow
            Return CType(Me.NewRow,MaterialBCVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MaterialBCVRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MaterialBCVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MaterialBCVRowChangedEvent) Is Nothing) Then
                RaiseEvent MaterialBCVRowChanged(Me, New MaterialBCVRowChangeEvent(CType(e.Row,MaterialBCVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MaterialBCVRowChangingEvent) Is Nothing) Then
                RaiseEvent MaterialBCVRowChanging(Me, New MaterialBCVRowChangeEvent(CType(e.Row,MaterialBCVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MaterialBCVRowDeletedEvent) Is Nothing) Then
                RaiseEvent MaterialBCVRowDeleted(Me, New MaterialBCVRowChangeEvent(CType(e.Row,MaterialBCVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MaterialBCVRowDeletingEvent) Is Nothing) Then
                RaiseEvent MaterialBCVRowDeleting(Me, New MaterialBCVRowChangeEvent(CType(e.Row,MaterialBCVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMaterialBCVRow(ByVal row As MaterialBCVRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MaterialBCV = New MaterialBCV
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MaterialBCVDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MaterialBCVRow
        Inherits Global.System.Data.DataRow
        
        Private tableMaterialBCV As MaterialBCVDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMaterialBCV = CType(Me.Table,MaterialBCVDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.CodigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrupoBCV() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.GrupoBCVColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrupoBCV' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.GrupoBCVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescGBCV() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.DescGBCVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescGBCV' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.DescGBCVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Año_IPAC() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.Año_IPACColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Año IPAC' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.Año_IPACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdGBCV() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IdGBCVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdGBCV' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IdGBCVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Suplidor() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.SuplidorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suplidor' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.SuplidorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PUBs() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.PUBsColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PUBs' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.PUBsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcDif() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.PorcDifColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcDif' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.PorcDifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PUUSD() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.PUUSDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PUUSD' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.PUUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM01() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM01Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM01' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM02() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM02Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM02' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM03() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM03Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM03' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM04() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM04Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM04' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM04Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM05() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM05Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM05' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM05Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM06() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM06Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM06' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM06Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM07() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM07Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM07' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM07Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM08() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM08Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM08' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM08Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM09() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM09Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM09' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM09Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM10' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM11' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPM12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.IPM12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IPM12' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.IPM12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMaterialBCV.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMaterialBCV.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMaterialBCV.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrupoBCVNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.GrupoBCVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrupoBCVNull()
            Me(Me.tableMaterialBCV.GrupoBCVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescGBCVNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.DescGBCVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescGBCVNull()
            Me(Me.tableMaterialBCV.DescGBCVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAño_IPACNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.Año_IPACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAño_IPACNull()
            Me(Me.tableMaterialBCV.Año_IPACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdGBCVNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IdGBCVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdGBCVNull()
            Me(Me.tableMaterialBCV.IdGBCVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMaterialBCV.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuplidorNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.SuplidorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuplidorNull()
            Me(Me.tableMaterialBCV.SuplidorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPUBsNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.PUBsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPUBsNull()
            Me(Me.tableMaterialBCV.PUBsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcDifNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.PorcDifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcDifNull()
            Me(Me.tableMaterialBCV.PorcDifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPUUSDNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.PUUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPUUSDNull()
            Me(Me.tableMaterialBCV.PUUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM01Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM01Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM01Null()
            Me(Me.tableMaterialBCV.IPM01Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM02Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM02Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM02Null()
            Me(Me.tableMaterialBCV.IPM02Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM03Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM03Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM03Null()
            Me(Me.tableMaterialBCV.IPM03Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM04Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM04Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM04Null()
            Me(Me.tableMaterialBCV.IPM04Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM05Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM05Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM05Null()
            Me(Me.tableMaterialBCV.IPM05Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM06Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM06Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM06Null()
            Me(Me.tableMaterialBCV.IPM06Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM07Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM07Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM07Null()
            Me(Me.tableMaterialBCV.IPM07Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM08Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM08Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM08Null()
            Me(Me.tableMaterialBCV.IPM08Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM09Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM09Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM09Null()
            Me(Me.tableMaterialBCV.IPM09Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM10Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM10Null()
            Me(Me.tableMaterialBCV.IPM10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM11Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM11Null()
            Me(Me.tableMaterialBCV.IPM11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPM12Null() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.IPM12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPM12Null()
            Me(Me.tableMaterialBCV.IPM12Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MaterialBCVRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MaterialBCVRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MaterialBCVRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MaterialBCVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace MaterialBCVTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MaterialBCVTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MaterialBCV"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("GrupoBCV", "GrupoBCV")
            tableMapping.ColumnMappings.Add("DescGBCV", "DescGBCV")
            tableMapping.ColumnMappings.Add("Año IPAC", "Año IPAC")
            tableMapping.ColumnMappings.Add("IdGBCV", "IdGBCV")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Suplidor", "Suplidor")
            tableMapping.ColumnMappings.Add("PUBs", "PUBs")
            tableMapping.ColumnMappings.Add("PorcDif", "PorcDif")
            tableMapping.ColumnMappings.Add("PUUSD", "PUUSD")
            tableMapping.ColumnMappings.Add("IPM01", "IPM01")
            tableMapping.ColumnMappings.Add("IPM02", "IPM02")
            tableMapping.ColumnMappings.Add("IPM03", "IPM03")
            tableMapping.ColumnMappings.Add("IPM04", "IPM04")
            tableMapping.ColumnMappings.Add("IPM05", "IPM05")
            tableMapping.ColumnMappings.Add("IPM06", "IPM06")
            tableMapping.ColumnMappings.Add("IPM07", "IPM07")
            tableMapping.ColumnMappings.Add("IPM08", "IPM08")
            tableMapping.ColumnMappings.Add("IPM09", "IPM09")
            tableMapping.ColumnMappings.Add("IPM10", "IPM10")
            tableMapping.ColumnMappings.Add("IPM11", "IPM11")
            tableMapping.ColumnMappings.Add("IPM12", "IPM12")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Codigo, Descripcion, Fecha, GrupoBCV, DescGBCV, [Año IPAC], IdGBCV,"& _ 
                " Unidad, Suplidor, PUBs, PorcDif, PUUSD, IPM01, IPM02, IPM03, IPM04, IPM05, IPM0"& _ 
                "6, IPM07, IPM08, IPM09, IPM10, IPM11, IPM12"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            MaterialBCV"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER "& _ 
                "BY Codigo, GrupoBCV"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MaterialBCV.MaterialBCVDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MaterialBCV.MaterialBCVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MaterialBCV.MaterialBCVDataTable = New MaterialBCV.MaterialBCVDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
