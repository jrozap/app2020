'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9151
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("MasterAPVDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class MasterAPVDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableAPUObr As APUObrDataTable
    
    Private tableConfGenAPV As ConfGenAPVDataTable
    
    Private tableConfiguracion As ConfiguracionDataTable
    
    Private tableCostos As CostosDataTable
    
    Private tableEqpImpL As EqpImpLDataTable
    
    Private tableEqpImpLBsS As EqpImpLBsSDataTable
    
    Private tableEquipoComp As EquipoCompDataTable
    
    Private tableIndicesPAC As IndicesPACDataTable
    
    Private tableListaEqp As ListaEqpDataTable
    
    Private tableListaMat As ListaMatDataTable
    
    Private tableListaMdO As ListaMdODataTable
    
    Private tableListaTran As ListaTranDataTable
    
    Private tableMasterEqp As MasterEqpDataTable
    
    Private tableMasterManoObra As MasterManoObraDataTable
    
    Private tableMasterMaterial As MasterMaterialDataTable
    
    Private tableMasterPartBsS As MasterPartBsSDataTable
    
    Private tableMasterPartidas As MasterPartidasDataTable
    
    Private tablematerialComp As materialCompDataTable
    
    Private tableMatImpL As MatImpLDataTable
    
    Private tableMatImpLBsS As MatImpLBsSDataTable
    
    Private tableMOcomp As MOcompDataTable
    
    Private tableMOImpL As MOImpLDataTable
    
    Private tableMOImpLBsS As MOImpLBsSDataTable
    
    Private tableobras As obrasDataTable
    
    Private tablePartEqC As PartEqCDataTable
    
    Private tableEqpCompuesto As EqpCompuestoDataTable
    
    Private tableMMaterial As MMaterialDataTable
    
    Private tableMObra As MObraDataTable
    
    Private tableMObraC As MObraCDataTable
    
    Private tableValuaciones As ValuacionesDataTable
    
    Private tableComputoEQ As ComputoEQDataTable
    
    Private tableComputoMO As ComputoMODataTable
    
    Private tableComputoMT As ComputoMTDataTable
    
    Private tableComputoTR As ComputoTRDataTable
    
    Private tableIndPAC As IndPACDataTable
    
    Private tableMatCompDD As MatCompDDDataTable
    
    Private tableMaterialBCV As MaterialBCVDataTable
    
    Private tableMatObr As MatObrDataTable
    
    Private tablePartObr As PartObrDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("APUObr")) Is Nothing) Then
                MyBase.Tables.Add(New APUObrDataTable(ds.Tables("APUObr")))
            End If
            If (Not (ds.Tables("ConfGenAPV")) Is Nothing) Then
                MyBase.Tables.Add(New ConfGenAPVDataTable(ds.Tables("ConfGenAPV")))
            End If
            If (Not (ds.Tables("Configuracion")) Is Nothing) Then
                MyBase.Tables.Add(New ConfiguracionDataTable(ds.Tables("Configuracion")))
            End If
            If (Not (ds.Tables("Costos")) Is Nothing) Then
                MyBase.Tables.Add(New CostosDataTable(ds.Tables("Costos")))
            End If
            If (Not (ds.Tables("EqpImpL")) Is Nothing) Then
                MyBase.Tables.Add(New EqpImpLDataTable(ds.Tables("EqpImpL")))
            End If
            If (Not (ds.Tables("EqpImpLBsS")) Is Nothing) Then
                MyBase.Tables.Add(New EqpImpLBsSDataTable(ds.Tables("EqpImpLBsS")))
            End If
            If (Not (ds.Tables("EquipoComp")) Is Nothing) Then
                MyBase.Tables.Add(New EquipoCompDataTable(ds.Tables("EquipoComp")))
            End If
            If (Not (ds.Tables("IndicesPAC")) Is Nothing) Then
                MyBase.Tables.Add(New IndicesPACDataTable(ds.Tables("IndicesPAC")))
            End If
            If (Not (ds.Tables("ListaEqp")) Is Nothing) Then
                MyBase.Tables.Add(New ListaEqpDataTable(ds.Tables("ListaEqp")))
            End If
            If (Not (ds.Tables("ListaMat")) Is Nothing) Then
                MyBase.Tables.Add(New ListaMatDataTable(ds.Tables("ListaMat")))
            End If
            If (Not (ds.Tables("ListaMdO")) Is Nothing) Then
                MyBase.Tables.Add(New ListaMdODataTable(ds.Tables("ListaMdO")))
            End If
            If (Not (ds.Tables("ListaTran")) Is Nothing) Then
                MyBase.Tables.Add(New ListaTranDataTable(ds.Tables("ListaTran")))
            End If
            If (Not (ds.Tables("MasterEqp")) Is Nothing) Then
                MyBase.Tables.Add(New MasterEqpDataTable(ds.Tables("MasterEqp")))
            End If
            If (Not (ds.Tables("MasterManoObra")) Is Nothing) Then
                MyBase.Tables.Add(New MasterManoObraDataTable(ds.Tables("MasterManoObra")))
            End If
            If (Not (ds.Tables("MasterMaterial")) Is Nothing) Then
                MyBase.Tables.Add(New MasterMaterialDataTable(ds.Tables("MasterMaterial")))
            End If
            If (Not (ds.Tables("MasterPartBsS")) Is Nothing) Then
                MyBase.Tables.Add(New MasterPartBsSDataTable(ds.Tables("MasterPartBsS")))
            End If
            If (Not (ds.Tables("MasterPartidas")) Is Nothing) Then
                MyBase.Tables.Add(New MasterPartidasDataTable(ds.Tables("MasterPartidas")))
            End If
            If (Not (ds.Tables("materialComp")) Is Nothing) Then
                MyBase.Tables.Add(New materialCompDataTable(ds.Tables("materialComp")))
            End If
            If (Not (ds.Tables("MatImpL")) Is Nothing) Then
                MyBase.Tables.Add(New MatImpLDataTable(ds.Tables("MatImpL")))
            End If
            If (Not (ds.Tables("MatImpLBsS")) Is Nothing) Then
                MyBase.Tables.Add(New MatImpLBsSDataTable(ds.Tables("MatImpLBsS")))
            End If
            If (Not (ds.Tables("MOcomp")) Is Nothing) Then
                MyBase.Tables.Add(New MOcompDataTable(ds.Tables("MOcomp")))
            End If
            If (Not (ds.Tables("MOImpL")) Is Nothing) Then
                MyBase.Tables.Add(New MOImpLDataTable(ds.Tables("MOImpL")))
            End If
            If (Not (ds.Tables("MOImpLBsS")) Is Nothing) Then
                MyBase.Tables.Add(New MOImpLBsSDataTable(ds.Tables("MOImpLBsS")))
            End If
            If (Not (ds.Tables("obras")) Is Nothing) Then
                MyBase.Tables.Add(New obrasDataTable(ds.Tables("obras")))
            End If
            If (Not (ds.Tables("PartEqC")) Is Nothing) Then
                MyBase.Tables.Add(New PartEqCDataTable(ds.Tables("PartEqC")))
            End If
            If (Not (ds.Tables("EqpCompuesto")) Is Nothing) Then
                MyBase.Tables.Add(New EqpCompuestoDataTable(ds.Tables("EqpCompuesto")))
            End If
            If (Not (ds.Tables("MMaterial")) Is Nothing) Then
                MyBase.Tables.Add(New MMaterialDataTable(ds.Tables("MMaterial")))
            End If
            If (Not (ds.Tables("MObra")) Is Nothing) Then
                MyBase.Tables.Add(New MObraDataTable(ds.Tables("MObra")))
            End If
            If (Not (ds.Tables("MObraC")) Is Nothing) Then
                MyBase.Tables.Add(New MObraCDataTable(ds.Tables("MObraC")))
            End If
            If (Not (ds.Tables("Valuaciones")) Is Nothing) Then
                MyBase.Tables.Add(New ValuacionesDataTable(ds.Tables("Valuaciones")))
            End If
            If (Not (ds.Tables("ComputoEQ")) Is Nothing) Then
                MyBase.Tables.Add(New ComputoEQDataTable(ds.Tables("ComputoEQ")))
            End If
            If (Not (ds.Tables("ComputoMO")) Is Nothing) Then
                MyBase.Tables.Add(New ComputoMODataTable(ds.Tables("ComputoMO")))
            End If
            If (Not (ds.Tables("ComputoMT")) Is Nothing) Then
                MyBase.Tables.Add(New ComputoMTDataTable(ds.Tables("ComputoMT")))
            End If
            If (Not (ds.Tables("ComputoTR")) Is Nothing) Then
                MyBase.Tables.Add(New ComputoTRDataTable(ds.Tables("ComputoTR")))
            End If
            If (Not (ds.Tables("IndPAC")) Is Nothing) Then
                MyBase.Tables.Add(New IndPACDataTable(ds.Tables("IndPAC")))
            End If
            If (Not (ds.Tables("MatCompDD")) Is Nothing) Then
                MyBase.Tables.Add(New MatCompDDDataTable(ds.Tables("MatCompDD")))
            End If
            If (Not (ds.Tables("MaterialBCV")) Is Nothing) Then
                MyBase.Tables.Add(New MaterialBCVDataTable(ds.Tables("MaterialBCV")))
            End If
            If (Not (ds.Tables("MatObr")) Is Nothing) Then
                MyBase.Tables.Add(New MatObrDataTable(ds.Tables("MatObr")))
            End If
            If (Not (ds.Tables("PartObr")) Is Nothing) Then
                MyBase.Tables.Add(New PartObrDataTable(ds.Tables("PartObr")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property APUObr() As APUObrDataTable
        Get
            Return Me.tableAPUObr
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ConfGenAPV() As ConfGenAPVDataTable
        Get
            Return Me.tableConfGenAPV
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Configuracion() As ConfiguracionDataTable
        Get
            Return Me.tableConfiguracion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Costos() As CostosDataTable
        Get
            Return Me.tableCostos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EqpImpL() As EqpImpLDataTable
        Get
            Return Me.tableEqpImpL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EqpImpLBsS() As EqpImpLBsSDataTable
        Get
            Return Me.tableEqpImpLBsS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EquipoComp() As EquipoCompDataTable
        Get
            Return Me.tableEquipoComp
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IndicesPAC() As IndicesPACDataTable
        Get
            Return Me.tableIndicesPAC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ListaEqp() As ListaEqpDataTable
        Get
            Return Me.tableListaEqp
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ListaMat() As ListaMatDataTable
        Get
            Return Me.tableListaMat
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ListaMdO() As ListaMdODataTable
        Get
            Return Me.tableListaMdO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ListaTran() As ListaTranDataTable
        Get
            Return Me.tableListaTran
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MasterEqp() As MasterEqpDataTable
        Get
            Return Me.tableMasterEqp
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MasterManoObra() As MasterManoObraDataTable
        Get
            Return Me.tableMasterManoObra
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MasterMaterial() As MasterMaterialDataTable
        Get
            Return Me.tableMasterMaterial
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MasterPartBsS() As MasterPartBsSDataTable
        Get
            Return Me.tableMasterPartBsS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MasterPartidas() As MasterPartidasDataTable
        Get
            Return Me.tableMasterPartidas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property materialComp() As materialCompDataTable
        Get
            Return Me.tablematerialComp
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MatImpL() As MatImpLDataTable
        Get
            Return Me.tableMatImpL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MatImpLBsS() As MatImpLBsSDataTable
        Get
            Return Me.tableMatImpLBsS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MOcomp() As MOcompDataTable
        Get
            Return Me.tableMOcomp
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MOImpL() As MOImpLDataTable
        Get
            Return Me.tableMOImpL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MOImpLBsS() As MOImpLBsSDataTable
        Get
            Return Me.tableMOImpLBsS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property obras() As obrasDataTable
        Get
            Return Me.tableobras
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PartEqC() As PartEqCDataTable
        Get
            Return Me.tablePartEqC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EqpCompuesto() As EqpCompuestoDataTable
        Get
            Return Me.tableEqpCompuesto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MMaterial() As MMaterialDataTable
        Get
            Return Me.tableMMaterial
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MObra() As MObraDataTable
        Get
            Return Me.tableMObra
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MObraC() As MObraCDataTable
        Get
            Return Me.tableMObraC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Valuaciones() As ValuacionesDataTable
        Get
            Return Me.tableValuaciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ComputoEQ() As ComputoEQDataTable
        Get
            Return Me.tableComputoEQ
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ComputoMO() As ComputoMODataTable
        Get
            Return Me.tableComputoMO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ComputoMT() As ComputoMTDataTable
        Get
            Return Me.tableComputoMT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ComputoTR() As ComputoTRDataTable
        Get
            Return Me.tableComputoTR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IndPAC() As IndPACDataTable
        Get
            Return Me.tableIndPAC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MatCompDD() As MatCompDDDataTable
        Get
            Return Me.tableMatCompDD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MaterialBCV() As MaterialBCVDataTable
        Get
            Return Me.tableMaterialBCV
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MatObr() As MatObrDataTable
        Get
            Return Me.tableMatObr
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PartObr() As PartObrDataTable
        Get
            Return Me.tablePartObr
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As MasterAPVDataSet = CType(MyBase.Clone,MasterAPVDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("APUObr")) Is Nothing) Then
                MyBase.Tables.Add(New APUObrDataTable(ds.Tables("APUObr")))
            End If
            If (Not (ds.Tables("ConfGenAPV")) Is Nothing) Then
                MyBase.Tables.Add(New ConfGenAPVDataTable(ds.Tables("ConfGenAPV")))
            End If
            If (Not (ds.Tables("Configuracion")) Is Nothing) Then
                MyBase.Tables.Add(New ConfiguracionDataTable(ds.Tables("Configuracion")))
            End If
            If (Not (ds.Tables("Costos")) Is Nothing) Then
                MyBase.Tables.Add(New CostosDataTable(ds.Tables("Costos")))
            End If
            If (Not (ds.Tables("EqpImpL")) Is Nothing) Then
                MyBase.Tables.Add(New EqpImpLDataTable(ds.Tables("EqpImpL")))
            End If
            If (Not (ds.Tables("EqpImpLBsS")) Is Nothing) Then
                MyBase.Tables.Add(New EqpImpLBsSDataTable(ds.Tables("EqpImpLBsS")))
            End If
            If (Not (ds.Tables("EquipoComp")) Is Nothing) Then
                MyBase.Tables.Add(New EquipoCompDataTable(ds.Tables("EquipoComp")))
            End If
            If (Not (ds.Tables("IndicesPAC")) Is Nothing) Then
                MyBase.Tables.Add(New IndicesPACDataTable(ds.Tables("IndicesPAC")))
            End If
            If (Not (ds.Tables("ListaEqp")) Is Nothing) Then
                MyBase.Tables.Add(New ListaEqpDataTable(ds.Tables("ListaEqp")))
            End If
            If (Not (ds.Tables("ListaMat")) Is Nothing) Then
                MyBase.Tables.Add(New ListaMatDataTable(ds.Tables("ListaMat")))
            End If
            If (Not (ds.Tables("ListaMdO")) Is Nothing) Then
                MyBase.Tables.Add(New ListaMdODataTable(ds.Tables("ListaMdO")))
            End If
            If (Not (ds.Tables("ListaTran")) Is Nothing) Then
                MyBase.Tables.Add(New ListaTranDataTable(ds.Tables("ListaTran")))
            End If
            If (Not (ds.Tables("MasterEqp")) Is Nothing) Then
                MyBase.Tables.Add(New MasterEqpDataTable(ds.Tables("MasterEqp")))
            End If
            If (Not (ds.Tables("MasterManoObra")) Is Nothing) Then
                MyBase.Tables.Add(New MasterManoObraDataTable(ds.Tables("MasterManoObra")))
            End If
            If (Not (ds.Tables("MasterMaterial")) Is Nothing) Then
                MyBase.Tables.Add(New MasterMaterialDataTable(ds.Tables("MasterMaterial")))
            End If
            If (Not (ds.Tables("MasterPartBsS")) Is Nothing) Then
                MyBase.Tables.Add(New MasterPartBsSDataTable(ds.Tables("MasterPartBsS")))
            End If
            If (Not (ds.Tables("MasterPartidas")) Is Nothing) Then
                MyBase.Tables.Add(New MasterPartidasDataTable(ds.Tables("MasterPartidas")))
            End If
            If (Not (ds.Tables("materialComp")) Is Nothing) Then
                MyBase.Tables.Add(New materialCompDataTable(ds.Tables("materialComp")))
            End If
            If (Not (ds.Tables("MatImpL")) Is Nothing) Then
                MyBase.Tables.Add(New MatImpLDataTable(ds.Tables("MatImpL")))
            End If
            If (Not (ds.Tables("MatImpLBsS")) Is Nothing) Then
                MyBase.Tables.Add(New MatImpLBsSDataTable(ds.Tables("MatImpLBsS")))
            End If
            If (Not (ds.Tables("MOcomp")) Is Nothing) Then
                MyBase.Tables.Add(New MOcompDataTable(ds.Tables("MOcomp")))
            End If
            If (Not (ds.Tables("MOImpL")) Is Nothing) Then
                MyBase.Tables.Add(New MOImpLDataTable(ds.Tables("MOImpL")))
            End If
            If (Not (ds.Tables("MOImpLBsS")) Is Nothing) Then
                MyBase.Tables.Add(New MOImpLBsSDataTable(ds.Tables("MOImpLBsS")))
            End If
            If (Not (ds.Tables("obras")) Is Nothing) Then
                MyBase.Tables.Add(New obrasDataTable(ds.Tables("obras")))
            End If
            If (Not (ds.Tables("PartEqC")) Is Nothing) Then
                MyBase.Tables.Add(New PartEqCDataTable(ds.Tables("PartEqC")))
            End If
            If (Not (ds.Tables("EqpCompuesto")) Is Nothing) Then
                MyBase.Tables.Add(New EqpCompuestoDataTable(ds.Tables("EqpCompuesto")))
            End If
            If (Not (ds.Tables("MMaterial")) Is Nothing) Then
                MyBase.Tables.Add(New MMaterialDataTable(ds.Tables("MMaterial")))
            End If
            If (Not (ds.Tables("MObra")) Is Nothing) Then
                MyBase.Tables.Add(New MObraDataTable(ds.Tables("MObra")))
            End If
            If (Not (ds.Tables("MObraC")) Is Nothing) Then
                MyBase.Tables.Add(New MObraCDataTable(ds.Tables("MObraC")))
            End If
            If (Not (ds.Tables("Valuaciones")) Is Nothing) Then
                MyBase.Tables.Add(New ValuacionesDataTable(ds.Tables("Valuaciones")))
            End If
            If (Not (ds.Tables("ComputoEQ")) Is Nothing) Then
                MyBase.Tables.Add(New ComputoEQDataTable(ds.Tables("ComputoEQ")))
            End If
            If (Not (ds.Tables("ComputoMO")) Is Nothing) Then
                MyBase.Tables.Add(New ComputoMODataTable(ds.Tables("ComputoMO")))
            End If
            If (Not (ds.Tables("ComputoMT")) Is Nothing) Then
                MyBase.Tables.Add(New ComputoMTDataTable(ds.Tables("ComputoMT")))
            End If
            If (Not (ds.Tables("ComputoTR")) Is Nothing) Then
                MyBase.Tables.Add(New ComputoTRDataTable(ds.Tables("ComputoTR")))
            End If
            If (Not (ds.Tables("IndPAC")) Is Nothing) Then
                MyBase.Tables.Add(New IndPACDataTable(ds.Tables("IndPAC")))
            End If
            If (Not (ds.Tables("MatCompDD")) Is Nothing) Then
                MyBase.Tables.Add(New MatCompDDDataTable(ds.Tables("MatCompDD")))
            End If
            If (Not (ds.Tables("MaterialBCV")) Is Nothing) Then
                MyBase.Tables.Add(New MaterialBCVDataTable(ds.Tables("MaterialBCV")))
            End If
            If (Not (ds.Tables("MatObr")) Is Nothing) Then
                MyBase.Tables.Add(New MatObrDataTable(ds.Tables("MatObr")))
            End If
            If (Not (ds.Tables("PartObr")) Is Nothing) Then
                MyBase.Tables.Add(New PartObrDataTable(ds.Tables("PartObr")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAPUObr = CType(MyBase.Tables("APUObr"),APUObrDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAPUObr) Is Nothing) Then
                Me.tableAPUObr.InitVars
            End If
        End If
        Me.tableConfGenAPV = CType(MyBase.Tables("ConfGenAPV"),ConfGenAPVDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConfGenAPV) Is Nothing) Then
                Me.tableConfGenAPV.InitVars
            End If
        End If
        Me.tableConfiguracion = CType(MyBase.Tables("Configuracion"),ConfiguracionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConfiguracion) Is Nothing) Then
                Me.tableConfiguracion.InitVars
            End If
        End If
        Me.tableCostos = CType(MyBase.Tables("Costos"),CostosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCostos) Is Nothing) Then
                Me.tableCostos.InitVars
            End If
        End If
        Me.tableEqpImpL = CType(MyBase.Tables("EqpImpL"),EqpImpLDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEqpImpL) Is Nothing) Then
                Me.tableEqpImpL.InitVars
            End If
        End If
        Me.tableEqpImpLBsS = CType(MyBase.Tables("EqpImpLBsS"),EqpImpLBsSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEqpImpLBsS) Is Nothing) Then
                Me.tableEqpImpLBsS.InitVars
            End If
        End If
        Me.tableEquipoComp = CType(MyBase.Tables("EquipoComp"),EquipoCompDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEquipoComp) Is Nothing) Then
                Me.tableEquipoComp.InitVars
            End If
        End If
        Me.tableIndicesPAC = CType(MyBase.Tables("IndicesPAC"),IndicesPACDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIndicesPAC) Is Nothing) Then
                Me.tableIndicesPAC.InitVars
            End If
        End If
        Me.tableListaEqp = CType(MyBase.Tables("ListaEqp"),ListaEqpDataTable)
        If (initTable = true) Then
            If (Not (Me.tableListaEqp) Is Nothing) Then
                Me.tableListaEqp.InitVars
            End If
        End If
        Me.tableListaMat = CType(MyBase.Tables("ListaMat"),ListaMatDataTable)
        If (initTable = true) Then
            If (Not (Me.tableListaMat) Is Nothing) Then
                Me.tableListaMat.InitVars
            End If
        End If
        Me.tableListaMdO = CType(MyBase.Tables("ListaMdO"),ListaMdODataTable)
        If (initTable = true) Then
            If (Not (Me.tableListaMdO) Is Nothing) Then
                Me.tableListaMdO.InitVars
            End If
        End If
        Me.tableListaTran = CType(MyBase.Tables("ListaTran"),ListaTranDataTable)
        If (initTable = true) Then
            If (Not (Me.tableListaTran) Is Nothing) Then
                Me.tableListaTran.InitVars
            End If
        End If
        Me.tableMasterEqp = CType(MyBase.Tables("MasterEqp"),MasterEqpDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMasterEqp) Is Nothing) Then
                Me.tableMasterEqp.InitVars
            End If
        End If
        Me.tableMasterManoObra = CType(MyBase.Tables("MasterManoObra"),MasterManoObraDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMasterManoObra) Is Nothing) Then
                Me.tableMasterManoObra.InitVars
            End If
        End If
        Me.tableMasterMaterial = CType(MyBase.Tables("MasterMaterial"),MasterMaterialDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMasterMaterial) Is Nothing) Then
                Me.tableMasterMaterial.InitVars
            End If
        End If
        Me.tableMasterPartBsS = CType(MyBase.Tables("MasterPartBsS"),MasterPartBsSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMasterPartBsS) Is Nothing) Then
                Me.tableMasterPartBsS.InitVars
            End If
        End If
        Me.tableMasterPartidas = CType(MyBase.Tables("MasterPartidas"),MasterPartidasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMasterPartidas) Is Nothing) Then
                Me.tableMasterPartidas.InitVars
            End If
        End If
        Me.tablematerialComp = CType(MyBase.Tables("materialComp"),materialCompDataTable)
        If (initTable = true) Then
            If (Not (Me.tablematerialComp) Is Nothing) Then
                Me.tablematerialComp.InitVars
            End If
        End If
        Me.tableMatImpL = CType(MyBase.Tables("MatImpL"),MatImpLDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMatImpL) Is Nothing) Then
                Me.tableMatImpL.InitVars
            End If
        End If
        Me.tableMatImpLBsS = CType(MyBase.Tables("MatImpLBsS"),MatImpLBsSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMatImpLBsS) Is Nothing) Then
                Me.tableMatImpLBsS.InitVars
            End If
        End If
        Me.tableMOcomp = CType(MyBase.Tables("MOcomp"),MOcompDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMOcomp) Is Nothing) Then
                Me.tableMOcomp.InitVars
            End If
        End If
        Me.tableMOImpL = CType(MyBase.Tables("MOImpL"),MOImpLDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMOImpL) Is Nothing) Then
                Me.tableMOImpL.InitVars
            End If
        End If
        Me.tableMOImpLBsS = CType(MyBase.Tables("MOImpLBsS"),MOImpLBsSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMOImpLBsS) Is Nothing) Then
                Me.tableMOImpLBsS.InitVars
            End If
        End If
        Me.tableobras = CType(MyBase.Tables("obras"),obrasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableobras) Is Nothing) Then
                Me.tableobras.InitVars
            End If
        End If
        Me.tablePartEqC = CType(MyBase.Tables("PartEqC"),PartEqCDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePartEqC) Is Nothing) Then
                Me.tablePartEqC.InitVars
            End If
        End If
        Me.tableEqpCompuesto = CType(MyBase.Tables("EqpCompuesto"),EqpCompuestoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEqpCompuesto) Is Nothing) Then
                Me.tableEqpCompuesto.InitVars
            End If
        End If
        Me.tableMMaterial = CType(MyBase.Tables("MMaterial"),MMaterialDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMMaterial) Is Nothing) Then
                Me.tableMMaterial.InitVars
            End If
        End If
        Me.tableMObra = CType(MyBase.Tables("MObra"),MObraDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMObra) Is Nothing) Then
                Me.tableMObra.InitVars
            End If
        End If
        Me.tableMObraC = CType(MyBase.Tables("MObraC"),MObraCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMObraC) Is Nothing) Then
                Me.tableMObraC.InitVars
            End If
        End If
        Me.tableValuaciones = CType(MyBase.Tables("Valuaciones"),ValuacionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableValuaciones) Is Nothing) Then
                Me.tableValuaciones.InitVars
            End If
        End If
        Me.tableComputoEQ = CType(MyBase.Tables("ComputoEQ"),ComputoEQDataTable)
        If (initTable = true) Then
            If (Not (Me.tableComputoEQ) Is Nothing) Then
                Me.tableComputoEQ.InitVars
            End If
        End If
        Me.tableComputoMO = CType(MyBase.Tables("ComputoMO"),ComputoMODataTable)
        If (initTable = true) Then
            If (Not (Me.tableComputoMO) Is Nothing) Then
                Me.tableComputoMO.InitVars
            End If
        End If
        Me.tableComputoMT = CType(MyBase.Tables("ComputoMT"),ComputoMTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableComputoMT) Is Nothing) Then
                Me.tableComputoMT.InitVars
            End If
        End If
        Me.tableComputoTR = CType(MyBase.Tables("ComputoTR"),ComputoTRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableComputoTR) Is Nothing) Then
                Me.tableComputoTR.InitVars
            End If
        End If
        Me.tableIndPAC = CType(MyBase.Tables("IndPAC"),IndPACDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIndPAC) Is Nothing) Then
                Me.tableIndPAC.InitVars
            End If
        End If
        Me.tableMatCompDD = CType(MyBase.Tables("MatCompDD"),MatCompDDDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMatCompDD) Is Nothing) Then
                Me.tableMatCompDD.InitVars
            End If
        End If
        Me.tableMaterialBCV = CType(MyBase.Tables("MaterialBCV"),MaterialBCVDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMaterialBCV) Is Nothing) Then
                Me.tableMaterialBCV.InitVars
            End If
        End If
        Me.tableMatObr = CType(MyBase.Tables("MatObr"),MatObrDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMatObr) Is Nothing) Then
                Me.tableMatObr.InitVars
            End If
        End If
        Me.tablePartObr = CType(MyBase.Tables("PartObr"),PartObrDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePartObr) Is Nothing) Then
                Me.tablePartObr.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "MasterAPVDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MasterAPVDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAPUObr = New APUObrDataTable
        MyBase.Tables.Add(Me.tableAPUObr)
        Me.tableConfGenAPV = New ConfGenAPVDataTable
        MyBase.Tables.Add(Me.tableConfGenAPV)
        Me.tableConfiguracion = New ConfiguracionDataTable
        MyBase.Tables.Add(Me.tableConfiguracion)
        Me.tableCostos = New CostosDataTable
        MyBase.Tables.Add(Me.tableCostos)
        Me.tableEqpImpL = New EqpImpLDataTable
        MyBase.Tables.Add(Me.tableEqpImpL)
        Me.tableEqpImpLBsS = New EqpImpLBsSDataTable
        MyBase.Tables.Add(Me.tableEqpImpLBsS)
        Me.tableEquipoComp = New EquipoCompDataTable
        MyBase.Tables.Add(Me.tableEquipoComp)
        Me.tableIndicesPAC = New IndicesPACDataTable
        MyBase.Tables.Add(Me.tableIndicesPAC)
        Me.tableListaEqp = New ListaEqpDataTable
        MyBase.Tables.Add(Me.tableListaEqp)
        Me.tableListaMat = New ListaMatDataTable
        MyBase.Tables.Add(Me.tableListaMat)
        Me.tableListaMdO = New ListaMdODataTable
        MyBase.Tables.Add(Me.tableListaMdO)
        Me.tableListaTran = New ListaTranDataTable
        MyBase.Tables.Add(Me.tableListaTran)
        Me.tableMasterEqp = New MasterEqpDataTable
        MyBase.Tables.Add(Me.tableMasterEqp)
        Me.tableMasterManoObra = New MasterManoObraDataTable
        MyBase.Tables.Add(Me.tableMasterManoObra)
        Me.tableMasterMaterial = New MasterMaterialDataTable
        MyBase.Tables.Add(Me.tableMasterMaterial)
        Me.tableMasterPartBsS = New MasterPartBsSDataTable
        MyBase.Tables.Add(Me.tableMasterPartBsS)
        Me.tableMasterPartidas = New MasterPartidasDataTable
        MyBase.Tables.Add(Me.tableMasterPartidas)
        Me.tablematerialComp = New materialCompDataTable
        MyBase.Tables.Add(Me.tablematerialComp)
        Me.tableMatImpL = New MatImpLDataTable
        MyBase.Tables.Add(Me.tableMatImpL)
        Me.tableMatImpLBsS = New MatImpLBsSDataTable
        MyBase.Tables.Add(Me.tableMatImpLBsS)
        Me.tableMOcomp = New MOcompDataTable
        MyBase.Tables.Add(Me.tableMOcomp)
        Me.tableMOImpL = New MOImpLDataTable
        MyBase.Tables.Add(Me.tableMOImpL)
        Me.tableMOImpLBsS = New MOImpLBsSDataTable
        MyBase.Tables.Add(Me.tableMOImpLBsS)
        Me.tableobras = New obrasDataTable
        MyBase.Tables.Add(Me.tableobras)
        Me.tablePartEqC = New PartEqCDataTable
        MyBase.Tables.Add(Me.tablePartEqC)
        Me.tableEqpCompuesto = New EqpCompuestoDataTable
        MyBase.Tables.Add(Me.tableEqpCompuesto)
        Me.tableMMaterial = New MMaterialDataTable
        MyBase.Tables.Add(Me.tableMMaterial)
        Me.tableMObra = New MObraDataTable
        MyBase.Tables.Add(Me.tableMObra)
        Me.tableMObraC = New MObraCDataTable
        MyBase.Tables.Add(Me.tableMObraC)
        Me.tableValuaciones = New ValuacionesDataTable
        MyBase.Tables.Add(Me.tableValuaciones)
        Me.tableComputoEQ = New ComputoEQDataTable
        MyBase.Tables.Add(Me.tableComputoEQ)
        Me.tableComputoMO = New ComputoMODataTable
        MyBase.Tables.Add(Me.tableComputoMO)
        Me.tableComputoMT = New ComputoMTDataTable
        MyBase.Tables.Add(Me.tableComputoMT)
        Me.tableComputoTR = New ComputoTRDataTable
        MyBase.Tables.Add(Me.tableComputoTR)
        Me.tableIndPAC = New IndPACDataTable
        MyBase.Tables.Add(Me.tableIndPAC)
        Me.tableMatCompDD = New MatCompDDDataTable
        MyBase.Tables.Add(Me.tableMatCompDD)
        Me.tableMaterialBCV = New MaterialBCVDataTable
        MyBase.Tables.Add(Me.tableMaterialBCV)
        Me.tableMatObr = New MatObrDataTable
        MyBase.Tables.Add(Me.tableMatObr)
        Me.tablePartObr = New PartObrDataTable
        MyBase.Tables.Add(Me.tablePartObr)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAPUObr() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConfGenAPV() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConfiguracion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCostos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEqpImpL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEqpImpLBsS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEquipoComp() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIndicesPAC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeListaEqp() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeListaMat() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeListaMdO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeListaTran() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMasterEqp() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMasterManoObra() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMasterMaterial() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMasterPartBsS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMasterPartidas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializematerialComp() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMatImpL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMatImpLBsS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMOcomp() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMOImpL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMOImpLBsS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeobras() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePartEqC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEqpCompuesto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMMaterial() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMObra() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMObraC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeValuaciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeComputoEQ() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeComputoMO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeComputoMT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeComputoTR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIndPAC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMatCompDD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMaterialBCV() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMatObr() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePartObr() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As MasterAPVDataSet = New MasterAPVDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub APUObrRowChangeEventHandler(ByVal sender As Object, ByVal e As APUObrRowChangeEvent)
    
    Public Delegate Sub ConfGenAPVRowChangeEventHandler(ByVal sender As Object, ByVal e As ConfGenAPVRowChangeEvent)
    
    Public Delegate Sub ConfiguracionRowChangeEventHandler(ByVal sender As Object, ByVal e As ConfiguracionRowChangeEvent)
    
    Public Delegate Sub CostosRowChangeEventHandler(ByVal sender As Object, ByVal e As CostosRowChangeEvent)
    
    Public Delegate Sub EqpImpLRowChangeEventHandler(ByVal sender As Object, ByVal e As EqpImpLRowChangeEvent)
    
    Public Delegate Sub EqpImpLBsSRowChangeEventHandler(ByVal sender As Object, ByVal e As EqpImpLBsSRowChangeEvent)
    
    Public Delegate Sub EquipoCompRowChangeEventHandler(ByVal sender As Object, ByVal e As EquipoCompRowChangeEvent)
    
    Public Delegate Sub IndicesPACRowChangeEventHandler(ByVal sender As Object, ByVal e As IndicesPACRowChangeEvent)
    
    Public Delegate Sub ListaEqpRowChangeEventHandler(ByVal sender As Object, ByVal e As ListaEqpRowChangeEvent)
    
    Public Delegate Sub ListaMatRowChangeEventHandler(ByVal sender As Object, ByVal e As ListaMatRowChangeEvent)
    
    Public Delegate Sub ListaMdORowChangeEventHandler(ByVal sender As Object, ByVal e As ListaMdORowChangeEvent)
    
    Public Delegate Sub ListaTranRowChangeEventHandler(ByVal sender As Object, ByVal e As ListaTranRowChangeEvent)
    
    Public Delegate Sub MasterEqpRowChangeEventHandler(ByVal sender As Object, ByVal e As MasterEqpRowChangeEvent)
    
    Public Delegate Sub MasterManoObraRowChangeEventHandler(ByVal sender As Object, ByVal e As MasterManoObraRowChangeEvent)
    
    Public Delegate Sub MasterMaterialRowChangeEventHandler(ByVal sender As Object, ByVal e As MasterMaterialRowChangeEvent)
    
    Public Delegate Sub MasterPartBsSRowChangeEventHandler(ByVal sender As Object, ByVal e As MasterPartBsSRowChangeEvent)
    
    Public Delegate Sub MasterPartidasRowChangeEventHandler(ByVal sender As Object, ByVal e As MasterPartidasRowChangeEvent)
    
    Public Delegate Sub materialCompRowChangeEventHandler(ByVal sender As Object, ByVal e As materialCompRowChangeEvent)
    
    Public Delegate Sub MatImpLRowChangeEventHandler(ByVal sender As Object, ByVal e As MatImpLRowChangeEvent)
    
    Public Delegate Sub MatImpLBsSRowChangeEventHandler(ByVal sender As Object, ByVal e As MatImpLBsSRowChangeEvent)
    
    Public Delegate Sub MOcompRowChangeEventHandler(ByVal sender As Object, ByVal e As MOcompRowChangeEvent)
    
    Public Delegate Sub MOImpLRowChangeEventHandler(ByVal sender As Object, ByVal e As MOImpLRowChangeEvent)
    
    Public Delegate Sub MOImpLBsSRowChangeEventHandler(ByVal sender As Object, ByVal e As MOImpLBsSRowChangeEvent)
    
    Public Delegate Sub obrasRowChangeEventHandler(ByVal sender As Object, ByVal e As obrasRowChangeEvent)
    
    Public Delegate Sub PartEqCRowChangeEventHandler(ByVal sender As Object, ByVal e As PartEqCRowChangeEvent)
    
    Public Delegate Sub EqpCompuestoRowChangeEventHandler(ByVal sender As Object, ByVal e As EqpCompuestoRowChangeEvent)
    
    Public Delegate Sub MMaterialRowChangeEventHandler(ByVal sender As Object, ByVal e As MMaterialRowChangeEvent)
    
    Public Delegate Sub MObraRowChangeEventHandler(ByVal sender As Object, ByVal e As MObraRowChangeEvent)
    
    Public Delegate Sub MObraCRowChangeEventHandler(ByVal sender As Object, ByVal e As MObraCRowChangeEvent)
    
    Public Delegate Sub ValuacionesRowChangeEventHandler(ByVal sender As Object, ByVal e As ValuacionesRowChangeEvent)
    
    Public Delegate Sub ComputoEQRowChangeEventHandler(ByVal sender As Object, ByVal e As ComputoEQRowChangeEvent)
    
    Public Delegate Sub ComputoMORowChangeEventHandler(ByVal sender As Object, ByVal e As ComputoMORowChangeEvent)
    
    Public Delegate Sub ComputoMTRowChangeEventHandler(ByVal sender As Object, ByVal e As ComputoMTRowChangeEvent)
    
    Public Delegate Sub ComputoTRRowChangeEventHandler(ByVal sender As Object, ByVal e As ComputoTRRowChangeEvent)
    
    Public Delegate Sub IndPACRowChangeEventHandler(ByVal sender As Object, ByVal e As IndPACRowChangeEvent)
    
    Public Delegate Sub MatCompDDRowChangeEventHandler(ByVal sender As Object, ByVal e As MatCompDDRowChangeEvent)
    
    Public Delegate Sub MaterialBCVRowChangeEventHandler(ByVal sender As Object, ByVal e As MaterialBCVRowChangeEvent)
    
    Public Delegate Sub MatObrRowChangeEventHandler(ByVal sender As Object, ByVal e As MatObrRowChangeEvent)
    
    Public Delegate Sub PartObrRowChangeEventHandler(ByVal sender As Object, ByVal e As PartObrRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class APUObrDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private _columncod_obr_apu As Global.System.Data.DataColumn
        
        Private _columnrec_typ_apu As Global.System.Data.DataColumn
        
        Private _columnnum_par_apu As Global.System.Data.DataColumn
        
        Private _columncod_par_m As Global.System.Data.DataColumn
        
        Private columnPartidaTexto As Global.System.Data.DataColumn
        
        Private _columncod_mat_apu As Global.System.Data.DataColumn
        
        Private _columnid_mat_apu As Global.System.Data.DataColumn
        
        Private _columncod_eqp_apu As Global.System.Data.DataColumn
        
        Private _columnid_eqp_apu As Global.System.Data.DataColumn
        
        Private _columncod_mob_apu As Global.System.Data.DataColumn
        
        Private _columnid_mob_apu As Global.System.Data.DataColumn
        
        Private _columncod_trn_apu As Global.System.Data.DataColumn
        
        Private _columnid_trn_apu As Global.System.Data.DataColumn
        
        Private _columncan_ana_apu As Global.System.Data.DataColumn
        
        Private _columnren_par_apu As Global.System.Data.DataColumn
        
        Private _columncan_apr_apu As Global.System.Data.DataColumn
        
        Private _columnund_par_apu As Global.System.Data.DataColumn
        
        Private _columniva_apu As Global.System.Data.DataColumn
        
        Private _columnprc_adm_apu As Global.System.Data.DataColumn
        
        Private _columnprc_utl_apu As Global.System.Data.DataColumn
        
        Private _columnfcas_apu As Global.System.Data.DataColumn
        
        Private _columnfin_obr_apu As Global.System.Data.DataColumn
        
        Private _columnpun_par_apu As Global.System.Data.DataColumn
        
        Private _columnpun_ana_apu As Global.System.Data.DataColumn
        
        Private _columnpun_adp_apu As Global.System.Data.DataColumn
        
        Private _columnhor_hmb_apu As Global.System.Data.DataColumn
        
        Private columnDias As Global.System.Data.DataColumn
        
        Private columnNumeroControl As Global.System.Data.DataColumn
        
        Private _columnptot_pr_apu As Global.System.Data.DataColumn
        
        Private _columntot_gen_apu As Global.System.Data.DataColumn
        
        Private _columntit_is_apu As Global.System.Data.DataColumn
        
        Private _columnund_mat_apu As Global.System.Data.DataColumn
        
        Private _columncnt_mat_apu As Global.System.Data.DataColumn
        
        Private _columncst_mat_apu As Global.System.Data.DataColumn
        
        Private _columntot_mat_apu As Global.System.Data.DataColumn
        
        Private _columncnt_eqp_apu As Global.System.Data.DataColumn
        
        Private _columncst_eqp_apu As Global.System.Data.DataColumn
        
        Private _columndep_eqp_apu As Global.System.Data.DataColumn
        
        Private _columnceq_apu_tot As Global.System.Data.DataColumn
        
        Private _columncnt_mob_apu As Global.System.Data.DataColumn
        
        Private _columnjrn_mob_apu As Global.System.Data.DataColumn
        
        Private _columnbno_mob_apu As Global.System.Data.DataColumn
        
        Private _columntot_jrn_apu As Global.System.Data.DataColumn
        
        Private _columntot_bno_apu As Global.System.Data.DataColumn
        
        Private _columnund_trn_apu As Global.System.Data.DataColumn
        
        Private _columncnt_trn_apu As Global.System.Data.DataColumn
        
        Private _columncst_trn_apu As Global.System.Data.DataColumn
        
        Private _columntot_trn_apu As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "APUObr"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_obr_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_obr_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _rec_typ_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnrec_typ_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _num_par_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnnum_par_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_par_mColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_par_m
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartidaTextoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartidaTexto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _id_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnid_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_eqp_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_eqp_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _id_eqp_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnid_eqp_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_mob_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_mob_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _id_mob_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnid_mob_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_trn_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_trn_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _id_trn_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnid_trn_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _can_ana_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncan_ana_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ren_par_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnren_par_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _can_apr_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncan_apr_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _und_par_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnund_par_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _iva_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columniva_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _prc_adm_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprc_adm_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _prc_utl_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprc_utl_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _fcas_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnfcas_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _fin_obr_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnfin_obr_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _pun_par_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnpun_par_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _pun_ana_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnpun_ana_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _pun_adp_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnpun_adp_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _hor_hmb_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnhor_hmb_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDias
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ptot_pr_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnptot_pr_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _tot_gen_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columntot_gen_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _tit_is_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columntit_is_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _und_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnund_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cnt_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncnt_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cst_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncst_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _tot_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columntot_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cnt_eqp_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncnt_eqp_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cst_eqp_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncst_eqp_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _dep_eqp_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columndep_eqp_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ceq_apu_totColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnceq_apu_tot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cnt_mob_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncnt_mob_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _jrn_mob_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnjrn_mob_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _bno_mob_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnbno_mob_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _tot_jrn_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columntot_jrn_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _tot_bno_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columntot_bno_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _und_trn_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnund_trn_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cnt_trn_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncnt_trn_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cst_trn_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncst_trn_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _tot_trn_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columntot_trn_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As APUObrRow
            Get
                Return CType(Me.Rows(index),APUObrRow)
            End Get
        End Property
        
        Public Event APUObrRowChanging As APUObrRowChangeEventHandler
        
        Public Event APUObrRowChanged As APUObrRowChangeEventHandler
        
        Public Event APUObrRowDeleting As APUObrRowChangeEventHandler
        
        Public Event APUObrRowDeleted As APUObrRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAPUObrRow(ByVal row As APUObrRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAPUObrRow( _
                    ByVal _cod_obr_apu As String,  _
                    ByVal _rec_typ_apu As String,  _
                    ByVal _num_par_apu As Double,  _
                    ByVal _cod_par_m As String,  _
                    ByVal PartidaTexto As String,  _
                    ByVal _cod_mat_apu As String,  _
                    ByVal _id_mat_apu As String,  _
                    ByVal _cod_eqp_apu As Double,  _
                    ByVal _id_eqp_apu As Double,  _
                    ByVal _cod_mob_apu As Double,  _
                    ByVal _id_mob_apu As Double,  _
                    ByVal _cod_trn_apu As String,  _
                    ByVal _id_trn_apu As String,  _
                    ByVal _can_ana_apu As Double,  _
                    ByVal _ren_par_apu As Double,  _
                    ByVal _can_apr_apu As Double,  _
                    ByVal _und_par_apu As String,  _
                    ByVal _iva_apu As Double,  _
                    ByVal _prc_adm_apu As Double,  _
                    ByVal _prc_utl_apu As Double,  _
                    ByVal _fcas_apu As Double,  _
                    ByVal _fin_obr_apu As Double,  _
                    ByVal _pun_par_apu As Double,  _
                    ByVal _pun_ana_apu As Double,  _
                    ByVal _pun_adp_apu As Double,  _
                    ByVal _hor_hmb_apu As Double,  _
                    ByVal Dias As Double,  _
                    ByVal NumeroControl As Double,  _
                    ByVal _ptot_pr_apu As Double,  _
                    ByVal _tot_gen_apu As Double,  _
                    ByVal _tit_is_apu As String,  _
                    ByVal _und_mat_apu As String,  _
                    ByVal _cnt_mat_apu As Double,  _
                    ByVal _cst_mat_apu As Double,  _
                    ByVal _tot_mat_apu As Double,  _
                    ByVal _cnt_eqp_apu As Double,  _
                    ByVal _cst_eqp_apu As Double,  _
                    ByVal _dep_eqp_apu As Double,  _
                    ByVal _ceq_apu_tot As Double,  _
                    ByVal _cnt_mob_apu As Double,  _
                    ByVal _jrn_mob_apu As Double,  _
                    ByVal _bno_mob_apu As Double,  _
                    ByVal _tot_jrn_apu As Double,  _
                    ByVal _tot_bno_apu As Double,  _
                    ByVal _und_trn_apu As String,  _
                    ByVal _cnt_trn_apu As String,  _
                    ByVal _cst_trn_apu As String,  _
                    ByVal _tot_trn_apu As String) As APUObrRow
            Dim rowAPUObrRow As APUObrRow = CType(Me.NewRow,APUObrRow)
            Dim columnValuesArray() As Object = New Object() {_cod_obr_apu, _rec_typ_apu, _num_par_apu, _cod_par_m, PartidaTexto, _cod_mat_apu, _id_mat_apu, _cod_eqp_apu, _id_eqp_apu, _cod_mob_apu, _id_mob_apu, _cod_trn_apu, _id_trn_apu, _can_ana_apu, _ren_par_apu, _can_apr_apu, _und_par_apu, _iva_apu, _prc_adm_apu, _prc_utl_apu, _fcas_apu, _fin_obr_apu, _pun_par_apu, _pun_ana_apu, _pun_adp_apu, _hor_hmb_apu, Dias, NumeroControl, _ptot_pr_apu, _tot_gen_apu, _tit_is_apu, _und_mat_apu, _cnt_mat_apu, _cst_mat_apu, _tot_mat_apu, _cnt_eqp_apu, _cst_eqp_apu, _dep_eqp_apu, _ceq_apu_tot, _cnt_mob_apu, _jrn_mob_apu, _bno_mob_apu, _tot_jrn_apu, _tot_bno_apu, _und_trn_apu, _cnt_trn_apu, _cst_trn_apu, _tot_trn_apu}
            rowAPUObrRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAPUObrRow)
            Return rowAPUObrRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As APUObrDataTable = CType(MyBase.Clone,APUObrDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New APUObrDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columncod_obr_apu = MyBase.Columns("cod-obr-apu")
            Me._columnrec_typ_apu = MyBase.Columns("rec-typ-apu")
            Me._columnnum_par_apu = MyBase.Columns("num-par-apu")
            Me._columncod_par_m = MyBase.Columns("cod-par-m")
            Me.columnPartidaTexto = MyBase.Columns("PartidaTexto")
            Me._columncod_mat_apu = MyBase.Columns("cod-mat-apu")
            Me._columnid_mat_apu = MyBase.Columns("id-mat-apu")
            Me._columncod_eqp_apu = MyBase.Columns("cod-eqp-apu")
            Me._columnid_eqp_apu = MyBase.Columns("id-eqp-apu")
            Me._columncod_mob_apu = MyBase.Columns("cod-mob-apu")
            Me._columnid_mob_apu = MyBase.Columns("id-mob-apu")
            Me._columncod_trn_apu = MyBase.Columns("cod-trn-apu")
            Me._columnid_trn_apu = MyBase.Columns("id-trn-apu")
            Me._columncan_ana_apu = MyBase.Columns("can-ana-apu")
            Me._columnren_par_apu = MyBase.Columns("ren-par-apu")
            Me._columncan_apr_apu = MyBase.Columns("can-apr-apu")
            Me._columnund_par_apu = MyBase.Columns("und-par-apu")
            Me._columniva_apu = MyBase.Columns("iva-apu")
            Me._columnprc_adm_apu = MyBase.Columns("prc-adm-apu")
            Me._columnprc_utl_apu = MyBase.Columns("prc-utl-apu")
            Me._columnfcas_apu = MyBase.Columns("fcas-apu")
            Me._columnfin_obr_apu = MyBase.Columns("fin-obr-apu")
            Me._columnpun_par_apu = MyBase.Columns("pun-par-apu")
            Me._columnpun_ana_apu = MyBase.Columns("pun-ana-apu")
            Me._columnpun_adp_apu = MyBase.Columns("pun-adp-apu")
            Me._columnhor_hmb_apu = MyBase.Columns("hor-hmb-apu")
            Me.columnDias = MyBase.Columns("Dias")
            Me.columnNumeroControl = MyBase.Columns("NumeroControl")
            Me._columnptot_pr_apu = MyBase.Columns("ptot-pr-apu")
            Me._columntot_gen_apu = MyBase.Columns("tot-gen-apu")
            Me._columntit_is_apu = MyBase.Columns("tit-is-apu")
            Me._columnund_mat_apu = MyBase.Columns("und-mat-apu")
            Me._columncnt_mat_apu = MyBase.Columns("cnt-mat-apu")
            Me._columncst_mat_apu = MyBase.Columns("cst-mat-apu")
            Me._columntot_mat_apu = MyBase.Columns("tot-mat-apu")
            Me._columncnt_eqp_apu = MyBase.Columns("cnt-eqp-apu")
            Me._columncst_eqp_apu = MyBase.Columns("cst-eqp-apu")
            Me._columndep_eqp_apu = MyBase.Columns("dep-eqp-apu")
            Me._columnceq_apu_tot = MyBase.Columns("ceq-apu-tot")
            Me._columncnt_mob_apu = MyBase.Columns("cnt-mob-apu")
            Me._columnjrn_mob_apu = MyBase.Columns("jrn-mob-apu")
            Me._columnbno_mob_apu = MyBase.Columns("bno-mob-apu")
            Me._columntot_jrn_apu = MyBase.Columns("tot-jrn-apu")
            Me._columntot_bno_apu = MyBase.Columns("tot-bno-apu")
            Me._columnund_trn_apu = MyBase.Columns("und-trn-apu")
            Me._columncnt_trn_apu = MyBase.Columns("cnt-trn-apu")
            Me._columncst_trn_apu = MyBase.Columns("cst-trn-apu")
            Me._columntot_trn_apu = MyBase.Columns("tot-trn-apu")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columncod_obr_apu = New Global.System.Data.DataColumn("cod-obr-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_obr_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_obr_apu")
            Me._columncod_obr_apu.ExtendedProperties.Add("Generator_UserColumnName", "cod-obr-apu")
            MyBase.Columns.Add(Me._columncod_obr_apu)
            Me._columnrec_typ_apu = New Global.System.Data.DataColumn("rec-typ-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnrec_typ_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnrec_typ_apu")
            Me._columnrec_typ_apu.ExtendedProperties.Add("Generator_UserColumnName", "rec-typ-apu")
            MyBase.Columns.Add(Me._columnrec_typ_apu)
            Me._columnnum_par_apu = New Global.System.Data.DataColumn("num-par-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnnum_par_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnnum_par_apu")
            Me._columnnum_par_apu.ExtendedProperties.Add("Generator_UserColumnName", "num-par-apu")
            MyBase.Columns.Add(Me._columnnum_par_apu)
            Me._columncod_par_m = New Global.System.Data.DataColumn("cod-par-m", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_par_m.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_par_m")
            Me._columncod_par_m.ExtendedProperties.Add("Generator_UserColumnName", "cod-par-m")
            MyBase.Columns.Add(Me._columncod_par_m)
            Me.columnPartidaTexto = New Global.System.Data.DataColumn("PartidaTexto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartidaTexto)
            Me._columncod_mat_apu = New Global.System.Data.DataColumn("cod-mat-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_mat_apu")
            Me._columncod_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "cod-mat-apu")
            MyBase.Columns.Add(Me._columncod_mat_apu)
            Me._columnid_mat_apu = New Global.System.Data.DataColumn("id-mat-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnid_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnid_mat_apu")
            Me._columnid_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "id-mat-apu")
            MyBase.Columns.Add(Me._columnid_mat_apu)
            Me._columncod_eqp_apu = New Global.System.Data.DataColumn("cod-eqp-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_eqp_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_eqp_apu")
            Me._columncod_eqp_apu.ExtendedProperties.Add("Generator_UserColumnName", "cod-eqp-apu")
            MyBase.Columns.Add(Me._columncod_eqp_apu)
            Me._columnid_eqp_apu = New Global.System.Data.DataColumn("id-eqp-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnid_eqp_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnid_eqp_apu")
            Me._columnid_eqp_apu.ExtendedProperties.Add("Generator_UserColumnName", "id-eqp-apu")
            MyBase.Columns.Add(Me._columnid_eqp_apu)
            Me._columncod_mob_apu = New Global.System.Data.DataColumn("cod-mob-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_mob_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_mob_apu")
            Me._columncod_mob_apu.ExtendedProperties.Add("Generator_UserColumnName", "cod-mob-apu")
            MyBase.Columns.Add(Me._columncod_mob_apu)
            Me._columnid_mob_apu = New Global.System.Data.DataColumn("id-mob-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnid_mob_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnid_mob_apu")
            Me._columnid_mob_apu.ExtendedProperties.Add("Generator_UserColumnName", "id-mob-apu")
            MyBase.Columns.Add(Me._columnid_mob_apu)
            Me._columncod_trn_apu = New Global.System.Data.DataColumn("cod-trn-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_trn_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_trn_apu")
            Me._columncod_trn_apu.ExtendedProperties.Add("Generator_UserColumnName", "cod-trn-apu")
            MyBase.Columns.Add(Me._columncod_trn_apu)
            Me._columnid_trn_apu = New Global.System.Data.DataColumn("id-trn-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnid_trn_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnid_trn_apu")
            Me._columnid_trn_apu.ExtendedProperties.Add("Generator_UserColumnName", "id-trn-apu")
            MyBase.Columns.Add(Me._columnid_trn_apu)
            Me._columncan_ana_apu = New Global.System.Data.DataColumn("can-ana-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncan_ana_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncan_ana_apu")
            Me._columncan_ana_apu.ExtendedProperties.Add("Generator_UserColumnName", "can-ana-apu")
            MyBase.Columns.Add(Me._columncan_ana_apu)
            Me._columnren_par_apu = New Global.System.Data.DataColumn("ren-par-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnren_par_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnren_par_apu")
            Me._columnren_par_apu.ExtendedProperties.Add("Generator_UserColumnName", "ren-par-apu")
            MyBase.Columns.Add(Me._columnren_par_apu)
            Me._columncan_apr_apu = New Global.System.Data.DataColumn("can-apr-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncan_apr_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncan_apr_apu")
            Me._columncan_apr_apu.ExtendedProperties.Add("Generator_UserColumnName", "can-apr-apu")
            MyBase.Columns.Add(Me._columncan_apr_apu)
            Me._columnund_par_apu = New Global.System.Data.DataColumn("und-par-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnund_par_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnund_par_apu")
            Me._columnund_par_apu.ExtendedProperties.Add("Generator_UserColumnName", "und-par-apu")
            MyBase.Columns.Add(Me._columnund_par_apu)
            Me._columniva_apu = New Global.System.Data.DataColumn("iva-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columniva_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columniva_apu")
            Me._columniva_apu.ExtendedProperties.Add("Generator_UserColumnName", "iva-apu")
            MyBase.Columns.Add(Me._columniva_apu)
            Me._columnprc_adm_apu = New Global.System.Data.DataColumn("prc-adm-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprc_adm_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprc_adm_apu")
            Me._columnprc_adm_apu.ExtendedProperties.Add("Generator_UserColumnName", "prc-adm-apu")
            MyBase.Columns.Add(Me._columnprc_adm_apu)
            Me._columnprc_utl_apu = New Global.System.Data.DataColumn("prc-utl-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprc_utl_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprc_utl_apu")
            Me._columnprc_utl_apu.ExtendedProperties.Add("Generator_UserColumnName", "prc-utl-apu")
            MyBase.Columns.Add(Me._columnprc_utl_apu)
            Me._columnfcas_apu = New Global.System.Data.DataColumn("fcas-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnfcas_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnfcas_apu")
            Me._columnfcas_apu.ExtendedProperties.Add("Generator_UserColumnName", "fcas-apu")
            MyBase.Columns.Add(Me._columnfcas_apu)
            Me._columnfin_obr_apu = New Global.System.Data.DataColumn("fin-obr-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnfin_obr_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnfin_obr_apu")
            Me._columnfin_obr_apu.ExtendedProperties.Add("Generator_UserColumnName", "fin-obr-apu")
            MyBase.Columns.Add(Me._columnfin_obr_apu)
            Me._columnpun_par_apu = New Global.System.Data.DataColumn("pun-par-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnpun_par_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnpun_par_apu")
            Me._columnpun_par_apu.ExtendedProperties.Add("Generator_UserColumnName", "pun-par-apu")
            MyBase.Columns.Add(Me._columnpun_par_apu)
            Me._columnpun_ana_apu = New Global.System.Data.DataColumn("pun-ana-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnpun_ana_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnpun_ana_apu")
            Me._columnpun_ana_apu.ExtendedProperties.Add("Generator_UserColumnName", "pun-ana-apu")
            MyBase.Columns.Add(Me._columnpun_ana_apu)
            Me._columnpun_adp_apu = New Global.System.Data.DataColumn("pun-adp-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnpun_adp_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnpun_adp_apu")
            Me._columnpun_adp_apu.ExtendedProperties.Add("Generator_UserColumnName", "pun-adp-apu")
            MyBase.Columns.Add(Me._columnpun_adp_apu)
            Me._columnhor_hmb_apu = New Global.System.Data.DataColumn("hor-hmb-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnhor_hmb_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnhor_hmb_apu")
            Me._columnhor_hmb_apu.ExtendedProperties.Add("Generator_UserColumnName", "hor-hmb-apu")
            MyBase.Columns.Add(Me._columnhor_hmb_apu)
            Me.columnDias = New Global.System.Data.DataColumn("Dias", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDias)
            Me.columnNumeroControl = New Global.System.Data.DataColumn("NumeroControl", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroControl)
            Me._columnptot_pr_apu = New Global.System.Data.DataColumn("ptot-pr-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnptot_pr_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnptot_pr_apu")
            Me._columnptot_pr_apu.ExtendedProperties.Add("Generator_UserColumnName", "ptot-pr-apu")
            MyBase.Columns.Add(Me._columnptot_pr_apu)
            Me._columntot_gen_apu = New Global.System.Data.DataColumn("tot-gen-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columntot_gen_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columntot_gen_apu")
            Me._columntot_gen_apu.ExtendedProperties.Add("Generator_UserColumnName", "tot-gen-apu")
            MyBase.Columns.Add(Me._columntot_gen_apu)
            Me._columntit_is_apu = New Global.System.Data.DataColumn("tit-is-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columntit_is_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columntit_is_apu")
            Me._columntit_is_apu.ExtendedProperties.Add("Generator_UserColumnName", "tit-is-apu")
            MyBase.Columns.Add(Me._columntit_is_apu)
            Me._columnund_mat_apu = New Global.System.Data.DataColumn("und-mat-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnund_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnund_mat_apu")
            Me._columnund_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "und-mat-apu")
            MyBase.Columns.Add(Me._columnund_mat_apu)
            Me._columncnt_mat_apu = New Global.System.Data.DataColumn("cnt-mat-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncnt_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncnt_mat_apu")
            Me._columncnt_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "cnt-mat-apu")
            MyBase.Columns.Add(Me._columncnt_mat_apu)
            Me._columncst_mat_apu = New Global.System.Data.DataColumn("cst-mat-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncst_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncst_mat_apu")
            Me._columncst_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "cst-mat-apu")
            MyBase.Columns.Add(Me._columncst_mat_apu)
            Me._columntot_mat_apu = New Global.System.Data.DataColumn("tot-mat-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columntot_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columntot_mat_apu")
            Me._columntot_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "tot-mat-apu")
            MyBase.Columns.Add(Me._columntot_mat_apu)
            Me._columncnt_eqp_apu = New Global.System.Data.DataColumn("cnt-eqp-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncnt_eqp_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncnt_eqp_apu")
            Me._columncnt_eqp_apu.ExtendedProperties.Add("Generator_UserColumnName", "cnt-eqp-apu")
            MyBase.Columns.Add(Me._columncnt_eqp_apu)
            Me._columncst_eqp_apu = New Global.System.Data.DataColumn("cst-eqp-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncst_eqp_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncst_eqp_apu")
            Me._columncst_eqp_apu.ExtendedProperties.Add("Generator_UserColumnName", "cst-eqp-apu")
            MyBase.Columns.Add(Me._columncst_eqp_apu)
            Me._columndep_eqp_apu = New Global.System.Data.DataColumn("dep-eqp-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columndep_eqp_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columndep_eqp_apu")
            Me._columndep_eqp_apu.ExtendedProperties.Add("Generator_UserColumnName", "dep-eqp-apu")
            MyBase.Columns.Add(Me._columndep_eqp_apu)
            Me._columnceq_apu_tot = New Global.System.Data.DataColumn("ceq-apu-tot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnceq_apu_tot.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnceq_apu_tot")
            Me._columnceq_apu_tot.ExtendedProperties.Add("Generator_UserColumnName", "ceq-apu-tot")
            MyBase.Columns.Add(Me._columnceq_apu_tot)
            Me._columncnt_mob_apu = New Global.System.Data.DataColumn("cnt-mob-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncnt_mob_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncnt_mob_apu")
            Me._columncnt_mob_apu.ExtendedProperties.Add("Generator_UserColumnName", "cnt-mob-apu")
            MyBase.Columns.Add(Me._columncnt_mob_apu)
            Me._columnjrn_mob_apu = New Global.System.Data.DataColumn("jrn-mob-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnjrn_mob_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnjrn_mob_apu")
            Me._columnjrn_mob_apu.ExtendedProperties.Add("Generator_UserColumnName", "jrn-mob-apu")
            MyBase.Columns.Add(Me._columnjrn_mob_apu)
            Me._columnbno_mob_apu = New Global.System.Data.DataColumn("bno-mob-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnbno_mob_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnbno_mob_apu")
            Me._columnbno_mob_apu.ExtendedProperties.Add("Generator_UserColumnName", "bno-mob-apu")
            MyBase.Columns.Add(Me._columnbno_mob_apu)
            Me._columntot_jrn_apu = New Global.System.Data.DataColumn("tot-jrn-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columntot_jrn_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columntot_jrn_apu")
            Me._columntot_jrn_apu.ExtendedProperties.Add("Generator_UserColumnName", "tot-jrn-apu")
            MyBase.Columns.Add(Me._columntot_jrn_apu)
            Me._columntot_bno_apu = New Global.System.Data.DataColumn("tot-bno-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columntot_bno_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columntot_bno_apu")
            Me._columntot_bno_apu.ExtendedProperties.Add("Generator_UserColumnName", "tot-bno-apu")
            MyBase.Columns.Add(Me._columntot_bno_apu)
            Me._columnund_trn_apu = New Global.System.Data.DataColumn("und-trn-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnund_trn_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnund_trn_apu")
            Me._columnund_trn_apu.ExtendedProperties.Add("Generator_UserColumnName", "und-trn-apu")
            MyBase.Columns.Add(Me._columnund_trn_apu)
            Me._columncnt_trn_apu = New Global.System.Data.DataColumn("cnt-trn-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncnt_trn_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncnt_trn_apu")
            Me._columncnt_trn_apu.ExtendedProperties.Add("Generator_UserColumnName", "cnt-trn-apu")
            MyBase.Columns.Add(Me._columncnt_trn_apu)
            Me._columncst_trn_apu = New Global.System.Data.DataColumn("cst-trn-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncst_trn_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncst_trn_apu")
            Me._columncst_trn_apu.ExtendedProperties.Add("Generator_UserColumnName", "cst-trn-apu")
            MyBase.Columns.Add(Me._columncst_trn_apu)
            Me._columntot_trn_apu = New Global.System.Data.DataColumn("tot-trn-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columntot_trn_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columntot_trn_apu")
            Me._columntot_trn_apu.ExtendedProperties.Add("Generator_UserColumnName", "tot-trn-apu")
            MyBase.Columns.Add(Me._columntot_trn_apu)
            Me._columncod_obr_apu.MaxLength = 16
            Me._columnrec_typ_apu.MaxLength = 2
            Me._columncod_par_m.MaxLength = 14
            Me.columnPartidaTexto.MaxLength = 8
            Me._columncod_mat_apu.MaxLength = 4
            Me._columnid_mat_apu.MaxLength = 3
            Me._columncod_trn_apu.MaxLength = 1
            Me._columnid_trn_apu.MaxLength = 1
            Me._columnund_par_apu.MaxLength = 3
            Me._columntit_is_apu.MaxLength = 5
            Me._columnund_mat_apu.MaxLength = 3
            Me._columnund_trn_apu.MaxLength = 1
            Me._columncnt_trn_apu.MaxLength = 1
            Me._columncst_trn_apu.MaxLength = 1
            Me._columntot_trn_apu.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAPUObrRow() As APUObrRow
            Return CType(Me.NewRow,APUObrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New APUObrRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(APUObrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.APUObrRowChangedEvent) Is Nothing) Then
                RaiseEvent APUObrRowChanged(Me, New APUObrRowChangeEvent(CType(e.Row,APUObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.APUObrRowChangingEvent) Is Nothing) Then
                RaiseEvent APUObrRowChanging(Me, New APUObrRowChangeEvent(CType(e.Row,APUObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.APUObrRowDeletedEvent) Is Nothing) Then
                RaiseEvent APUObrRowDeleted(Me, New APUObrRowChangeEvent(CType(e.Row,APUObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.APUObrRowDeletingEvent) Is Nothing) Then
                RaiseEvent APUObrRowDeleting(Me, New APUObrRowChangeEvent(CType(e.Row,APUObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAPUObrRow(ByVal row As APUObrRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "APUObrDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ConfGenAPVDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnObra As Global.System.Data.DataColumn
        
        Private columnFCAS As Global.System.Data.DataColumn
        
        Private columnAdministracion As Global.System.Data.DataColumn
        
        Private columnUtilidad As Global.System.Data.DataColumn
        
        Private columnRendimiento As Global.System.Data.DataColumn
        
        Private columnDig_Rend As Global.System.Data.DataColumn
        
        Private columnIVA As Global.System.Data.DataColumn
        
        Private columnCant_Part As Global.System.Data.DataColumn
        
        Private columnCant_Analisis As Global.System.Data.DataColumn
        
        Private columnDiv_Mat As Global.System.Data.DataColumn
        
        Private columnBase_MAT As Global.System.Data.DataColumn
        
        Private columnBase_EQP As Global.System.Data.DataColumn
        
        Private columnBase_MO As Global.System.Data.DataColumn
        
        Private columnBase_Partidas As Global.System.Data.DataColumn
        
        Private columnFechaB_MAT As Global.System.Data.DataColumn
        
        Private columnFechaB_EQP As Global.System.Data.DataColumn
        
        Private columnFechaB_MO As Global.System.Data.DataColumn
        
        Private columnFechaB_PART As Global.System.Data.DataColumn
        
        Private columnMoneda_P As Global.System.Data.DataColumn
        
        Private columnMoneda_S As Global.System.Data.DataColumn
        
        Private columnPropietario As Global.System.Data.DataColumn
        
        Private columnIngFirma As Global.System.Data.DataColumn
        
        Private columnIngRevisa As Global.System.Data.DataColumn
        
        Private columnCIV_Revisa As Global.System.Data.DataColumn
        
        Private columnCIV_Firma As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ConfGenAPV"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFCAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdministracionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdministracion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UtilidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUtilidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RendimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRendimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dig_RendColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDig_Rend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cant_PartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCant_Part
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cant_AnalisisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCant_Analisis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Div_MatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiv_Mat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Base_MATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBase_MAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Base_EQPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBase_EQP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Base_MOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBase_MO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Base_PartidasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBase_Partidas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaB_MATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaB_MAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaB_EQPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaB_EQP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaB_MOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaB_MO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaB_PARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaB_PART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Moneda_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Moneda_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropietarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropietario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngFirmaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngFirma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngRevisaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngRevisa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIV_RevisaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIV_Revisa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIV_FirmaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIV_Firma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConfGenAPVRow
            Get
                Return CType(Me.Rows(index),ConfGenAPVRow)
            End Get
        End Property
        
        Public Event ConfGenAPVRowChanging As ConfGenAPVRowChangeEventHandler
        
        Public Event ConfGenAPVRowChanged As ConfGenAPVRowChangeEventHandler
        
        Public Event ConfGenAPVRowDeleting As ConfGenAPVRowChangeEventHandler
        
        Public Event ConfGenAPVRowDeleted As ConfGenAPVRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConfGenAPVRow(ByVal row As ConfGenAPVRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConfGenAPVRow( _
                    ByVal Obra As String,  _
                    ByVal FCAS As Double,  _
                    ByVal Administracion As Double,  _
                    ByVal Utilidad As Double,  _
                    ByVal Rendimiento As Double,  _
                    ByVal Dig_Rend As Double,  _
                    ByVal IVA As Double,  _
                    ByVal Cant_Part As Double,  _
                    ByVal Cant_Analisis As Double,  _
                    ByVal Div_Mat As String,  _
                    ByVal Base_MAT As String,  _
                    ByVal Base_EQP As String,  _
                    ByVal Base_MO As String,  _
                    ByVal Base_Partidas As String,  _
                    ByVal FechaB_MAT As Date,  _
                    ByVal FechaB_EQP As Date,  _
                    ByVal FechaB_MO As Date,  _
                    ByVal FechaB_PART As Date,  _
                    ByVal Moneda_P As String,  _
                    ByVal Moneda_S As String,  _
                    ByVal Propietario As String,  _
                    ByVal IngFirma As String,  _
                    ByVal IngRevisa As String,  _
                    ByVal CIV_Revisa As String,  _
                    ByVal CIV_Firma As String) As ConfGenAPVRow
            Dim rowConfGenAPVRow As ConfGenAPVRow = CType(Me.NewRow,ConfGenAPVRow)
            Dim columnValuesArray() As Object = New Object() {Obra, FCAS, Administracion, Utilidad, Rendimiento, Dig_Rend, IVA, Cant_Part, Cant_Analisis, Div_Mat, Base_MAT, Base_EQP, Base_MO, Base_Partidas, FechaB_MAT, FechaB_EQP, FechaB_MO, FechaB_PART, Moneda_P, Moneda_S, Propietario, IngFirma, IngRevisa, CIV_Revisa, CIV_Firma}
            rowConfGenAPVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConfGenAPVRow)
            Return rowConfGenAPVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ConfGenAPVDataTable = CType(MyBase.Clone,ConfGenAPVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ConfGenAPVDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObra = MyBase.Columns("Obra")
            Me.columnFCAS = MyBase.Columns("FCAS")
            Me.columnAdministracion = MyBase.Columns("Administracion")
            Me.columnUtilidad = MyBase.Columns("Utilidad")
            Me.columnRendimiento = MyBase.Columns("Rendimiento")
            Me.columnDig_Rend = MyBase.Columns("Dig_Rend")
            Me.columnIVA = MyBase.Columns("IVA")
            Me.columnCant_Part = MyBase.Columns("Cant_Part")
            Me.columnCant_Analisis = MyBase.Columns("Cant_Analisis")
            Me.columnDiv_Mat = MyBase.Columns("Div_Mat")
            Me.columnBase_MAT = MyBase.Columns("Base_MAT")
            Me.columnBase_EQP = MyBase.Columns("Base_EQP")
            Me.columnBase_MO = MyBase.Columns("Base_MO")
            Me.columnBase_Partidas = MyBase.Columns("Base_Partidas")
            Me.columnFechaB_MAT = MyBase.Columns("FechaB_MAT")
            Me.columnFechaB_EQP = MyBase.Columns("FechaB_EQP")
            Me.columnFechaB_MO = MyBase.Columns("FechaB_MO")
            Me.columnFechaB_PART = MyBase.Columns("FechaB_PART")
            Me.columnMoneda_P = MyBase.Columns("Moneda_P")
            Me.columnMoneda_S = MyBase.Columns("Moneda_S")
            Me.columnPropietario = MyBase.Columns("Propietario")
            Me.columnIngFirma = MyBase.Columns("IngFirma")
            Me.columnIngRevisa = MyBase.Columns("IngRevisa")
            Me.columnCIV_Revisa = MyBase.Columns("CIV_Revisa")
            Me.columnCIV_Firma = MyBase.Columns("CIV_Firma")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObra = New Global.System.Data.DataColumn("Obra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObra)
            Me.columnFCAS = New Global.System.Data.DataColumn("FCAS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCAS)
            Me.columnAdministracion = New Global.System.Data.DataColumn("Administracion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdministracion)
            Me.columnUtilidad = New Global.System.Data.DataColumn("Utilidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUtilidad)
            Me.columnRendimiento = New Global.System.Data.DataColumn("Rendimiento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRendimiento)
            Me.columnDig_Rend = New Global.System.Data.DataColumn("Dig_Rend", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDig_Rend)
            Me.columnIVA = New Global.System.Data.DataColumn("IVA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVA)
            Me.columnCant_Part = New Global.System.Data.DataColumn("Cant_Part", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCant_Part)
            Me.columnCant_Analisis = New Global.System.Data.DataColumn("Cant_Analisis", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCant_Analisis)
            Me.columnDiv_Mat = New Global.System.Data.DataColumn("Div_Mat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiv_Mat)
            Me.columnBase_MAT = New Global.System.Data.DataColumn("Base_MAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBase_MAT)
            Me.columnBase_EQP = New Global.System.Data.DataColumn("Base_EQP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBase_EQP)
            Me.columnBase_MO = New Global.System.Data.DataColumn("Base_MO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBase_MO)
            Me.columnBase_Partidas = New Global.System.Data.DataColumn("Base_Partidas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBase_Partidas)
            Me.columnFechaB_MAT = New Global.System.Data.DataColumn("FechaB_MAT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaB_MAT)
            Me.columnFechaB_EQP = New Global.System.Data.DataColumn("FechaB_EQP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaB_EQP)
            Me.columnFechaB_MO = New Global.System.Data.DataColumn("FechaB_MO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaB_MO)
            Me.columnFechaB_PART = New Global.System.Data.DataColumn("FechaB_PART", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaB_PART)
            Me.columnMoneda_P = New Global.System.Data.DataColumn("Moneda_P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda_P)
            Me.columnMoneda_S = New Global.System.Data.DataColumn("Moneda_S", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda_S)
            Me.columnPropietario = New Global.System.Data.DataColumn("Propietario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropietario)
            Me.columnIngFirma = New Global.System.Data.DataColumn("IngFirma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngFirma)
            Me.columnIngRevisa = New Global.System.Data.DataColumn("IngRevisa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngRevisa)
            Me.columnCIV_Revisa = New Global.System.Data.DataColumn("CIV_Revisa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIV_Revisa)
            Me.columnCIV_Firma = New Global.System.Data.DataColumn("CIV_Firma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIV_Firma)
            Me.columnObra.MaxLength = 7
            Me.columnDiv_Mat.MaxLength = 1
            Me.columnBase_MAT.MaxLength = 14
            Me.columnBase_EQP.MaxLength = 9
            Me.columnBase_MO.MaxLength = 14
            Me.columnBase_Partidas.MaxLength = 14
            Me.columnMoneda_P.MaxLength = 4
            Me.columnMoneda_S.MaxLength = 3
            Me.columnPropietario.MaxLength = 1
            Me.columnIngFirma.MaxLength = 30
            Me.columnIngRevisa.MaxLength = 30
            Me.columnCIV_Revisa.MaxLength = 6
            Me.columnCIV_Firma.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConfGenAPVRow() As ConfGenAPVRow
            Return CType(Me.NewRow,ConfGenAPVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ConfGenAPVRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ConfGenAPVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConfGenAPVRowChangedEvent) Is Nothing) Then
                RaiseEvent ConfGenAPVRowChanged(Me, New ConfGenAPVRowChangeEvent(CType(e.Row,ConfGenAPVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConfGenAPVRowChangingEvent) Is Nothing) Then
                RaiseEvent ConfGenAPVRowChanging(Me, New ConfGenAPVRowChangeEvent(CType(e.Row,ConfGenAPVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConfGenAPVRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConfGenAPVRowDeleted(Me, New ConfGenAPVRowChangeEvent(CType(e.Row,ConfGenAPVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConfGenAPVRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConfGenAPVRowDeleting(Me, New ConfGenAPVRowChangeEvent(CType(e.Row,ConfGenAPVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConfGenAPVRow(ByVal row As ConfGenAPVRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ConfGenAPVDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ConfiguracionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnObra As Global.System.Data.DataColumn
        
        Private columnLeydelTrabajo As Global.System.Data.DataColumn
        
        Private columnAdministracion As Global.System.Data.DataColumn
        
        Private columnDigitosRendimiento As Global.System.Data.DataColumn
        
        Private columnRendimiento As Global.System.Data.DataColumn
        
        Private columnUtilidad As Global.System.Data.DataColumn
        
        Private columnImpuestoVentas As Global.System.Data.DataColumn
        
        Private columnCantidadDePartida As Global.System.Data.DataColumn
        
        Private columnCantidadDelAnalisis As Global.System.Data.DataColumn
        
        Private columnTipoImpuestoCargado As Global.System.Data.DataColumn
        
        Private columnDividirMateriales As Global.System.Data.DataColumn
        
        Private columnAfectanPrestaciones As Global.System.Data.DataColumn
        
        Private columnBaseMaterialesUsar As Global.System.Data.DataColumn
        
        Private columnMesMaterialesUsar As Global.System.Data.DataColumn
        
        Private columnBaseEquiposUsar As Global.System.Data.DataColumn
        
        Private columnMesEquiposUsar As Global.System.Data.DataColumn
        
        Private columnBaseManoObraUsar As Global.System.Data.DataColumn
        
        Private columnMesManoObraUsar As Global.System.Data.DataColumn
        
        Private columnTipoRendimiento As Global.System.Data.DataColumn
        
        Private columnHorasJornadaDiaria As Global.System.Data.DataColumn
        
        Private columnTipoImpresora As Global.System.Data.DataColumn
        
        Private columnPreciosDistintosACalculados As Global.System.Data.DataColumn
        
        Private columnPorcentajeEnAnalisis As Global.System.Data.DataColumn
        
        Private columnCodigoInsumosEnAnalisis As Global.System.Data.DataColumn
        
        Private columnMonedaUtilizar As Global.System.Data.DataColumn
        
        Private columnUltimaObra1 As Global.System.Data.DataColumn
        
        Private columnUltimaObra2 As Global.System.Data.DataColumn
        
        Private columnUltimaObra3 As Global.System.Data.DataColumn
        
        Private columnImpEstructura1 As Global.System.Data.DataColumn
        
        Private columnImpEstructura2 As Global.System.Data.DataColumn
        
        Private columnImpEstructura3 As Global.System.Data.DataColumn
        
        Private columnImpEstructura4 As Global.System.Data.DataColumn
        
        Private columnImpEstructura5 As Global.System.Data.DataColumn
        
        Private columnImpGenerales1 As Global.System.Data.DataColumn
        
        Private columnImpGenerales2 As Global.System.Data.DataColumn
        
        Private columnImpGenerales3 As Global.System.Data.DataColumn
        
        Private columnImpGenerales4 As Global.System.Data.DataColumn
        
        Private columnImpGenerales5 As Global.System.Data.DataColumn
        
        Private columnImpGenerales6 As Global.System.Data.DataColumn
        
        Private columnImpCopiaInsumos As Global.System.Data.DataColumn
        
        Private columnImpProceso As Global.System.Data.DataColumn
        
        Private columnImpBuscarEnArchivo As Global.System.Data.DataColumn
        
        Private columnImpFijarArchivo As Global.System.Data.DataColumn
        
        Private columnImpArchivo As Global.System.Data.DataColumn
        
        Private columnObraReciente1 As Global.System.Data.DataColumn
        
        Private columnObraReciente2 As Global.System.Data.DataColumn
        
        Private columnObraReciente3 As Global.System.Data.DataColumn
        
        Private columnObraReciente4 As Global.System.Data.DataColumn
        
        Private columnObraReciente5 As Global.System.Data.DataColumn
        
        Private columnObraReciente6 As Global.System.Data.DataColumn
        
        Private columnObraReciente7 As Global.System.Data.DataColumn
        
        Private columnObraReciente8 As Global.System.Data.DataColumn
        
        Private columnObraReciente9 As Global.System.Data.DataColumn
        
        Private columnObraReciente10 As Global.System.Data.DataColumn
        
        Private columnImpresionAPV As Global.System.Data.DataColumn
        
        Private columnLetraEnc As Global.System.Data.DataColumn
        
        Private columnLetraDet As Global.System.Data.DataColumn
        
        Private columnEstiloEnc As Global.System.Data.DataColumn
        
        Private columnEstiloDet As Global.System.Data.DataColumn
        
        Private columnTamañoEnc As Global.System.Data.DataColumn
        
        Private columnTamañoDet As Global.System.Data.DataColumn
        
        Private columnMargenSup As Global.System.Data.DataColumn
        
        Private columnMargenInf As Global.System.Data.DataColumn
        
        Private columnTxTTrabajo As Global.System.Data.DataColumn
        
        Private columnTxTAdministracion As Global.System.Data.DataColumn
        
        Private columnTxTUtilidad As Global.System.Data.DataColumn
        
        Private columnTxTIVA As Global.System.Data.DataColumn
        
        Private columnTxTJornadaDiaria As Global.System.Data.DataColumn
        
        Private columnFCAS As Global.System.Data.DataColumn
        
        Private columnMoneda_P As Global.System.Data.DataColumn
        
        Private columnMoneda_S As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Configuracion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LeydelTrabajoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeydelTrabajo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdministracionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdministracion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DigitosRendimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDigitosRendimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RendimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRendimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UtilidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUtilidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoVentasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestoVentas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadDePartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadDePartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadDelAnalisisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadDelAnalisis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoImpuestoCargadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoImpuestoCargado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DividirMaterialesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDividirMateriales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AfectanPrestacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAfectanPrestaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseMaterialesUsarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseMaterialesUsar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesMaterialesUsarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMesMaterialesUsar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseEquiposUsarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseEquiposUsar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesEquiposUsarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMesEquiposUsar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseManoObraUsarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseManoObraUsar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesManoObraUsarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMesManoObraUsar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoRendimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoRendimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HorasJornadaDiariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHorasJornadaDiaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoImpresoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoImpresora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreciosDistintosACalculadosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreciosDistintosACalculados
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeEnAnalisisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeEnAnalisis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInsumosEnAnalisisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInsumosEnAnalisis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaUtilizarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonedaUtilizar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UltimaObra1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUltimaObra1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UltimaObra2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUltimaObra2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UltimaObra3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUltimaObra3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpEstructura1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpEstructura1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpEstructura2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpEstructura2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpEstructura3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpEstructura3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpEstructura4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpEstructura4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpEstructura5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpEstructura5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpGenerales1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpGenerales1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpGenerales2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpGenerales2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpGenerales3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpGenerales3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpGenerales4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpGenerales4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpGenerales5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpGenerales5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpGenerales6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpGenerales6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpCopiaInsumosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpCopiaInsumos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpProcesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpProceso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpBuscarEnArchivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpBuscarEnArchivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpFijarArchivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpFijarArchivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpArchivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpArchivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraReciente1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObraReciente1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraReciente2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObraReciente2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraReciente3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObraReciente3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraReciente4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObraReciente4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraReciente5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObraReciente5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraReciente6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObraReciente6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraReciente7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObraReciente7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraReciente8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObraReciente8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraReciente9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObraReciente9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraReciente10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObraReciente10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpresionAPVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpresionAPV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LetraEncColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLetraEnc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LetraDetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLetraDet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstiloEncColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstiloEnc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstiloDetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstiloDet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TamañoEncColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTamañoEnc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TamañoDetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTamañoDet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MargenSupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMargenSup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MargenInfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMargenInf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTTrabajoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTTrabajo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTAdministracionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTAdministracion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTUtilidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTUtilidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTIVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTIVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TxTJornadaDiariaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTxTJornadaDiaria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFCAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Moneda_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Moneda_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConfiguracionRow
            Get
                Return CType(Me.Rows(index),ConfiguracionRow)
            End Get
        End Property
        
        Public Event ConfiguracionRowChanging As ConfiguracionRowChangeEventHandler
        
        Public Event ConfiguracionRowChanged As ConfiguracionRowChangeEventHandler
        
        Public Event ConfiguracionRowDeleting As ConfiguracionRowChangeEventHandler
        
        Public Event ConfiguracionRowDeleted As ConfiguracionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConfiguracionRow(ByVal row As ConfiguracionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConfiguracionRow( _
                    ByVal Obra As String,  _
                    ByVal LeydelTrabajo As Double,  _
                    ByVal Administracion As Double,  _
                    ByVal DigitosRendimiento As Double,  _
                    ByVal Rendimiento As Double,  _
                    ByVal Utilidad As Double,  _
                    ByVal ImpuestoVentas As Double,  _
                    ByVal CantidadDePartida As Double,  _
                    ByVal CantidadDelAnalisis As Double,  _
                    ByVal TipoImpuestoCargado As Double,  _
                    ByVal DividirMateriales As String,  _
                    ByVal AfectanPrestaciones As String,  _
                    ByVal BaseMaterialesUsar As String,  _
                    ByVal MesMaterialesUsar As Double,  _
                    ByVal BaseEquiposUsar As String,  _
                    ByVal MesEquiposUsar As Double,  _
                    ByVal BaseManoObraUsar As String,  _
                    ByVal MesManoObraUsar As Double,  _
                    ByVal TipoRendimiento As String,  _
                    ByVal HorasJornadaDiaria As Double,  _
                    ByVal TipoImpresora As String,  _
                    ByVal PreciosDistintosACalculados As String,  _
                    ByVal PorcentajeEnAnalisis As String,  _
                    ByVal CodigoInsumosEnAnalisis As String,  _
                    ByVal MonedaUtilizar As String,  _
                    ByVal UltimaObra1 As String,  _
                    ByVal UltimaObra2 As String,  _
                    ByVal UltimaObra3 As String,  _
                    ByVal ImpEstructura1 As Double,  _
                    ByVal ImpEstructura2 As Double,  _
                    ByVal ImpEstructura3 As Double,  _
                    ByVal ImpEstructura4 As Double,  _
                    ByVal ImpEstructura5 As Double,  _
                    ByVal ImpGenerales1 As Double,  _
                    ByVal ImpGenerales2 As Double,  _
                    ByVal ImpGenerales3 As Double,  _
                    ByVal ImpGenerales4 As Double,  _
                    ByVal ImpGenerales5 As Double,  _
                    ByVal ImpGenerales6 As Double,  _
                    ByVal ImpCopiaInsumos As Double,  _
                    ByVal ImpProceso As Double,  _
                    ByVal ImpBuscarEnArchivo As Double,  _
                    ByVal ImpFijarArchivo As Double,  _
                    ByVal ImpArchivo As String,  _
                    ByVal ObraReciente1 As String,  _
                    ByVal ObraReciente2 As String,  _
                    ByVal ObraReciente3 As String,  _
                    ByVal ObraReciente4 As String,  _
                    ByVal ObraReciente5 As String,  _
                    ByVal ObraReciente6 As String,  _
                    ByVal ObraReciente7 As String,  _
                    ByVal ObraReciente8 As String,  _
                    ByVal ObraReciente9 As String,  _
                    ByVal ObraReciente10 As String,  _
                    ByVal ImpresionAPV As String,  _
                    ByVal LetraEnc As String,  _
                    ByVal LetraDet As String,  _
                    ByVal EstiloEnc As Double,  _
                    ByVal EstiloDet As Double,  _
                    ByVal TamañoEnc As Double,  _
                    ByVal TamañoDet As Double,  _
                    ByVal MargenSup As Double,  _
                    ByVal MargenInf As Double,  _
                    ByVal TxTTrabajo As String,  _
                    ByVal TxTAdministracion As String,  _
                    ByVal TxTUtilidad As String,  _
                    ByVal TxTIVA As String,  _
                    ByVal TxTJornadaDiaria As String,  _
                    ByVal FCAS As Double,  _
                    ByVal Moneda_P As String,  _
                    ByVal Moneda_S As String) As ConfiguracionRow
            Dim rowConfiguracionRow As ConfiguracionRow = CType(Me.NewRow,ConfiguracionRow)
            Dim columnValuesArray() As Object = New Object() {Obra, LeydelTrabajo, Administracion, DigitosRendimiento, Rendimiento, Utilidad, ImpuestoVentas, CantidadDePartida, CantidadDelAnalisis, TipoImpuestoCargado, DividirMateriales, AfectanPrestaciones, BaseMaterialesUsar, MesMaterialesUsar, BaseEquiposUsar, MesEquiposUsar, BaseManoObraUsar, MesManoObraUsar, TipoRendimiento, HorasJornadaDiaria, TipoImpresora, PreciosDistintosACalculados, PorcentajeEnAnalisis, CodigoInsumosEnAnalisis, MonedaUtilizar, UltimaObra1, UltimaObra2, UltimaObra3, ImpEstructura1, ImpEstructura2, ImpEstructura3, ImpEstructura4, ImpEstructura5, ImpGenerales1, ImpGenerales2, ImpGenerales3, ImpGenerales4, ImpGenerales5, ImpGenerales6, ImpCopiaInsumos, ImpProceso, ImpBuscarEnArchivo, ImpFijarArchivo, ImpArchivo, ObraReciente1, ObraReciente2, ObraReciente3, ObraReciente4, ObraReciente5, ObraReciente6, ObraReciente7, ObraReciente8, ObraReciente9, ObraReciente10, ImpresionAPV, LetraEnc, LetraDet, EstiloEnc, EstiloDet, TamañoEnc, TamañoDet, MargenSup, MargenInf, TxTTrabajo, TxTAdministracion, TxTUtilidad, TxTIVA, TxTJornadaDiaria, FCAS, Moneda_P, Moneda_S}
            rowConfiguracionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConfiguracionRow)
            Return rowConfiguracionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ConfiguracionDataTable = CType(MyBase.Clone,ConfiguracionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ConfiguracionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObra = MyBase.Columns("Obra")
            Me.columnLeydelTrabajo = MyBase.Columns("LeydelTrabajo")
            Me.columnAdministracion = MyBase.Columns("Administracion")
            Me.columnDigitosRendimiento = MyBase.Columns("DigitosRendimiento")
            Me.columnRendimiento = MyBase.Columns("Rendimiento")
            Me.columnUtilidad = MyBase.Columns("Utilidad")
            Me.columnImpuestoVentas = MyBase.Columns("ImpuestoVentas")
            Me.columnCantidadDePartida = MyBase.Columns("CantidadDePartida")
            Me.columnCantidadDelAnalisis = MyBase.Columns("CantidadDelAnalisis")
            Me.columnTipoImpuestoCargado = MyBase.Columns("TipoImpuestoCargado")
            Me.columnDividirMateriales = MyBase.Columns("DividirMateriales")
            Me.columnAfectanPrestaciones = MyBase.Columns("AfectanPrestaciones")
            Me.columnBaseMaterialesUsar = MyBase.Columns("BaseMaterialesUsar")
            Me.columnMesMaterialesUsar = MyBase.Columns("MesMaterialesUsar")
            Me.columnBaseEquiposUsar = MyBase.Columns("BaseEquiposUsar")
            Me.columnMesEquiposUsar = MyBase.Columns("MesEquiposUsar")
            Me.columnBaseManoObraUsar = MyBase.Columns("BaseManoObraUsar")
            Me.columnMesManoObraUsar = MyBase.Columns("MesManoObraUsar")
            Me.columnTipoRendimiento = MyBase.Columns("TipoRendimiento")
            Me.columnHorasJornadaDiaria = MyBase.Columns("HorasJornadaDiaria")
            Me.columnTipoImpresora = MyBase.Columns("TipoImpresora")
            Me.columnPreciosDistintosACalculados = MyBase.Columns("PreciosDistintosACalculados")
            Me.columnPorcentajeEnAnalisis = MyBase.Columns("PorcentajeEnAnalisis")
            Me.columnCodigoInsumosEnAnalisis = MyBase.Columns("CodigoInsumosEnAnalisis")
            Me.columnMonedaUtilizar = MyBase.Columns("MonedaUtilizar")
            Me.columnUltimaObra1 = MyBase.Columns("UltimaObra1")
            Me.columnUltimaObra2 = MyBase.Columns("UltimaObra2")
            Me.columnUltimaObra3 = MyBase.Columns("UltimaObra3")
            Me.columnImpEstructura1 = MyBase.Columns("ImpEstructura1")
            Me.columnImpEstructura2 = MyBase.Columns("ImpEstructura2")
            Me.columnImpEstructura3 = MyBase.Columns("ImpEstructura3")
            Me.columnImpEstructura4 = MyBase.Columns("ImpEstructura4")
            Me.columnImpEstructura5 = MyBase.Columns("ImpEstructura5")
            Me.columnImpGenerales1 = MyBase.Columns("ImpGenerales1")
            Me.columnImpGenerales2 = MyBase.Columns("ImpGenerales2")
            Me.columnImpGenerales3 = MyBase.Columns("ImpGenerales3")
            Me.columnImpGenerales4 = MyBase.Columns("ImpGenerales4")
            Me.columnImpGenerales5 = MyBase.Columns("ImpGenerales5")
            Me.columnImpGenerales6 = MyBase.Columns("ImpGenerales6")
            Me.columnImpCopiaInsumos = MyBase.Columns("ImpCopiaInsumos")
            Me.columnImpProceso = MyBase.Columns("ImpProceso")
            Me.columnImpBuscarEnArchivo = MyBase.Columns("ImpBuscarEnArchivo")
            Me.columnImpFijarArchivo = MyBase.Columns("ImpFijarArchivo")
            Me.columnImpArchivo = MyBase.Columns("ImpArchivo")
            Me.columnObraReciente1 = MyBase.Columns("ObraReciente1")
            Me.columnObraReciente2 = MyBase.Columns("ObraReciente2")
            Me.columnObraReciente3 = MyBase.Columns("ObraReciente3")
            Me.columnObraReciente4 = MyBase.Columns("ObraReciente4")
            Me.columnObraReciente5 = MyBase.Columns("ObraReciente5")
            Me.columnObraReciente6 = MyBase.Columns("ObraReciente6")
            Me.columnObraReciente7 = MyBase.Columns("ObraReciente7")
            Me.columnObraReciente8 = MyBase.Columns("ObraReciente8")
            Me.columnObraReciente9 = MyBase.Columns("ObraReciente9")
            Me.columnObraReciente10 = MyBase.Columns("ObraReciente10")
            Me.columnImpresionAPV = MyBase.Columns("ImpresionAPV")
            Me.columnLetraEnc = MyBase.Columns("LetraEnc")
            Me.columnLetraDet = MyBase.Columns("LetraDet")
            Me.columnEstiloEnc = MyBase.Columns("EstiloEnc")
            Me.columnEstiloDet = MyBase.Columns("EstiloDet")
            Me.columnTamañoEnc = MyBase.Columns("TamañoEnc")
            Me.columnTamañoDet = MyBase.Columns("TamañoDet")
            Me.columnMargenSup = MyBase.Columns("MargenSup")
            Me.columnMargenInf = MyBase.Columns("MargenInf")
            Me.columnTxTTrabajo = MyBase.Columns("TxTTrabajo")
            Me.columnTxTAdministracion = MyBase.Columns("TxTAdministracion")
            Me.columnTxTUtilidad = MyBase.Columns("TxTUtilidad")
            Me.columnTxTIVA = MyBase.Columns("TxTIVA")
            Me.columnTxTJornadaDiaria = MyBase.Columns("TxTJornadaDiaria")
            Me.columnFCAS = MyBase.Columns("FCAS")
            Me.columnMoneda_P = MyBase.Columns("Moneda_P")
            Me.columnMoneda_S = MyBase.Columns("Moneda_S")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObra = New Global.System.Data.DataColumn("Obra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObra)
            Me.columnLeydelTrabajo = New Global.System.Data.DataColumn("LeydelTrabajo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeydelTrabajo)
            Me.columnAdministracion = New Global.System.Data.DataColumn("Administracion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdministracion)
            Me.columnDigitosRendimiento = New Global.System.Data.DataColumn("DigitosRendimiento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDigitosRendimiento)
            Me.columnRendimiento = New Global.System.Data.DataColumn("Rendimiento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRendimiento)
            Me.columnUtilidad = New Global.System.Data.DataColumn("Utilidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUtilidad)
            Me.columnImpuestoVentas = New Global.System.Data.DataColumn("ImpuestoVentas", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoVentas)
            Me.columnCantidadDePartida = New Global.System.Data.DataColumn("CantidadDePartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadDePartida)
            Me.columnCantidadDelAnalisis = New Global.System.Data.DataColumn("CantidadDelAnalisis", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadDelAnalisis)
            Me.columnTipoImpuestoCargado = New Global.System.Data.DataColumn("TipoImpuestoCargado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoImpuestoCargado)
            Me.columnDividirMateriales = New Global.System.Data.DataColumn("DividirMateriales", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDividirMateriales)
            Me.columnAfectanPrestaciones = New Global.System.Data.DataColumn("AfectanPrestaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAfectanPrestaciones)
            Me.columnBaseMaterialesUsar = New Global.System.Data.DataColumn("BaseMaterialesUsar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseMaterialesUsar)
            Me.columnMesMaterialesUsar = New Global.System.Data.DataColumn("MesMaterialesUsar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMesMaterialesUsar)
            Me.columnBaseEquiposUsar = New Global.System.Data.DataColumn("BaseEquiposUsar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseEquiposUsar)
            Me.columnMesEquiposUsar = New Global.System.Data.DataColumn("MesEquiposUsar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMesEquiposUsar)
            Me.columnBaseManoObraUsar = New Global.System.Data.DataColumn("BaseManoObraUsar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseManoObraUsar)
            Me.columnMesManoObraUsar = New Global.System.Data.DataColumn("MesManoObraUsar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMesManoObraUsar)
            Me.columnTipoRendimiento = New Global.System.Data.DataColumn("TipoRendimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoRendimiento)
            Me.columnHorasJornadaDiaria = New Global.System.Data.DataColumn("HorasJornadaDiaria", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHorasJornadaDiaria)
            Me.columnTipoImpresora = New Global.System.Data.DataColumn("TipoImpresora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoImpresora)
            Me.columnPreciosDistintosACalculados = New Global.System.Data.DataColumn("PreciosDistintosACalculados", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreciosDistintosACalculados)
            Me.columnPorcentajeEnAnalisis = New Global.System.Data.DataColumn("PorcentajeEnAnalisis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeEnAnalisis)
            Me.columnCodigoInsumosEnAnalisis = New Global.System.Data.DataColumn("CodigoInsumosEnAnalisis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInsumosEnAnalisis)
            Me.columnMonedaUtilizar = New Global.System.Data.DataColumn("MonedaUtilizar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonedaUtilizar)
            Me.columnUltimaObra1 = New Global.System.Data.DataColumn("UltimaObra1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUltimaObra1)
            Me.columnUltimaObra2 = New Global.System.Data.DataColumn("UltimaObra2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUltimaObra2)
            Me.columnUltimaObra3 = New Global.System.Data.DataColumn("UltimaObra3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUltimaObra3)
            Me.columnImpEstructura1 = New Global.System.Data.DataColumn("ImpEstructura1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpEstructura1)
            Me.columnImpEstructura2 = New Global.System.Data.DataColumn("ImpEstructura2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpEstructura2)
            Me.columnImpEstructura3 = New Global.System.Data.DataColumn("ImpEstructura3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpEstructura3)
            Me.columnImpEstructura4 = New Global.System.Data.DataColumn("ImpEstructura4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpEstructura4)
            Me.columnImpEstructura5 = New Global.System.Data.DataColumn("ImpEstructura5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpEstructura5)
            Me.columnImpGenerales1 = New Global.System.Data.DataColumn("ImpGenerales1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpGenerales1)
            Me.columnImpGenerales2 = New Global.System.Data.DataColumn("ImpGenerales2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpGenerales2)
            Me.columnImpGenerales3 = New Global.System.Data.DataColumn("ImpGenerales3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpGenerales3)
            Me.columnImpGenerales4 = New Global.System.Data.DataColumn("ImpGenerales4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpGenerales4)
            Me.columnImpGenerales5 = New Global.System.Data.DataColumn("ImpGenerales5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpGenerales5)
            Me.columnImpGenerales6 = New Global.System.Data.DataColumn("ImpGenerales6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpGenerales6)
            Me.columnImpCopiaInsumos = New Global.System.Data.DataColumn("ImpCopiaInsumos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpCopiaInsumos)
            Me.columnImpProceso = New Global.System.Data.DataColumn("ImpProceso", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpProceso)
            Me.columnImpBuscarEnArchivo = New Global.System.Data.DataColumn("ImpBuscarEnArchivo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpBuscarEnArchivo)
            Me.columnImpFijarArchivo = New Global.System.Data.DataColumn("ImpFijarArchivo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpFijarArchivo)
            Me.columnImpArchivo = New Global.System.Data.DataColumn("ImpArchivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpArchivo)
            Me.columnObraReciente1 = New Global.System.Data.DataColumn("ObraReciente1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObraReciente1)
            Me.columnObraReciente2 = New Global.System.Data.DataColumn("ObraReciente2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObraReciente2)
            Me.columnObraReciente3 = New Global.System.Data.DataColumn("ObraReciente3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObraReciente3)
            Me.columnObraReciente4 = New Global.System.Data.DataColumn("ObraReciente4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObraReciente4)
            Me.columnObraReciente5 = New Global.System.Data.DataColumn("ObraReciente5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObraReciente5)
            Me.columnObraReciente6 = New Global.System.Data.DataColumn("ObraReciente6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObraReciente6)
            Me.columnObraReciente7 = New Global.System.Data.DataColumn("ObraReciente7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObraReciente7)
            Me.columnObraReciente8 = New Global.System.Data.DataColumn("ObraReciente8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObraReciente8)
            Me.columnObraReciente9 = New Global.System.Data.DataColumn("ObraReciente9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObraReciente9)
            Me.columnObraReciente10 = New Global.System.Data.DataColumn("ObraReciente10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObraReciente10)
            Me.columnImpresionAPV = New Global.System.Data.DataColumn("ImpresionAPV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpresionAPV)
            Me.columnLetraEnc = New Global.System.Data.DataColumn("LetraEnc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLetraEnc)
            Me.columnLetraDet = New Global.System.Data.DataColumn("LetraDet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLetraDet)
            Me.columnEstiloEnc = New Global.System.Data.DataColumn("EstiloEnc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstiloEnc)
            Me.columnEstiloDet = New Global.System.Data.DataColumn("EstiloDet", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstiloDet)
            Me.columnTamañoEnc = New Global.System.Data.DataColumn("TamañoEnc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTamañoEnc)
            Me.columnTamañoDet = New Global.System.Data.DataColumn("TamañoDet", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTamañoDet)
            Me.columnMargenSup = New Global.System.Data.DataColumn("MargenSup", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMargenSup)
            Me.columnMargenInf = New Global.System.Data.DataColumn("MargenInf", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMargenInf)
            Me.columnTxTTrabajo = New Global.System.Data.DataColumn("TxTTrabajo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTTrabajo)
            Me.columnTxTAdministracion = New Global.System.Data.DataColumn("TxTAdministracion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTAdministracion)
            Me.columnTxTUtilidad = New Global.System.Data.DataColumn("TxTUtilidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTUtilidad)
            Me.columnTxTIVA = New Global.System.Data.DataColumn("TxTIVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTIVA)
            Me.columnTxTJornadaDiaria = New Global.System.Data.DataColumn("TxTJornadaDiaria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTxTJornadaDiaria)
            Me.columnFCAS = New Global.System.Data.DataColumn("FCAS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCAS)
            Me.columnMoneda_P = New Global.System.Data.DataColumn("Moneda_P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda_P)
            Me.columnMoneda_S = New Global.System.Data.DataColumn("Moneda_S", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda_S)
            Me.columnObra.MaxLength = 9
            Me.columnDividirMateriales.MaxLength = 1
            Me.columnAfectanPrestaciones.MaxLength = 1
            Me.columnBaseMaterialesUsar.MaxLength = 27
            Me.columnBaseEquiposUsar.MaxLength = 27
            Me.columnBaseManoObraUsar.MaxLength = 18
            Me.columnTipoRendimiento.MaxLength = 1
            Me.columnTipoImpresora.MaxLength = 1
            Me.columnPreciosDistintosACalculados.MaxLength = 1
            Me.columnPorcentajeEnAnalisis.MaxLength = 1
            Me.columnCodigoInsumosEnAnalisis.MaxLength = 1
            Me.columnMonedaUtilizar.MaxLength = 3
            Me.columnUltimaObra1.MaxLength = 1
            Me.columnUltimaObra2.MaxLength = 1
            Me.columnUltimaObra3.MaxLength = 1
            Me.columnImpArchivo.MaxLength = 54
            Me.columnObraReciente1.MaxLength = 74
            Me.columnObraReciente2.MaxLength = 66
            Me.columnObraReciente3.MaxLength = 79
            Me.columnObraReciente4.MaxLength = 84
            Me.columnObraReciente5.MaxLength = 77
            Me.columnObraReciente6.MaxLength = 70
            Me.columnObraReciente7.MaxLength = 64
            Me.columnObraReciente8.MaxLength = 59
            Me.columnObraReciente9.MaxLength = 67
            Me.columnObraReciente10.MaxLength = 57
            Me.columnImpresionAPV.MaxLength = 4
            Me.columnLetraEnc.MaxLength = 15
            Me.columnLetraDet.MaxLength = 15
            Me.columnTxTTrabajo.MaxLength = 12
            Me.columnTxTAdministracion.MaxLength = 32
            Me.columnTxTUtilidad.MaxLength = 8
            Me.columnTxTIVA.MaxLength = 30
            Me.columnTxTJornadaDiaria.MaxLength = 23
            Me.columnMoneda_P.MaxLength = 3
            Me.columnMoneda_S.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConfiguracionRow() As ConfiguracionRow
            Return CType(Me.NewRow,ConfiguracionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ConfiguracionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ConfiguracionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConfiguracionRowChangedEvent) Is Nothing) Then
                RaiseEvent ConfiguracionRowChanged(Me, New ConfiguracionRowChangeEvent(CType(e.Row,ConfiguracionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConfiguracionRowChangingEvent) Is Nothing) Then
                RaiseEvent ConfiguracionRowChanging(Me, New ConfiguracionRowChangeEvent(CType(e.Row,ConfiguracionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConfiguracionRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConfiguracionRowDeleted(Me, New ConfiguracionRowChangeEvent(CType(e.Row,ConfiguracionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConfiguracionRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConfiguracionRowDeleting(Me, New ConfiguracionRowChangeEvent(CType(e.Row,ConfiguracionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConfiguracionRow(ByVal row As ConfiguracionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ConfiguracionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CostosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo_CAT_P As Global.System.Data.DataColumn
        
        Private columnDescripcion_CAT_P As Global.System.Data.DataColumn
        
        Private columnCodigo_SCAT_P As Global.System.Data.DataColumn
        
        Private columnDescripcion_SCAT_P As Global.System.Data.DataColumn
        
        Private columnCodigo_Renglon_P As Global.System.Data.DataColumn
        
        Private columnDescripcion_Renglon_P As Global.System.Data.DataColumn
        
        Private columnCodigo_CAT_SEC As Global.System.Data.DataColumn
        
        Private columnDescripcion_CAT_SEC As Global.System.Data.DataColumn
        
        Private columnCodigo_CAT_SEC1 As Global.System.Data.DataColumn
        
        Private columnDescripcion_CAT_SEC1 As Global.System.Data.DataColumn
        
        Private columnCodigo_SCAT_SEC As Global.System.Data.DataColumn
        
        Private columnDescripcion_SCAT_SEC As Global.System.Data.DataColumn
        
        Private columnCodigo_Renglon_S As Global.System.Data.DataColumn
        
        Private columnDescripcion_Renglon_S As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Costos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Codigo_CAT_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo_CAT_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion_CAT_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion_CAT_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Codigo_SCAT_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo_SCAT_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion_SCAT_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion_SCAT_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Codigo_Renglon_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo_Renglon_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion_Renglon_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion_Renglon_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Codigo_CAT_SECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo_CAT_SEC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion_CAT_SECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion_CAT_SEC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Codigo_CAT_SEC1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo_CAT_SEC1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion_CAT_SEC1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion_CAT_SEC1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Codigo_SCAT_SECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo_SCAT_SEC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion_SCAT_SECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion_SCAT_SEC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Codigo_Renglon_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo_Renglon_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion_Renglon_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion_Renglon_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CostosRow
            Get
                Return CType(Me.Rows(index),CostosRow)
            End Get
        End Property
        
        Public Event CostosRowChanging As CostosRowChangeEventHandler
        
        Public Event CostosRowChanged As CostosRowChangeEventHandler
        
        Public Event CostosRowDeleting As CostosRowChangeEventHandler
        
        Public Event CostosRowDeleted As CostosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCostosRow(ByVal row As CostosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCostosRow(ByVal Codigo_CAT_P As Double, ByVal Descripcion_CAT_P As String, ByVal Codigo_SCAT_P As Double, ByVal Descripcion_SCAT_P As String, ByVal Codigo_Renglon_P As Double, ByVal Descripcion_Renglon_P As String, ByVal Codigo_CAT_SEC As Double, ByVal Descripcion_CAT_SEC As String, ByVal Codigo_CAT_SEC1 As Double, ByVal Descripcion_CAT_SEC1 As String, ByVal Codigo_SCAT_SEC As String, ByVal Descripcion_SCAT_SEC As String, ByVal Codigo_Renglon_S As String, ByVal Descripcion_Renglon_S As String) As CostosRow
            Dim rowCostosRow As CostosRow = CType(Me.NewRow,CostosRow)
            Dim columnValuesArray() As Object = New Object() {Codigo_CAT_P, Descripcion_CAT_P, Codigo_SCAT_P, Descripcion_SCAT_P, Codigo_Renglon_P, Descripcion_Renglon_P, Codigo_CAT_SEC, Descripcion_CAT_SEC, Codigo_CAT_SEC1, Descripcion_CAT_SEC1, Codigo_SCAT_SEC, Descripcion_SCAT_SEC, Codigo_Renglon_S, Descripcion_Renglon_S}
            rowCostosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCostosRow)
            Return rowCostosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CostosDataTable = CType(MyBase.Clone,CostosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CostosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo_CAT_P = MyBase.Columns("Codigo_CAT_P")
            Me.columnDescripcion_CAT_P = MyBase.Columns("Descripcion_CAT_P")
            Me.columnCodigo_SCAT_P = MyBase.Columns("Codigo_SCAT_P")
            Me.columnDescripcion_SCAT_P = MyBase.Columns("Descripcion_SCAT_P")
            Me.columnCodigo_Renglon_P = MyBase.Columns("Codigo_Renglon_P")
            Me.columnDescripcion_Renglon_P = MyBase.Columns("Descripcion_Renglon_P")
            Me.columnCodigo_CAT_SEC = MyBase.Columns("Codigo_CAT_SEC")
            Me.columnDescripcion_CAT_SEC = MyBase.Columns("Descripcion_CAT_SEC")
            Me.columnCodigo_CAT_SEC1 = MyBase.Columns("Codigo_CAT_SEC1")
            Me.columnDescripcion_CAT_SEC1 = MyBase.Columns("Descripcion_CAT_SEC1")
            Me.columnCodigo_SCAT_SEC = MyBase.Columns("Codigo_SCAT_SEC")
            Me.columnDescripcion_SCAT_SEC = MyBase.Columns("Descripcion_SCAT_SEC")
            Me.columnCodigo_Renglon_S = MyBase.Columns("Codigo_Renglon_S")
            Me.columnDescripcion_Renglon_S = MyBase.Columns("Descripcion_Renglon_S")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo_CAT_P = New Global.System.Data.DataColumn("Codigo_CAT_P", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo_CAT_P)
            Me.columnDescripcion_CAT_P = New Global.System.Data.DataColumn("Descripcion_CAT_P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion_CAT_P)
            Me.columnCodigo_SCAT_P = New Global.System.Data.DataColumn("Codigo_SCAT_P", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo_SCAT_P)
            Me.columnDescripcion_SCAT_P = New Global.System.Data.DataColumn("Descripcion_SCAT_P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion_SCAT_P)
            Me.columnCodigo_Renglon_P = New Global.System.Data.DataColumn("Codigo_Renglon_P", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo_Renglon_P)
            Me.columnDescripcion_Renglon_P = New Global.System.Data.DataColumn("Descripcion_Renglon_P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion_Renglon_P)
            Me.columnCodigo_CAT_SEC = New Global.System.Data.DataColumn("Codigo_CAT_SEC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo_CAT_SEC)
            Me.columnDescripcion_CAT_SEC = New Global.System.Data.DataColumn("Descripcion_CAT_SEC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion_CAT_SEC)
            Me.columnCodigo_CAT_SEC1 = New Global.System.Data.DataColumn("Codigo_CAT_SEC1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo_CAT_SEC1)
            Me.columnDescripcion_CAT_SEC1 = New Global.System.Data.DataColumn("Descripcion_CAT_SEC1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion_CAT_SEC1)
            Me.columnCodigo_SCAT_SEC = New Global.System.Data.DataColumn("Codigo_SCAT_SEC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo_SCAT_SEC)
            Me.columnDescripcion_SCAT_SEC = New Global.System.Data.DataColumn("Descripcion_SCAT_SEC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion_SCAT_SEC)
            Me.columnCodigo_Renglon_S = New Global.System.Data.DataColumn("Codigo_Renglon_S", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo_Renglon_S)
            Me.columnDescripcion_Renglon_S = New Global.System.Data.DataColumn("Descripcion_Renglon_S", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion_Renglon_S)
            Me.columnDescripcion_CAT_P.MaxLength = 32
            Me.columnDescripcion_SCAT_P.MaxLength = 21
            Me.columnDescripcion_Renglon_P.MaxLength = 30
            Me.columnDescripcion_CAT_SEC.MaxLength = 12
            Me.columnDescripcion_CAT_SEC1.MaxLength = 12
            Me.columnCodigo_SCAT_SEC.MaxLength = 1
            Me.columnDescripcion_SCAT_SEC.MaxLength = 1
            Me.columnCodigo_Renglon_S.MaxLength = 1
            Me.columnDescripcion_Renglon_S.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCostosRow() As CostosRow
            Return CType(Me.NewRow,CostosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CostosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CostosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CostosRowChangedEvent) Is Nothing) Then
                RaiseEvent CostosRowChanged(Me, New CostosRowChangeEvent(CType(e.Row,CostosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CostosRowChangingEvent) Is Nothing) Then
                RaiseEvent CostosRowChanging(Me, New CostosRowChangeEvent(CType(e.Row,CostosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CostosRowDeletedEvent) Is Nothing) Then
                RaiseEvent CostosRowDeleted(Me, New CostosRowChangeEvent(CType(e.Row,CostosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CostosRowDeletingEvent) Is Nothing) Then
                RaiseEvent CostosRowDeleting(Me, New CostosRowChangeEvent(CType(e.Row,CostosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCostosRow(ByVal row As CostosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CostosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EqpImpLDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnCodEqpLULO As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnSuplidor As Global.System.Data.DataColumn
        
        Private columnPrecioEqp As Global.System.Data.DataColumn
        
        Private columnPrecioDia As Global.System.Data.DataColumn
        
        Private columnDepreciacion As Global.System.Data.DataColumn
        
        Private columnPrecioMes1 As Global.System.Data.DataColumn
        
        Private columnPrecioMes2 As Global.System.Data.DataColumn
        
        Private columnPrecioMes3 As Global.System.Data.DataColumn
        
        Private columnPrecioMes4 As Global.System.Data.DataColumn
        
        Private columnPrecioMes5 As Global.System.Data.DataColumn
        
        Private columnPrecioMes6 As Global.System.Data.DataColumn
        
        Private columnPrecioMes7 As Global.System.Data.DataColumn
        
        Private columnPrecioMes8 As Global.System.Data.DataColumn
        
        Private columnPrecioMes9 As Global.System.Data.DataColumn
        
        Private columnPrecioMes10 As Global.System.Data.DataColumn
        
        Private columnPrecioMes11 As Global.System.Data.DataColumn
        
        Private columnPrecioMes12 As Global.System.Data.DataColumn
        
        Private columnDeprecMes1 As Global.System.Data.DataColumn
        
        Private columnDeprecMes2 As Global.System.Data.DataColumn
        
        Private columnDeprecMes3 As Global.System.Data.DataColumn
        
        Private columnDeprecMes4 As Global.System.Data.DataColumn
        
        Private columnDeprecMes5 As Global.System.Data.DataColumn
        
        Private columnDeprecMes6 As Global.System.Data.DataColumn
        
        Private columnDeprecMes7 As Global.System.Data.DataColumn
        
        Private columnDeprecMes8 As Global.System.Data.DataColumn
        
        Private columnDeprecMes9 As Global.System.Data.DataColumn
        
        Private columnDeprecMes10 As Global.System.Data.DataColumn
        
        Private columnDeprecMes11 As Global.System.Data.DataColumn
        
        Private columnDeprecMes12 As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario2daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnDiferenciaPrecio As Global.System.Data.DataColumn
        
        Private columnDiferenciaDepreciacion As Global.System.Data.DataColumn
        
        Private columnPorcentajeDiferencia As Global.System.Data.DataColumn
        
        Private columnPorcentajeDepreciacion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EqpImpL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodEqpLULOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodEqpLULO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuplidorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuplidor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioEqpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioEqp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioDiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepreciacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepreciacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitario2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaPrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaDepreciacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaDepreciacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDepreciacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDepreciacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EqpImpLRow
            Get
                Return CType(Me.Rows(index),EqpImpLRow)
            End Get
        End Property
        
        Public Event EqpImpLRowChanging As EqpImpLRowChangeEventHandler
        
        Public Event EqpImpLRowChanged As EqpImpLRowChangeEventHandler
        
        Public Event EqpImpLRowDeleting As EqpImpLRowChangeEventHandler
        
        Public Event EqpImpLRowDeleted As EqpImpLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEqpImpLRow(ByVal row As EqpImpLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEqpImpLRow( _
                    ByVal ID As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal Codigo As Double,  _
                    ByVal CodEqpLULO As String,  _
                    ByVal Unidad As String,  _
                    ByVal Tipo As Double,  _
                    ByVal Fecha As Date,  _
                    ByVal Suplidor As String,  _
                    ByVal PrecioEqp As Double,  _
                    ByVal PrecioDia As Double,  _
                    ByVal Depreciacion As Double,  _
                    ByVal PrecioMes1 As Double,  _
                    ByVal PrecioMes2 As Double,  _
                    ByVal PrecioMes3 As Double,  _
                    ByVal PrecioMes4 As Double,  _
                    ByVal PrecioMes5 As Double,  _
                    ByVal PrecioMes6 As Double,  _
                    ByVal PrecioMes7 As Double,  _
                    ByVal PrecioMes8 As Double,  _
                    ByVal PrecioMes9 As Double,  _
                    ByVal PrecioMes10 As Double,  _
                    ByVal PrecioMes11 As Double,  _
                    ByVal PrecioMes12 As Double,  _
                    ByVal DeprecMes1 As Double,  _
                    ByVal DeprecMes2 As Double,  _
                    ByVal DeprecMes3 As Double,  _
                    ByVal DeprecMes4 As Double,  _
                    ByVal DeprecMes5 As Double,  _
                    ByVal DeprecMes6 As Double,  _
                    ByVal DeprecMes7 As Double,  _
                    ByVal DeprecMes8 As Double,  _
                    ByVal DeprecMes9 As Double,  _
                    ByVal DeprecMes10 As Double,  _
                    ByVal DeprecMes11 As Double,  _
                    ByVal DeprecMes12 As Double,  _
                    ByVal PrecioUnitario2daMoneda As Double,  _
                    ByVal PrecioMes12daMoneda As Double,  _
                    ByVal PrecioMes22daMoneda As Double,  _
                    ByVal PrecioMes32daMoneda As Double,  _
                    ByVal PrecioMes42daMoneda As Double,  _
                    ByVal PrecioMes52daMoneda As Double,  _
                    ByVal PrecioMes62daMoneda As Double,  _
                    ByVal PrecioMes72daMoneda As Double,  _
                    ByVal PrecioMes82daMoneda As Double,  _
                    ByVal PrecioMes92daMoneda As Double,  _
                    ByVal PrecioMes102daMoneda As Double,  _
                    ByVal PrecioMes112daMoneda As Double,  _
                    ByVal PrecioMes122daMoneda As Double,  _
                    ByVal DiferenciaPrecio As String,  _
                    ByVal DiferenciaDepreciacion As String,  _
                    ByVal PorcentajeDiferencia As String,  _
                    ByVal PorcentajeDepreciacion As String) As EqpImpLRow
            Dim rowEqpImpLRow As EqpImpLRow = CType(Me.NewRow,EqpImpLRow)
            Dim columnValuesArray() As Object = New Object() {ID, Descripcion, Codigo, CodEqpLULO, Unidad, Tipo, Fecha, Suplidor, PrecioEqp, PrecioDia, Depreciacion, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, DeprecMes1, DeprecMes2, DeprecMes3, DeprecMes4, DeprecMes5, DeprecMes6, DeprecMes7, DeprecMes8, DeprecMes9, DeprecMes10, DeprecMes11, DeprecMes12, PrecioUnitario2daMoneda, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, PrecioMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, PrecioMes112daMoneda, PrecioMes122daMoneda, DiferenciaPrecio, DiferenciaDepreciacion, PorcentajeDiferencia, PorcentajeDepreciacion}
            rowEqpImpLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEqpImpLRow)
            Return rowEqpImpLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EqpImpLDataTable = CType(MyBase.Clone,EqpImpLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EqpImpLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnCodEqpLULO = MyBase.Columns("CodEqpLULO")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnSuplidor = MyBase.Columns("Suplidor")
            Me.columnPrecioEqp = MyBase.Columns("PrecioEqp")
            Me.columnPrecioDia = MyBase.Columns("PrecioDia")
            Me.columnDepreciacion = MyBase.Columns("Depreciacion")
            Me.columnPrecioMes1 = MyBase.Columns("PrecioMes1")
            Me.columnPrecioMes2 = MyBase.Columns("PrecioMes2")
            Me.columnPrecioMes3 = MyBase.Columns("PrecioMes3")
            Me.columnPrecioMes4 = MyBase.Columns("PrecioMes4")
            Me.columnPrecioMes5 = MyBase.Columns("PrecioMes5")
            Me.columnPrecioMes6 = MyBase.Columns("PrecioMes6")
            Me.columnPrecioMes7 = MyBase.Columns("PrecioMes7")
            Me.columnPrecioMes8 = MyBase.Columns("PrecioMes8")
            Me.columnPrecioMes9 = MyBase.Columns("PrecioMes9")
            Me.columnPrecioMes10 = MyBase.Columns("PrecioMes10")
            Me.columnPrecioMes11 = MyBase.Columns("PrecioMes11")
            Me.columnPrecioMes12 = MyBase.Columns("PrecioMes12")
            Me.columnDeprecMes1 = MyBase.Columns("DeprecMes1")
            Me.columnDeprecMes2 = MyBase.Columns("DeprecMes2")
            Me.columnDeprecMes3 = MyBase.Columns("DeprecMes3")
            Me.columnDeprecMes4 = MyBase.Columns("DeprecMes4")
            Me.columnDeprecMes5 = MyBase.Columns("DeprecMes5")
            Me.columnDeprecMes6 = MyBase.Columns("DeprecMes6")
            Me.columnDeprecMes7 = MyBase.Columns("DeprecMes7")
            Me.columnDeprecMes8 = MyBase.Columns("DeprecMes8")
            Me.columnDeprecMes9 = MyBase.Columns("DeprecMes9")
            Me.columnDeprecMes10 = MyBase.Columns("DeprecMes10")
            Me.columnDeprecMes11 = MyBase.Columns("DeprecMes11")
            Me.columnDeprecMes12 = MyBase.Columns("DeprecMes12")
            Me.columnPrecioUnitario2daMoneda = MyBase.Columns("PrecioUnitario2daMoneda")
            Me.columnPrecioMes12daMoneda = MyBase.Columns("PrecioMes12daMoneda")
            Me.columnPrecioMes22daMoneda = MyBase.Columns("PrecioMes22daMoneda")
            Me.columnPrecioMes32daMoneda = MyBase.Columns("PrecioMes32daMoneda")
            Me.columnPrecioMes42daMoneda = MyBase.Columns("PrecioMes42daMoneda")
            Me.columnPrecioMes52daMoneda = MyBase.Columns("PrecioMes52daMoneda")
            Me.columnPrecioMes62daMoneda = MyBase.Columns("PrecioMes62daMoneda")
            Me.columnPrecioMes72daMoneda = MyBase.Columns("PrecioMes72daMoneda")
            Me.columnPrecioMes82daMoneda = MyBase.Columns("PrecioMes82daMoneda")
            Me.columnPrecioMes92daMoneda = MyBase.Columns("PrecioMes92daMoneda")
            Me.columnPrecioMes102daMoneda = MyBase.Columns("PrecioMes102daMoneda")
            Me.columnPrecioMes112daMoneda = MyBase.Columns("PrecioMes112daMoneda")
            Me.columnPrecioMes122daMoneda = MyBase.Columns("PrecioMes122daMoneda")
            Me.columnDiferenciaPrecio = MyBase.Columns("DiferenciaPrecio")
            Me.columnDiferenciaDepreciacion = MyBase.Columns("DiferenciaDepreciacion")
            Me.columnPorcentajeDiferencia = MyBase.Columns("PorcentajeDiferencia")
            Me.columnPorcentajeDepreciacion = MyBase.Columns("PorcentajeDepreciacion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnCodEqpLULO = New Global.System.Data.DataColumn("CodEqpLULO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodEqpLULO)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnSuplidor = New Global.System.Data.DataColumn("Suplidor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuplidor)
            Me.columnPrecioEqp = New Global.System.Data.DataColumn("PrecioEqp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioEqp)
            Me.columnPrecioDia = New Global.System.Data.DataColumn("PrecioDia", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioDia)
            Me.columnDepreciacion = New Global.System.Data.DataColumn("Depreciacion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepreciacion)
            Me.columnPrecioMes1 = New Global.System.Data.DataColumn("PrecioMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes1)
            Me.columnPrecioMes2 = New Global.System.Data.DataColumn("PrecioMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes2)
            Me.columnPrecioMes3 = New Global.System.Data.DataColumn("PrecioMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes3)
            Me.columnPrecioMes4 = New Global.System.Data.DataColumn("PrecioMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes4)
            Me.columnPrecioMes5 = New Global.System.Data.DataColumn("PrecioMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes5)
            Me.columnPrecioMes6 = New Global.System.Data.DataColumn("PrecioMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes6)
            Me.columnPrecioMes7 = New Global.System.Data.DataColumn("PrecioMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes7)
            Me.columnPrecioMes8 = New Global.System.Data.DataColumn("PrecioMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes8)
            Me.columnPrecioMes9 = New Global.System.Data.DataColumn("PrecioMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes9)
            Me.columnPrecioMes10 = New Global.System.Data.DataColumn("PrecioMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes10)
            Me.columnPrecioMes11 = New Global.System.Data.DataColumn("PrecioMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes11)
            Me.columnPrecioMes12 = New Global.System.Data.DataColumn("PrecioMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12)
            Me.columnDeprecMes1 = New Global.System.Data.DataColumn("DeprecMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes1)
            Me.columnDeprecMes2 = New Global.System.Data.DataColumn("DeprecMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes2)
            Me.columnDeprecMes3 = New Global.System.Data.DataColumn("DeprecMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes3)
            Me.columnDeprecMes4 = New Global.System.Data.DataColumn("DeprecMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes4)
            Me.columnDeprecMes5 = New Global.System.Data.DataColumn("DeprecMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes5)
            Me.columnDeprecMes6 = New Global.System.Data.DataColumn("DeprecMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes6)
            Me.columnDeprecMes7 = New Global.System.Data.DataColumn("DeprecMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes7)
            Me.columnDeprecMes8 = New Global.System.Data.DataColumn("DeprecMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes8)
            Me.columnDeprecMes9 = New Global.System.Data.DataColumn("DeprecMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes9)
            Me.columnDeprecMes10 = New Global.System.Data.DataColumn("DeprecMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes10)
            Me.columnDeprecMes11 = New Global.System.Data.DataColumn("DeprecMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes11)
            Me.columnDeprecMes12 = New Global.System.Data.DataColumn("DeprecMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes12)
            Me.columnPrecioUnitario2daMoneda = New Global.System.Data.DataColumn("PrecioUnitario2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario2daMoneda)
            Me.columnPrecioMes12daMoneda = New Global.System.Data.DataColumn("PrecioMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12daMoneda)
            Me.columnPrecioMes22daMoneda = New Global.System.Data.DataColumn("PrecioMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes22daMoneda)
            Me.columnPrecioMes32daMoneda = New Global.System.Data.DataColumn("PrecioMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes32daMoneda)
            Me.columnPrecioMes42daMoneda = New Global.System.Data.DataColumn("PrecioMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes42daMoneda)
            Me.columnPrecioMes52daMoneda = New Global.System.Data.DataColumn("PrecioMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes52daMoneda)
            Me.columnPrecioMes62daMoneda = New Global.System.Data.DataColumn("PrecioMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes62daMoneda)
            Me.columnPrecioMes72daMoneda = New Global.System.Data.DataColumn("PrecioMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes72daMoneda)
            Me.columnPrecioMes82daMoneda = New Global.System.Data.DataColumn("PrecioMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes82daMoneda)
            Me.columnPrecioMes92daMoneda = New Global.System.Data.DataColumn("PrecioMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes92daMoneda)
            Me.columnPrecioMes102daMoneda = New Global.System.Data.DataColumn("PrecioMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes102daMoneda)
            Me.columnPrecioMes112daMoneda = New Global.System.Data.DataColumn("PrecioMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes112daMoneda)
            Me.columnPrecioMes122daMoneda = New Global.System.Data.DataColumn("PrecioMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes122daMoneda)
            Me.columnDiferenciaPrecio = New Global.System.Data.DataColumn("DiferenciaPrecio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaPrecio)
            Me.columnDiferenciaDepreciacion = New Global.System.Data.DataColumn("DiferenciaDepreciacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaDepreciacion)
            Me.columnPorcentajeDiferencia = New Global.System.Data.DataColumn("PorcentajeDiferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDiferencia)
            Me.columnPorcentajeDepreciacion = New Global.System.Data.DataColumn("PorcentajeDepreciacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDepreciacion)
            Me.columnDescripcion.MaxLength = 41
            Me.columnCodEqpLULO.MaxLength = 8
            Me.columnUnidad.MaxLength = 3
            Me.columnSuplidor.MaxLength = 1
            Me.columnDiferenciaPrecio.MaxLength = 1
            Me.columnDiferenciaDepreciacion.MaxLength = 1
            Me.columnPorcentajeDiferencia.MaxLength = 1
            Me.columnPorcentajeDepreciacion.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEqpImpLRow() As EqpImpLRow
            Return CType(Me.NewRow,EqpImpLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EqpImpLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EqpImpLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EqpImpLRowChangedEvent) Is Nothing) Then
                RaiseEvent EqpImpLRowChanged(Me, New EqpImpLRowChangeEvent(CType(e.Row,EqpImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EqpImpLRowChangingEvent) Is Nothing) Then
                RaiseEvent EqpImpLRowChanging(Me, New EqpImpLRowChangeEvent(CType(e.Row,EqpImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EqpImpLRowDeletedEvent) Is Nothing) Then
                RaiseEvent EqpImpLRowDeleted(Me, New EqpImpLRowChangeEvent(CType(e.Row,EqpImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EqpImpLRowDeletingEvent) Is Nothing) Then
                RaiseEvent EqpImpLRowDeleting(Me, New EqpImpLRowChangeEvent(CType(e.Row,EqpImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEqpImpLRow(ByVal row As EqpImpLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EqpImpLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EqpImpLBsSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnCodEqpLULO As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnSuplidor As Global.System.Data.DataColumn
        
        Private columnPrecioEqp As Global.System.Data.DataColumn
        
        Private columnPrecioDia As Global.System.Data.DataColumn
        
        Private columnDepreciacion As Global.System.Data.DataColumn
        
        Private columnPrecioMes1 As Global.System.Data.DataColumn
        
        Private columnPrecioMes2 As Global.System.Data.DataColumn
        
        Private columnPrecioMes3 As Global.System.Data.DataColumn
        
        Private columnPrecioMes4 As Global.System.Data.DataColumn
        
        Private columnPrecioMes5 As Global.System.Data.DataColumn
        
        Private columnPrecioMes6 As Global.System.Data.DataColumn
        
        Private columnPrecioMes7 As Global.System.Data.DataColumn
        
        Private columnPrecioMes8 As Global.System.Data.DataColumn
        
        Private columnPrecioMes9 As Global.System.Data.DataColumn
        
        Private columnPrecioMes10 As Global.System.Data.DataColumn
        
        Private columnPrecioMes11 As Global.System.Data.DataColumn
        
        Private columnPrecioMes12 As Global.System.Data.DataColumn
        
        Private columnDeprecMes1 As Global.System.Data.DataColumn
        
        Private columnDeprecMes2 As Global.System.Data.DataColumn
        
        Private columnDeprecMes3 As Global.System.Data.DataColumn
        
        Private columnDeprecMes4 As Global.System.Data.DataColumn
        
        Private columnDeprecMes5 As Global.System.Data.DataColumn
        
        Private columnDeprecMes6 As Global.System.Data.DataColumn
        
        Private columnDeprecMes7 As Global.System.Data.DataColumn
        
        Private columnDeprecMes8 As Global.System.Data.DataColumn
        
        Private columnDeprecMes9 As Global.System.Data.DataColumn
        
        Private columnDeprecMes10 As Global.System.Data.DataColumn
        
        Private columnDeprecMes11 As Global.System.Data.DataColumn
        
        Private columnDeprecMes12 As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario2daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnDiferenciaPrecio As Global.System.Data.DataColumn
        
        Private columnDiferenciaDepreciacion As Global.System.Data.DataColumn
        
        Private columnPorcentajeDiferencia As Global.System.Data.DataColumn
        
        Private columnPorcentajeDepreciacion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EqpImpLBsS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodEqpLULOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodEqpLULO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuplidorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuplidor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioEqpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioEqp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioDiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepreciacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepreciacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitario2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaPrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaDepreciacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaDepreciacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDepreciacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDepreciacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EqpImpLBsSRow
            Get
                Return CType(Me.Rows(index),EqpImpLBsSRow)
            End Get
        End Property
        
        Public Event EqpImpLBsSRowChanging As EqpImpLBsSRowChangeEventHandler
        
        Public Event EqpImpLBsSRowChanged As EqpImpLBsSRowChangeEventHandler
        
        Public Event EqpImpLBsSRowDeleting As EqpImpLBsSRowChangeEventHandler
        
        Public Event EqpImpLBsSRowDeleted As EqpImpLBsSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEqpImpLBsSRow(ByVal row As EqpImpLBsSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEqpImpLBsSRow( _
                    ByVal ID As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal Codigo As Double,  _
                    ByVal CodEqpLULO As String,  _
                    ByVal Unidad As String,  _
                    ByVal Tipo As Double,  _
                    ByVal Fecha As Date,  _
                    ByVal Suplidor As String,  _
                    ByVal PrecioEqp As Double,  _
                    ByVal PrecioDia As Double,  _
                    ByVal Depreciacion As Double,  _
                    ByVal PrecioMes1 As Double,  _
                    ByVal PrecioMes2 As Double,  _
                    ByVal PrecioMes3 As Double,  _
                    ByVal PrecioMes4 As Double,  _
                    ByVal PrecioMes5 As Double,  _
                    ByVal PrecioMes6 As Double,  _
                    ByVal PrecioMes7 As Double,  _
                    ByVal PrecioMes8 As Double,  _
                    ByVal PrecioMes9 As Double,  _
                    ByVal PrecioMes10 As Double,  _
                    ByVal PrecioMes11 As Double,  _
                    ByVal PrecioMes12 As Double,  _
                    ByVal DeprecMes1 As Double,  _
                    ByVal DeprecMes2 As Double,  _
                    ByVal DeprecMes3 As Double,  _
                    ByVal DeprecMes4 As Double,  _
                    ByVal DeprecMes5 As Double,  _
                    ByVal DeprecMes6 As Double,  _
                    ByVal DeprecMes7 As Double,  _
                    ByVal DeprecMes8 As Double,  _
                    ByVal DeprecMes9 As Double,  _
                    ByVal DeprecMes10 As Double,  _
                    ByVal DeprecMes11 As Double,  _
                    ByVal DeprecMes12 As Double,  _
                    ByVal PrecioUnitario2daMoneda As Double,  _
                    ByVal PrecioMes12daMoneda As Double,  _
                    ByVal PrecioMes22daMoneda As Double,  _
                    ByVal PrecioMes32daMoneda As Double,  _
                    ByVal PrecioMes42daMoneda As Double,  _
                    ByVal PrecioMes52daMoneda As Double,  _
                    ByVal PrecioMes62daMoneda As Double,  _
                    ByVal PrecioMes72daMoneda As Double,  _
                    ByVal PrecioMes82daMoneda As Double,  _
                    ByVal PrecioMes92daMoneda As Double,  _
                    ByVal PrecioMes102daMoneda As Double,  _
                    ByVal PrecioMes112daMoneda As Double,  _
                    ByVal PrecioMes122daMoneda As Double,  _
                    ByVal DiferenciaPrecio As Double,  _
                    ByVal DiferenciaDepreciacion As Double,  _
                    ByVal PorcentajeDiferencia As Double,  _
                    ByVal PorcentajeDepreciacion As Double) As EqpImpLBsSRow
            Dim rowEqpImpLBsSRow As EqpImpLBsSRow = CType(Me.NewRow,EqpImpLBsSRow)
            Dim columnValuesArray() As Object = New Object() {ID, Descripcion, Codigo, CodEqpLULO, Unidad, Tipo, Fecha, Suplidor, PrecioEqp, PrecioDia, Depreciacion, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, DeprecMes1, DeprecMes2, DeprecMes3, DeprecMes4, DeprecMes5, DeprecMes6, DeprecMes7, DeprecMes8, DeprecMes9, DeprecMes10, DeprecMes11, DeprecMes12, PrecioUnitario2daMoneda, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, PrecioMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, PrecioMes112daMoneda, PrecioMes122daMoneda, DiferenciaPrecio, DiferenciaDepreciacion, PorcentajeDiferencia, PorcentajeDepreciacion}
            rowEqpImpLBsSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEqpImpLBsSRow)
            Return rowEqpImpLBsSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EqpImpLBsSDataTable = CType(MyBase.Clone,EqpImpLBsSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EqpImpLBsSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnCodEqpLULO = MyBase.Columns("CodEqpLULO")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnSuplidor = MyBase.Columns("Suplidor")
            Me.columnPrecioEqp = MyBase.Columns("PrecioEqp")
            Me.columnPrecioDia = MyBase.Columns("PrecioDia")
            Me.columnDepreciacion = MyBase.Columns("Depreciacion")
            Me.columnPrecioMes1 = MyBase.Columns("PrecioMes1")
            Me.columnPrecioMes2 = MyBase.Columns("PrecioMes2")
            Me.columnPrecioMes3 = MyBase.Columns("PrecioMes3")
            Me.columnPrecioMes4 = MyBase.Columns("PrecioMes4")
            Me.columnPrecioMes5 = MyBase.Columns("PrecioMes5")
            Me.columnPrecioMes6 = MyBase.Columns("PrecioMes6")
            Me.columnPrecioMes7 = MyBase.Columns("PrecioMes7")
            Me.columnPrecioMes8 = MyBase.Columns("PrecioMes8")
            Me.columnPrecioMes9 = MyBase.Columns("PrecioMes9")
            Me.columnPrecioMes10 = MyBase.Columns("PrecioMes10")
            Me.columnPrecioMes11 = MyBase.Columns("PrecioMes11")
            Me.columnPrecioMes12 = MyBase.Columns("PrecioMes12")
            Me.columnDeprecMes1 = MyBase.Columns("DeprecMes1")
            Me.columnDeprecMes2 = MyBase.Columns("DeprecMes2")
            Me.columnDeprecMes3 = MyBase.Columns("DeprecMes3")
            Me.columnDeprecMes4 = MyBase.Columns("DeprecMes4")
            Me.columnDeprecMes5 = MyBase.Columns("DeprecMes5")
            Me.columnDeprecMes6 = MyBase.Columns("DeprecMes6")
            Me.columnDeprecMes7 = MyBase.Columns("DeprecMes7")
            Me.columnDeprecMes8 = MyBase.Columns("DeprecMes8")
            Me.columnDeprecMes9 = MyBase.Columns("DeprecMes9")
            Me.columnDeprecMes10 = MyBase.Columns("DeprecMes10")
            Me.columnDeprecMes11 = MyBase.Columns("DeprecMes11")
            Me.columnDeprecMes12 = MyBase.Columns("DeprecMes12")
            Me.columnPrecioUnitario2daMoneda = MyBase.Columns("PrecioUnitario2daMoneda")
            Me.columnPrecioMes12daMoneda = MyBase.Columns("PrecioMes12daMoneda")
            Me.columnPrecioMes22daMoneda = MyBase.Columns("PrecioMes22daMoneda")
            Me.columnPrecioMes32daMoneda = MyBase.Columns("PrecioMes32daMoneda")
            Me.columnPrecioMes42daMoneda = MyBase.Columns("PrecioMes42daMoneda")
            Me.columnPrecioMes52daMoneda = MyBase.Columns("PrecioMes52daMoneda")
            Me.columnPrecioMes62daMoneda = MyBase.Columns("PrecioMes62daMoneda")
            Me.columnPrecioMes72daMoneda = MyBase.Columns("PrecioMes72daMoneda")
            Me.columnPrecioMes82daMoneda = MyBase.Columns("PrecioMes82daMoneda")
            Me.columnPrecioMes92daMoneda = MyBase.Columns("PrecioMes92daMoneda")
            Me.columnPrecioMes102daMoneda = MyBase.Columns("PrecioMes102daMoneda")
            Me.columnPrecioMes112daMoneda = MyBase.Columns("PrecioMes112daMoneda")
            Me.columnPrecioMes122daMoneda = MyBase.Columns("PrecioMes122daMoneda")
            Me.columnDiferenciaPrecio = MyBase.Columns("DiferenciaPrecio")
            Me.columnDiferenciaDepreciacion = MyBase.Columns("DiferenciaDepreciacion")
            Me.columnPorcentajeDiferencia = MyBase.Columns("PorcentajeDiferencia")
            Me.columnPorcentajeDepreciacion = MyBase.Columns("PorcentajeDepreciacion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnCodEqpLULO = New Global.System.Data.DataColumn("CodEqpLULO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodEqpLULO)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnSuplidor = New Global.System.Data.DataColumn("Suplidor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuplidor)
            Me.columnPrecioEqp = New Global.System.Data.DataColumn("PrecioEqp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioEqp)
            Me.columnPrecioDia = New Global.System.Data.DataColumn("PrecioDia", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioDia)
            Me.columnDepreciacion = New Global.System.Data.DataColumn("Depreciacion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepreciacion)
            Me.columnPrecioMes1 = New Global.System.Data.DataColumn("PrecioMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes1)
            Me.columnPrecioMes2 = New Global.System.Data.DataColumn("PrecioMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes2)
            Me.columnPrecioMes3 = New Global.System.Data.DataColumn("PrecioMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes3)
            Me.columnPrecioMes4 = New Global.System.Data.DataColumn("PrecioMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes4)
            Me.columnPrecioMes5 = New Global.System.Data.DataColumn("PrecioMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes5)
            Me.columnPrecioMes6 = New Global.System.Data.DataColumn("PrecioMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes6)
            Me.columnPrecioMes7 = New Global.System.Data.DataColumn("PrecioMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes7)
            Me.columnPrecioMes8 = New Global.System.Data.DataColumn("PrecioMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes8)
            Me.columnPrecioMes9 = New Global.System.Data.DataColumn("PrecioMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes9)
            Me.columnPrecioMes10 = New Global.System.Data.DataColumn("PrecioMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes10)
            Me.columnPrecioMes11 = New Global.System.Data.DataColumn("PrecioMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes11)
            Me.columnPrecioMes12 = New Global.System.Data.DataColumn("PrecioMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12)
            Me.columnDeprecMes1 = New Global.System.Data.DataColumn("DeprecMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes1)
            Me.columnDeprecMes2 = New Global.System.Data.DataColumn("DeprecMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes2)
            Me.columnDeprecMes3 = New Global.System.Data.DataColumn("DeprecMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes3)
            Me.columnDeprecMes4 = New Global.System.Data.DataColumn("DeprecMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes4)
            Me.columnDeprecMes5 = New Global.System.Data.DataColumn("DeprecMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes5)
            Me.columnDeprecMes6 = New Global.System.Data.DataColumn("DeprecMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes6)
            Me.columnDeprecMes7 = New Global.System.Data.DataColumn("DeprecMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes7)
            Me.columnDeprecMes8 = New Global.System.Data.DataColumn("DeprecMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes8)
            Me.columnDeprecMes9 = New Global.System.Data.DataColumn("DeprecMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes9)
            Me.columnDeprecMes10 = New Global.System.Data.DataColumn("DeprecMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes10)
            Me.columnDeprecMes11 = New Global.System.Data.DataColumn("DeprecMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes11)
            Me.columnDeprecMes12 = New Global.System.Data.DataColumn("DeprecMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes12)
            Me.columnPrecioUnitario2daMoneda = New Global.System.Data.DataColumn("PrecioUnitario2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario2daMoneda)
            Me.columnPrecioMes12daMoneda = New Global.System.Data.DataColumn("PrecioMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12daMoneda)
            Me.columnPrecioMes22daMoneda = New Global.System.Data.DataColumn("PrecioMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes22daMoneda)
            Me.columnPrecioMes32daMoneda = New Global.System.Data.DataColumn("PrecioMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes32daMoneda)
            Me.columnPrecioMes42daMoneda = New Global.System.Data.DataColumn("PrecioMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes42daMoneda)
            Me.columnPrecioMes52daMoneda = New Global.System.Data.DataColumn("PrecioMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes52daMoneda)
            Me.columnPrecioMes62daMoneda = New Global.System.Data.DataColumn("PrecioMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes62daMoneda)
            Me.columnPrecioMes72daMoneda = New Global.System.Data.DataColumn("PrecioMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes72daMoneda)
            Me.columnPrecioMes82daMoneda = New Global.System.Data.DataColumn("PrecioMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes82daMoneda)
            Me.columnPrecioMes92daMoneda = New Global.System.Data.DataColumn("PrecioMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes92daMoneda)
            Me.columnPrecioMes102daMoneda = New Global.System.Data.DataColumn("PrecioMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes102daMoneda)
            Me.columnPrecioMes112daMoneda = New Global.System.Data.DataColumn("PrecioMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes112daMoneda)
            Me.columnPrecioMes122daMoneda = New Global.System.Data.DataColumn("PrecioMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes122daMoneda)
            Me.columnDiferenciaPrecio = New Global.System.Data.DataColumn("DiferenciaPrecio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaPrecio)
            Me.columnDiferenciaDepreciacion = New Global.System.Data.DataColumn("DiferenciaDepreciacion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaDepreciacion)
            Me.columnPorcentajeDiferencia = New Global.System.Data.DataColumn("PorcentajeDiferencia", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDiferencia)
            Me.columnPorcentajeDepreciacion = New Global.System.Data.DataColumn("PorcentajeDepreciacion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDepreciacion)
            Me.columnDescripcion.MaxLength = 40
            Me.columnCodEqpLULO.MaxLength = 8
            Me.columnUnidad.MaxLength = 3
            Me.columnSuplidor.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEqpImpLBsSRow() As EqpImpLBsSRow
            Return CType(Me.NewRow,EqpImpLBsSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EqpImpLBsSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EqpImpLBsSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EqpImpLBsSRowChangedEvent) Is Nothing) Then
                RaiseEvent EqpImpLBsSRowChanged(Me, New EqpImpLBsSRowChangeEvent(CType(e.Row,EqpImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EqpImpLBsSRowChangingEvent) Is Nothing) Then
                RaiseEvent EqpImpLBsSRowChanging(Me, New EqpImpLBsSRowChangeEvent(CType(e.Row,EqpImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EqpImpLBsSRowDeletedEvent) Is Nothing) Then
                RaiseEvent EqpImpLBsSRowDeleted(Me, New EqpImpLBsSRowChangeEvent(CType(e.Row,EqpImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EqpImpLBsSRowDeletingEvent) Is Nothing) Then
                RaiseEvent EqpImpLBsSRowDeleting(Me, New EqpImpLBsSRowChangeEvent(CType(e.Row,EqpImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEqpImpLBsSRow(ByVal row As EqpImpLBsSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EqpImpLBsSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EquipoCompDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodInterno As Global.System.Data.DataColumn
        
        Private columnLista As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnDepreciacion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EquipoComp"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLista
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepreciacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepreciacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EquipoCompRow
            Get
                Return CType(Me.Rows(index),EquipoCompRow)
            End Get
        End Property
        
        Public Event EquipoCompRowChanging As EquipoCompRowChangeEventHandler
        
        Public Event EquipoCompRowChanged As EquipoCompRowChangeEventHandler
        
        Public Event EquipoCompRowDeleting As EquipoCompRowChangeEventHandler
        
        Public Event EquipoCompRowDeleted As EquipoCompRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEquipoCompRow(ByVal row As EquipoCompRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEquipoCompRow(ByVal CodInterno As Double, ByVal Lista As Double, ByVal ID As Double, ByVal Codigo As Double, ByVal Descripcion As String, ByVal Unidad As String, ByVal Cantidad As Double, ByVal Precio As Double, ByVal Depreciacion As Double) As EquipoCompRow
            Dim rowEquipoCompRow As EquipoCompRow = CType(Me.NewRow,EquipoCompRow)
            Dim columnValuesArray() As Object = New Object() {CodInterno, Lista, ID, Codigo, Descripcion, Unidad, Cantidad, Precio, Depreciacion}
            rowEquipoCompRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEquipoCompRow)
            Return rowEquipoCompRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EquipoCompDataTable = CType(MyBase.Clone,EquipoCompDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EquipoCompDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodInterno = MyBase.Columns("CodInterno")
            Me.columnLista = MyBase.Columns("Lista")
            Me.columnID = MyBase.Columns("ID")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnDepreciacion = MyBase.Columns("Depreciacion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodInterno = New Global.System.Data.DataColumn("CodInterno", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodInterno)
            Me.columnLista = New Global.System.Data.DataColumn("Lista", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLista)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnDepreciacion = New Global.System.Data.DataColumn("Depreciacion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepreciacion)
            Me.columnDescripcion.MaxLength = 55
            Me.columnUnidad.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEquipoCompRow() As EquipoCompRow
            Return CType(Me.NewRow,EquipoCompRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EquipoCompRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EquipoCompRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EquipoCompRowChangedEvent) Is Nothing) Then
                RaiseEvent EquipoCompRowChanged(Me, New EquipoCompRowChangeEvent(CType(e.Row,EquipoCompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EquipoCompRowChangingEvent) Is Nothing) Then
                RaiseEvent EquipoCompRowChanging(Me, New EquipoCompRowChangeEvent(CType(e.Row,EquipoCompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EquipoCompRowDeletedEvent) Is Nothing) Then
                RaiseEvent EquipoCompRowDeleted(Me, New EquipoCompRowChangeEvent(CType(e.Row,EquipoCompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EquipoCompRowDeletingEvent) Is Nothing) Then
                RaiseEvent EquipoCompRowDeleting(Me, New EquipoCompRowChangeEvent(CType(e.Row,EquipoCompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEquipoCompRow(ByVal row As EquipoCompRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EquipoCompDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IndicesPACDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGRUPO As Global.System.Data.DataColumn
        
        Private columnAGRUPACION As Global.System.Data.DataColumn
        
        Private columnAÑO As Global.System.Data.DataColumn
        
        Private columnIDENTIFICACION As Global.System.Data.DataColumn
        
        Private columnORDEN As Global.System.Data.DataColumn
        
        Private columnMES1 As Global.System.Data.DataColumn
        
        Private columnMES2 As Global.System.Data.DataColumn
        
        Private columnMES3 As Global.System.Data.DataColumn
        
        Private columnMES4 As Global.System.Data.DataColumn
        
        Private columnMES5 As Global.System.Data.DataColumn
        
        Private columnMES6 As Global.System.Data.DataColumn
        
        Private columnMES7 As Global.System.Data.DataColumn
        
        Private columnMES8 As Global.System.Data.DataColumn
        
        Private columnMES9 As Global.System.Data.DataColumn
        
        Private columnMES10 As Global.System.Data.DataColumn
        
        Private columnMES11 As Global.System.Data.DataColumn
        
        Private columnMES12 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IndicesPAC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGRUPACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGRUPACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AÑOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAÑO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDENTIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IndicesPACRow
            Get
                Return CType(Me.Rows(index),IndicesPACRow)
            End Get
        End Property
        
        Public Event IndicesPACRowChanging As IndicesPACRowChangeEventHandler
        
        Public Event IndicesPACRowChanged As IndicesPACRowChangeEventHandler
        
        Public Event IndicesPACRowDeleting As IndicesPACRowChangeEventHandler
        
        Public Event IndicesPACRowDeleted As IndicesPACRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIndicesPACRow(ByVal row As IndicesPACRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIndicesPACRow( _
                    ByVal GRUPO As Double,  _
                    ByVal AGRUPACION As String,  _
                    ByVal AÑO As Double,  _
                    ByVal IDENTIFICACION As String,  _
                    ByVal ORDEN As Double,  _
                    ByVal MES1 As Double,  _
                    ByVal MES2 As Double,  _
                    ByVal MES3 As Double,  _
                    ByVal MES4 As Double,  _
                    ByVal MES5 As Double,  _
                    ByVal MES6 As Double,  _
                    ByVal MES7 As Double,  _
                    ByVal MES8 As Double,  _
                    ByVal MES9 As Double,  _
                    ByVal MES10 As Double,  _
                    ByVal MES11 As Double,  _
                    ByVal MES12 As Double) As IndicesPACRow
            Dim rowIndicesPACRow As IndicesPACRow = CType(Me.NewRow,IndicesPACRow)
            Dim columnValuesArray() As Object = New Object() {GRUPO, AGRUPACION, AÑO, IDENTIFICACION, ORDEN, MES1, MES2, MES3, MES4, MES5, MES6, MES7, MES8, MES9, MES10, MES11, MES12}
            rowIndicesPACRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIndicesPACRow)
            Return rowIndicesPACRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IndicesPACDataTable = CType(MyBase.Clone,IndicesPACDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IndicesPACDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGRUPO = MyBase.Columns("GRUPO")
            Me.columnAGRUPACION = MyBase.Columns("AGRUPACION")
            Me.columnAÑO = MyBase.Columns("AÑO")
            Me.columnIDENTIFICACION = MyBase.Columns("IDENTIFICACION")
            Me.columnORDEN = MyBase.Columns("ORDEN")
            Me.columnMES1 = MyBase.Columns("MES1")
            Me.columnMES2 = MyBase.Columns("MES2")
            Me.columnMES3 = MyBase.Columns("MES3")
            Me.columnMES4 = MyBase.Columns("MES4")
            Me.columnMES5 = MyBase.Columns("MES5")
            Me.columnMES6 = MyBase.Columns("MES6")
            Me.columnMES7 = MyBase.Columns("MES7")
            Me.columnMES8 = MyBase.Columns("MES8")
            Me.columnMES9 = MyBase.Columns("MES9")
            Me.columnMES10 = MyBase.Columns("MES10")
            Me.columnMES11 = MyBase.Columns("MES11")
            Me.columnMES12 = MyBase.Columns("MES12")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGRUPO = New Global.System.Data.DataColumn("GRUPO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRUPO)
            Me.columnAGRUPACION = New Global.System.Data.DataColumn("AGRUPACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGRUPACION)
            Me.columnAÑO = New Global.System.Data.DataColumn("AÑO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAÑO)
            Me.columnIDENTIFICACION = New Global.System.Data.DataColumn("IDENTIFICACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTIFICACION)
            Me.columnORDEN = New Global.System.Data.DataColumn("ORDEN", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDEN)
            Me.columnMES1 = New Global.System.Data.DataColumn("MES1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES1)
            Me.columnMES2 = New Global.System.Data.DataColumn("MES2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES2)
            Me.columnMES3 = New Global.System.Data.DataColumn("MES3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES3)
            Me.columnMES4 = New Global.System.Data.DataColumn("MES4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES4)
            Me.columnMES5 = New Global.System.Data.DataColumn("MES5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES5)
            Me.columnMES6 = New Global.System.Data.DataColumn("MES6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES6)
            Me.columnMES7 = New Global.System.Data.DataColumn("MES7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES7)
            Me.columnMES8 = New Global.System.Data.DataColumn("MES8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES8)
            Me.columnMES9 = New Global.System.Data.DataColumn("MES9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES9)
            Me.columnMES10 = New Global.System.Data.DataColumn("MES10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES10)
            Me.columnMES11 = New Global.System.Data.DataColumn("MES11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES11)
            Me.columnMES12 = New Global.System.Data.DataColumn("MES12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES12)
            Me.columnAGRUPACION.MaxLength = 44
            Me.columnIDENTIFICACION.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIndicesPACRow() As IndicesPACRow
            Return CType(Me.NewRow,IndicesPACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IndicesPACRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IndicesPACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IndicesPACRowChangedEvent) Is Nothing) Then
                RaiseEvent IndicesPACRowChanged(Me, New IndicesPACRowChangeEvent(CType(e.Row,IndicesPACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IndicesPACRowChangingEvent) Is Nothing) Then
                RaiseEvent IndicesPACRowChanging(Me, New IndicesPACRowChangeEvent(CType(e.Row,IndicesPACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IndicesPACRowDeletedEvent) Is Nothing) Then
                RaiseEvent IndicesPACRowDeleted(Me, New IndicesPACRowChangeEvent(CType(e.Row,IndicesPACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IndicesPACRowDeletingEvent) Is Nothing) Then
                RaiseEvent IndicesPACRowDeleting(Me, New IndicesPACRowChangeEvent(CType(e.Row,IndicesPACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIndicesPACRow(ByVal row As IndicesPACRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IndicesPACDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ListaEqpDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnListName As Global.System.Data.DataColumn
        
        Private columnListDate As Global.System.Data.DataColumn
        
        Private columnListDes As Global.System.Data.DataColumn
        
        Private columnDBName As Global.System.Data.DataColumn
        
        Private columnDBPath As Global.System.Data.DataColumn
        
        Private columnTableN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ListaEqp"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TableNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTableN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ListaEqpRow
            Get
                Return CType(Me.Rows(index),ListaEqpRow)
            End Get
        End Property
        
        Public Event ListaEqpRowChanging As ListaEqpRowChangeEventHandler
        
        Public Event ListaEqpRowChanged As ListaEqpRowChangeEventHandler
        
        Public Event ListaEqpRowDeleting As ListaEqpRowChangeEventHandler
        
        Public Event ListaEqpRowDeleted As ListaEqpRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddListaEqpRow(ByVal row As ListaEqpRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddListaEqpRow(ByVal ListName As String, ByVal ListDate As Date, ByVal ListDes As String, ByVal DBName As String, ByVal DBPath As String, ByVal TableN As String) As ListaEqpRow
            Dim rowListaEqpRow As ListaEqpRow = CType(Me.NewRow,ListaEqpRow)
            Dim columnValuesArray() As Object = New Object() {ListName, ListDate, ListDes, DBName, DBPath, TableN}
            rowListaEqpRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowListaEqpRow)
            Return rowListaEqpRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ListaEqpDataTable = CType(MyBase.Clone,ListaEqpDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ListaEqpDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnListName = MyBase.Columns("ListName")
            Me.columnListDate = MyBase.Columns("ListDate")
            Me.columnListDes = MyBase.Columns("ListDes")
            Me.columnDBName = MyBase.Columns("DBName")
            Me.columnDBPath = MyBase.Columns("DBPath")
            Me.columnTableN = MyBase.Columns("TableN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnListName = New Global.System.Data.DataColumn("ListName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListName)
            Me.columnListDate = New Global.System.Data.DataColumn("ListDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListDate)
            Me.columnListDes = New Global.System.Data.DataColumn("ListDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListDes)
            Me.columnDBName = New Global.System.Data.DataColumn("DBName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBName)
            Me.columnDBPath = New Global.System.Data.DataColumn("DBPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBPath)
            Me.columnTableN = New Global.System.Data.DataColumn("TableN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTableN)
            Me.columnListName.MaxLength = 30
            Me.columnListDes.MaxLength = 60
            Me.columnDBName.MaxLength = 30
            Me.columnDBPath.MaxLength = 150
            Me.columnTableN.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewListaEqpRow() As ListaEqpRow
            Return CType(Me.NewRow,ListaEqpRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ListaEqpRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ListaEqpRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ListaEqpRowChangedEvent) Is Nothing) Then
                RaiseEvent ListaEqpRowChanged(Me, New ListaEqpRowChangeEvent(CType(e.Row,ListaEqpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ListaEqpRowChangingEvent) Is Nothing) Then
                RaiseEvent ListaEqpRowChanging(Me, New ListaEqpRowChangeEvent(CType(e.Row,ListaEqpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ListaEqpRowDeletedEvent) Is Nothing) Then
                RaiseEvent ListaEqpRowDeleted(Me, New ListaEqpRowChangeEvent(CType(e.Row,ListaEqpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ListaEqpRowDeletingEvent) Is Nothing) Then
                RaiseEvent ListaEqpRowDeleting(Me, New ListaEqpRowChangeEvent(CType(e.Row,ListaEqpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveListaEqpRow(ByVal row As ListaEqpRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ListaEqpDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ListaMatDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnListName As Global.System.Data.DataColumn
        
        Private columnListDate As Global.System.Data.DataColumn
        
        Private columnListDes As Global.System.Data.DataColumn
        
        Private columnDBName As Global.System.Data.DataColumn
        
        Private columnDBPath As Global.System.Data.DataColumn
        
        Private columnTableN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ListaMat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TableNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTableN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ListaMatRow
            Get
                Return CType(Me.Rows(index),ListaMatRow)
            End Get
        End Property
        
        Public Event ListaMatRowChanging As ListaMatRowChangeEventHandler
        
        Public Event ListaMatRowChanged As ListaMatRowChangeEventHandler
        
        Public Event ListaMatRowDeleting As ListaMatRowChangeEventHandler
        
        Public Event ListaMatRowDeleted As ListaMatRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddListaMatRow(ByVal row As ListaMatRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddListaMatRow(ByVal ListName As String, ByVal ListDate As Date, ByVal ListDes As String, ByVal DBName As String, ByVal DBPath As String, ByVal TableN As String) As ListaMatRow
            Dim rowListaMatRow As ListaMatRow = CType(Me.NewRow,ListaMatRow)
            Dim columnValuesArray() As Object = New Object() {ListName, ListDate, ListDes, DBName, DBPath, TableN}
            rowListaMatRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowListaMatRow)
            Return rowListaMatRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ListaMatDataTable = CType(MyBase.Clone,ListaMatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ListaMatDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnListName = MyBase.Columns("ListName")
            Me.columnListDate = MyBase.Columns("ListDate")
            Me.columnListDes = MyBase.Columns("ListDes")
            Me.columnDBName = MyBase.Columns("DBName")
            Me.columnDBPath = MyBase.Columns("DBPath")
            Me.columnTableN = MyBase.Columns("TableN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnListName = New Global.System.Data.DataColumn("ListName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListName)
            Me.columnListDate = New Global.System.Data.DataColumn("ListDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListDate)
            Me.columnListDes = New Global.System.Data.DataColumn("ListDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListDes)
            Me.columnDBName = New Global.System.Data.DataColumn("DBName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBName)
            Me.columnDBPath = New Global.System.Data.DataColumn("DBPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBPath)
            Me.columnTableN = New Global.System.Data.DataColumn("TableN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTableN)
            Me.columnListName.MaxLength = 22
            Me.columnListDes.MaxLength = 34
            Me.columnDBName.MaxLength = 13
            Me.columnDBPath.MaxLength = 131
            Me.columnTableN.MaxLength = 14
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewListaMatRow() As ListaMatRow
            Return CType(Me.NewRow,ListaMatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ListaMatRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ListaMatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ListaMatRowChangedEvent) Is Nothing) Then
                RaiseEvent ListaMatRowChanged(Me, New ListaMatRowChangeEvent(CType(e.Row,ListaMatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ListaMatRowChangingEvent) Is Nothing) Then
                RaiseEvent ListaMatRowChanging(Me, New ListaMatRowChangeEvent(CType(e.Row,ListaMatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ListaMatRowDeletedEvent) Is Nothing) Then
                RaiseEvent ListaMatRowDeleted(Me, New ListaMatRowChangeEvent(CType(e.Row,ListaMatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ListaMatRowDeletingEvent) Is Nothing) Then
                RaiseEvent ListaMatRowDeleting(Me, New ListaMatRowChangeEvent(CType(e.Row,ListaMatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveListaMatRow(ByVal row As ListaMatRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ListaMatDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ListaMdODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnListName As Global.System.Data.DataColumn
        
        Private columnListDate As Global.System.Data.DataColumn
        
        Private columnListDes As Global.System.Data.DataColumn
        
        Private columnDBName As Global.System.Data.DataColumn
        
        Private columnDBPath As Global.System.Data.DataColumn
        
        Private columnTableN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ListaMdO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TableNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTableN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ListaMdORow
            Get
                Return CType(Me.Rows(index),ListaMdORow)
            End Get
        End Property
        
        Public Event ListaMdORowChanging As ListaMdORowChangeEventHandler
        
        Public Event ListaMdORowChanged As ListaMdORowChangeEventHandler
        
        Public Event ListaMdORowDeleting As ListaMdORowChangeEventHandler
        
        Public Event ListaMdORowDeleted As ListaMdORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddListaMdORow(ByVal row As ListaMdORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddListaMdORow(ByVal ListName As String, ByVal ListDate As Date, ByVal ListDes As String, ByVal DBName As String, ByVal DBPath As String, ByVal TableN As String) As ListaMdORow
            Dim rowListaMdORow As ListaMdORow = CType(Me.NewRow,ListaMdORow)
            Dim columnValuesArray() As Object = New Object() {ListName, ListDate, ListDes, DBName, DBPath, TableN}
            rowListaMdORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowListaMdORow)
            Return rowListaMdORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ListaMdODataTable = CType(MyBase.Clone,ListaMdODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ListaMdODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnListName = MyBase.Columns("ListName")
            Me.columnListDate = MyBase.Columns("ListDate")
            Me.columnListDes = MyBase.Columns("ListDes")
            Me.columnDBName = MyBase.Columns("DBName")
            Me.columnDBPath = MyBase.Columns("DBPath")
            Me.columnTableN = MyBase.Columns("TableN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnListName = New Global.System.Data.DataColumn("ListName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListName)
            Me.columnListDate = New Global.System.Data.DataColumn("ListDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListDate)
            Me.columnListDes = New Global.System.Data.DataColumn("ListDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListDes)
            Me.columnDBName = New Global.System.Data.DataColumn("DBName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBName)
            Me.columnDBPath = New Global.System.Data.DataColumn("DBPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBPath)
            Me.columnTableN = New Global.System.Data.DataColumn("TableN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTableN)
            Me.columnListName.MaxLength = 24
            Me.columnListDes.MaxLength = 34
            Me.columnDBName.MaxLength = 13
            Me.columnDBPath.MaxLength = 131
            Me.columnTableN.MaxLength = 14
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewListaMdORow() As ListaMdORow
            Return CType(Me.NewRow,ListaMdORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ListaMdORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ListaMdORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ListaMdORowChangedEvent) Is Nothing) Then
                RaiseEvent ListaMdORowChanged(Me, New ListaMdORowChangeEvent(CType(e.Row,ListaMdORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ListaMdORowChangingEvent) Is Nothing) Then
                RaiseEvent ListaMdORowChanging(Me, New ListaMdORowChangeEvent(CType(e.Row,ListaMdORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ListaMdORowDeletedEvent) Is Nothing) Then
                RaiseEvent ListaMdORowDeleted(Me, New ListaMdORowChangeEvent(CType(e.Row,ListaMdORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ListaMdORowDeletingEvent) Is Nothing) Then
                RaiseEvent ListaMdORowDeleting(Me, New ListaMdORowChangeEvent(CType(e.Row,ListaMdORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveListaMdORow(ByVal row As ListaMdORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ListaMdODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ListaTranDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnListName As Global.System.Data.DataColumn
        
        Private columnListDate As Global.System.Data.DataColumn
        
        Private columnListDes As Global.System.Data.DataColumn
        
        Private columnDBName As Global.System.Data.DataColumn
        
        Private columnDBPath As Global.System.Data.DataColumn
        
        Private columnTableN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ListaTran"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TableNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTableN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ListaTranRow
            Get
                Return CType(Me.Rows(index),ListaTranRow)
            End Get
        End Property
        
        Public Event ListaTranRowChanging As ListaTranRowChangeEventHandler
        
        Public Event ListaTranRowChanged As ListaTranRowChangeEventHandler
        
        Public Event ListaTranRowDeleting As ListaTranRowChangeEventHandler
        
        Public Event ListaTranRowDeleted As ListaTranRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddListaTranRow(ByVal row As ListaTranRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddListaTranRow(ByVal ListName As String, ByVal ListDate As Date, ByVal ListDes As String, ByVal DBName As String, ByVal DBPath As String, ByVal TableN As String) As ListaTranRow
            Dim rowListaTranRow As ListaTranRow = CType(Me.NewRow,ListaTranRow)
            Dim columnValuesArray() As Object = New Object() {ListName, ListDate, ListDes, DBName, DBPath, TableN}
            rowListaTranRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowListaTranRow)
            Return rowListaTranRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ListaTranDataTable = CType(MyBase.Clone,ListaTranDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ListaTranDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnListName = MyBase.Columns("ListName")
            Me.columnListDate = MyBase.Columns("ListDate")
            Me.columnListDes = MyBase.Columns("ListDes")
            Me.columnDBName = MyBase.Columns("DBName")
            Me.columnDBPath = MyBase.Columns("DBPath")
            Me.columnTableN = MyBase.Columns("TableN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnListName = New Global.System.Data.DataColumn("ListName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListName)
            Me.columnListDate = New Global.System.Data.DataColumn("ListDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListDate)
            Me.columnListDes = New Global.System.Data.DataColumn("ListDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListDes)
            Me.columnDBName = New Global.System.Data.DataColumn("DBName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBName)
            Me.columnDBPath = New Global.System.Data.DataColumn("DBPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBPath)
            Me.columnTableN = New Global.System.Data.DataColumn("TableN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTableN)
            Me.columnListName.MaxLength = 22
            Me.columnListDes.MaxLength = 35
            Me.columnDBName.MaxLength = 13
            Me.columnDBPath.MaxLength = 131
            Me.columnTableN.MaxLength = 11
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewListaTranRow() As ListaTranRow
            Return CType(Me.NewRow,ListaTranRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ListaTranRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ListaTranRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ListaTranRowChangedEvent) Is Nothing) Then
                RaiseEvent ListaTranRowChanged(Me, New ListaTranRowChangeEvent(CType(e.Row,ListaTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ListaTranRowChangingEvent) Is Nothing) Then
                RaiseEvent ListaTranRowChanging(Me, New ListaTranRowChangeEvent(CType(e.Row,ListaTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ListaTranRowDeletedEvent) Is Nothing) Then
                RaiseEvent ListaTranRowDeleted(Me, New ListaTranRowChangeEvent(CType(e.Row,ListaTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ListaTranRowDeletingEvent) Is Nothing) Then
                RaiseEvent ListaTranRowDeleting(Me, New ListaTranRowChangeEvent(CType(e.Row,ListaTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveListaTranRow(ByVal row As ListaTranRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ListaTranDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MasterEqpDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnLista As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnDepreciacion As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnSuplidor As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnPrecioMes1 As Global.System.Data.DataColumn
        
        Private columnPrecioMes2 As Global.System.Data.DataColumn
        
        Private columnPrecioMes3 As Global.System.Data.DataColumn
        
        Private columnPrecioMes4 As Global.System.Data.DataColumn
        
        Private columnPrecioMes5 As Global.System.Data.DataColumn
        
        Private columnPrecioMes6 As Global.System.Data.DataColumn
        
        Private columnPrecioMes7 As Global.System.Data.DataColumn
        
        Private columnPrecioMes8 As Global.System.Data.DataColumn
        
        Private columnPrecioMes9 As Global.System.Data.DataColumn
        
        Private columnPrecioMes10 As Global.System.Data.DataColumn
        
        Private columnPrecioMes11 As Global.System.Data.DataColumn
        
        Private columnPrecioMes12 As Global.System.Data.DataColumn
        
        Private columnDeprecMes1 As Global.System.Data.DataColumn
        
        Private columnDeprecMes2 As Global.System.Data.DataColumn
        
        Private columnDeprecMes3 As Global.System.Data.DataColumn
        
        Private columnDeprecMes4 As Global.System.Data.DataColumn
        
        Private columnDeprecMes5 As Global.System.Data.DataColumn
        
        Private columnDeprecMes6 As Global.System.Data.DataColumn
        
        Private columnDeprecMes7 As Global.System.Data.DataColumn
        
        Private columnDeprecMes8 As Global.System.Data.DataColumn
        
        Private columnDeprecMes9 As Global.System.Data.DataColumn
        
        Private columnDeprecMes10 As Global.System.Data.DataColumn
        
        Private columnDeprecMes11 As Global.System.Data.DataColumn
        
        Private columnDeprecMes12 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MasterEqp"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLista
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepreciacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepreciacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuplidorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuplidor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeprecMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeprecMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MasterEqpRow
            Get
                Return CType(Me.Rows(index),MasterEqpRow)
            End Get
        End Property
        
        Public Event MasterEqpRowChanging As MasterEqpRowChangeEventHandler
        
        Public Event MasterEqpRowChanged As MasterEqpRowChangeEventHandler
        
        Public Event MasterEqpRowDeleting As MasterEqpRowChangeEventHandler
        
        Public Event MasterEqpRowDeleted As MasterEqpRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMasterEqpRow(ByVal row As MasterEqpRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMasterEqpRow( _
                    ByVal Codigo As Double,  _
                    ByVal Lista As Double,  _
                    ByVal ID As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal Unidad As String,  _
                    ByVal Precio As Double,  _
                    ByVal Depreciacion As Double,  _
                    ByVal Fecha As Date,  _
                    ByVal Suplidor As String,  _
                    ByVal Tipo As Double,  _
                    ByVal PrecioMes1 As Double,  _
                    ByVal PrecioMes2 As Double,  _
                    ByVal PrecioMes3 As Double,  _
                    ByVal PrecioMes4 As Double,  _
                    ByVal PrecioMes5 As Double,  _
                    ByVal PrecioMes6 As Double,  _
                    ByVal PrecioMes7 As Double,  _
                    ByVal PrecioMes8 As Double,  _
                    ByVal PrecioMes9 As Double,  _
                    ByVal PrecioMes10 As Double,  _
                    ByVal PrecioMes11 As Double,  _
                    ByVal PrecioMes12 As Double,  _
                    ByVal DeprecMes1 As Double,  _
                    ByVal DeprecMes2 As Double,  _
                    ByVal DeprecMes3 As Double,  _
                    ByVal DeprecMes4 As Double,  _
                    ByVal DeprecMes5 As Double,  _
                    ByVal DeprecMes6 As Double,  _
                    ByVal DeprecMes7 As Double,  _
                    ByVal DeprecMes8 As Double,  _
                    ByVal DeprecMes9 As Double,  _
                    ByVal DeprecMes10 As Double,  _
                    ByVal DeprecMes11 As Double,  _
                    ByVal DeprecMes12 As Double) As MasterEqpRow
            Dim rowMasterEqpRow As MasterEqpRow = CType(Me.NewRow,MasterEqpRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Lista, ID, Descripcion, Unidad, Precio, Depreciacion, Fecha, Suplidor, Tipo, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, DeprecMes1, DeprecMes2, DeprecMes3, DeprecMes4, DeprecMes5, DeprecMes6, DeprecMes7, DeprecMes8, DeprecMes9, DeprecMes10, DeprecMes11, DeprecMes12}
            rowMasterEqpRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMasterEqpRow)
            Return rowMasterEqpRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MasterEqpDataTable = CType(MyBase.Clone,MasterEqpDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MasterEqpDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnLista = MyBase.Columns("Lista")
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnDepreciacion = MyBase.Columns("Depreciacion")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnSuplidor = MyBase.Columns("Suplidor")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnPrecioMes1 = MyBase.Columns("PrecioMes1")
            Me.columnPrecioMes2 = MyBase.Columns("PrecioMes2")
            Me.columnPrecioMes3 = MyBase.Columns("PrecioMes3")
            Me.columnPrecioMes4 = MyBase.Columns("PrecioMes4")
            Me.columnPrecioMes5 = MyBase.Columns("PrecioMes5")
            Me.columnPrecioMes6 = MyBase.Columns("PrecioMes6")
            Me.columnPrecioMes7 = MyBase.Columns("PrecioMes7")
            Me.columnPrecioMes8 = MyBase.Columns("PrecioMes8")
            Me.columnPrecioMes9 = MyBase.Columns("PrecioMes9")
            Me.columnPrecioMes10 = MyBase.Columns("PrecioMes10")
            Me.columnPrecioMes11 = MyBase.Columns("PrecioMes11")
            Me.columnPrecioMes12 = MyBase.Columns("PrecioMes12")
            Me.columnDeprecMes1 = MyBase.Columns("DeprecMes1")
            Me.columnDeprecMes2 = MyBase.Columns("DeprecMes2")
            Me.columnDeprecMes3 = MyBase.Columns("DeprecMes3")
            Me.columnDeprecMes4 = MyBase.Columns("DeprecMes4")
            Me.columnDeprecMes5 = MyBase.Columns("DeprecMes5")
            Me.columnDeprecMes6 = MyBase.Columns("DeprecMes6")
            Me.columnDeprecMes7 = MyBase.Columns("DeprecMes7")
            Me.columnDeprecMes8 = MyBase.Columns("DeprecMes8")
            Me.columnDeprecMes9 = MyBase.Columns("DeprecMes9")
            Me.columnDeprecMes10 = MyBase.Columns("DeprecMes10")
            Me.columnDeprecMes11 = MyBase.Columns("DeprecMes11")
            Me.columnDeprecMes12 = MyBase.Columns("DeprecMes12")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnLista = New Global.System.Data.DataColumn("Lista", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLista)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnDepreciacion = New Global.System.Data.DataColumn("Depreciacion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepreciacion)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnSuplidor = New Global.System.Data.DataColumn("Suplidor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuplidor)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnPrecioMes1 = New Global.System.Data.DataColumn("PrecioMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes1)
            Me.columnPrecioMes2 = New Global.System.Data.DataColumn("PrecioMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes2)
            Me.columnPrecioMes3 = New Global.System.Data.DataColumn("PrecioMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes3)
            Me.columnPrecioMes4 = New Global.System.Data.DataColumn("PrecioMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes4)
            Me.columnPrecioMes5 = New Global.System.Data.DataColumn("PrecioMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes5)
            Me.columnPrecioMes6 = New Global.System.Data.DataColumn("PrecioMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes6)
            Me.columnPrecioMes7 = New Global.System.Data.DataColumn("PrecioMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes7)
            Me.columnPrecioMes8 = New Global.System.Data.DataColumn("PrecioMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes8)
            Me.columnPrecioMes9 = New Global.System.Data.DataColumn("PrecioMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes9)
            Me.columnPrecioMes10 = New Global.System.Data.DataColumn("PrecioMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes10)
            Me.columnPrecioMes11 = New Global.System.Data.DataColumn("PrecioMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes11)
            Me.columnPrecioMes12 = New Global.System.Data.DataColumn("PrecioMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12)
            Me.columnDeprecMes1 = New Global.System.Data.DataColumn("DeprecMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes1)
            Me.columnDeprecMes2 = New Global.System.Data.DataColumn("DeprecMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes2)
            Me.columnDeprecMes3 = New Global.System.Data.DataColumn("DeprecMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes3)
            Me.columnDeprecMes4 = New Global.System.Data.DataColumn("DeprecMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes4)
            Me.columnDeprecMes5 = New Global.System.Data.DataColumn("DeprecMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes5)
            Me.columnDeprecMes6 = New Global.System.Data.DataColumn("DeprecMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes6)
            Me.columnDeprecMes7 = New Global.System.Data.DataColumn("DeprecMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes7)
            Me.columnDeprecMes8 = New Global.System.Data.DataColumn("DeprecMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes8)
            Me.columnDeprecMes9 = New Global.System.Data.DataColumn("DeprecMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes9)
            Me.columnDeprecMes10 = New Global.System.Data.DataColumn("DeprecMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes10)
            Me.columnDeprecMes11 = New Global.System.Data.DataColumn("DeprecMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes11)
            Me.columnDeprecMes12 = New Global.System.Data.DataColumn("DeprecMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeprecMes12)
            Me.columnDescripcion.MaxLength = 55
            Me.columnUnidad.MaxLength = 5
            Me.columnSuplidor.MaxLength = 44
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMasterEqpRow() As MasterEqpRow
            Return CType(Me.NewRow,MasterEqpRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MasterEqpRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MasterEqpRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MasterEqpRowChangedEvent) Is Nothing) Then
                RaiseEvent MasterEqpRowChanged(Me, New MasterEqpRowChangeEvent(CType(e.Row,MasterEqpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MasterEqpRowChangingEvent) Is Nothing) Then
                RaiseEvent MasterEqpRowChanging(Me, New MasterEqpRowChangeEvent(CType(e.Row,MasterEqpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MasterEqpRowDeletedEvent) Is Nothing) Then
                RaiseEvent MasterEqpRowDeleted(Me, New MasterEqpRowChangeEvent(CType(e.Row,MasterEqpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MasterEqpRowDeletingEvent) Is Nothing) Then
                RaiseEvent MasterEqpRowDeleting(Me, New MasterEqpRowChangeEvent(CType(e.Row,MasterEqpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMasterEqpRow(ByVal row As MasterEqpRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MasterEqpDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MasterManoObraDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnJornal As Global.System.Data.DataColumn
        
        Private columnBono As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnJornalMes1 As Global.System.Data.DataColumn
        
        Private columnJornalMes2 As Global.System.Data.DataColumn
        
        Private columnJornalMes3 As Global.System.Data.DataColumn
        
        Private columnJornalMes4 As Global.System.Data.DataColumn
        
        Private columnJornalMes5 As Global.System.Data.DataColumn
        
        Private columnJornalMes6 As Global.System.Data.DataColumn
        
        Private columnJornalMes7 As Global.System.Data.DataColumn
        
        Private columnJornalMes8 As Global.System.Data.DataColumn
        
        Private columnJornalMes9 As Global.System.Data.DataColumn
        
        Private columnJornalMes10 As Global.System.Data.DataColumn
        
        Private columnJornalMes11 As Global.System.Data.DataColumn
        
        Private columnJornalMes12 As Global.System.Data.DataColumn
        
        Private columnBonoMes1 As Global.System.Data.DataColumn
        
        Private columnBonoMes2 As Global.System.Data.DataColumn
        
        Private columnBonoMes3 As Global.System.Data.DataColumn
        
        Private columnBonoMes4 As Global.System.Data.DataColumn
        
        Private columnBonoMes5 As Global.System.Data.DataColumn
        
        Private columnBonoMes6 As Global.System.Data.DataColumn
        
        Private columnBonoMes7 As Global.System.Data.DataColumn
        
        Private columnBonoMes8 As Global.System.Data.DataColumn
        
        Private columnBonoMes9 As Global.System.Data.DataColumn
        
        Private columnBonoMes10 As Global.System.Data.DataColumn
        
        Private columnBonoMes11 As Global.System.Data.DataColumn
        
        Private columnBonoMes12 As Global.System.Data.DataColumn
        
        Private columnJornal2daMoneda As Global.System.Data.DataColumn
        
        Private columnBono2daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnDiferenciaJornal As Global.System.Data.DataColumn
        
        Private columnDiferenciaBono As Global.System.Data.DataColumn
        
        Private columnPorcentajeJornal As Global.System.Data.DataColumn
        
        Private columnPorcentajeBono As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MasterManoObra"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jornal2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bono2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaJornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeJornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MasterManoObraRow
            Get
                Return CType(Me.Rows(index),MasterManoObraRow)
            End Get
        End Property
        
        Public Event MasterManoObraRowChanging As MasterManoObraRowChangeEventHandler
        
        Public Event MasterManoObraRowChanged As MasterManoObraRowChangeEventHandler
        
        Public Event MasterManoObraRowDeleting As MasterManoObraRowChangeEventHandler
        
        Public Event MasterManoObraRowDeleted As MasterManoObraRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMasterManoObraRow(ByVal row As MasterManoObraRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMasterManoObraRow( _
                    ByVal ID As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal Codigo As Double,  _
                    ByVal Unidad As String,  _
                    ByVal Fecha As Date,  _
                    ByVal Jornal As Double,  _
                    ByVal Bono As Double,  _
                    ByVal Tipo As Double,  _
                    ByVal JornalMes1 As Double,  _
                    ByVal JornalMes2 As Double,  _
                    ByVal JornalMes3 As Double,  _
                    ByVal JornalMes4 As Double,  _
                    ByVal JornalMes5 As Double,  _
                    ByVal JornalMes6 As Double,  _
                    ByVal JornalMes7 As Double,  _
                    ByVal JornalMes8 As Double,  _
                    ByVal JornalMes9 As Double,  _
                    ByVal JornalMes10 As Double,  _
                    ByVal JornalMes11 As Double,  _
                    ByVal JornalMes12 As Double,  _
                    ByVal BonoMes1 As Double,  _
                    ByVal BonoMes2 As Double,  _
                    ByVal BonoMes3 As Double,  _
                    ByVal BonoMes4 As Double,  _
                    ByVal BonoMes5 As Double,  _
                    ByVal BonoMes6 As Double,  _
                    ByVal BonoMes7 As Double,  _
                    ByVal BonoMes8 As Double,  _
                    ByVal BonoMes9 As Double,  _
                    ByVal BonoMes10 As Double,  _
                    ByVal BonoMes11 As Double,  _
                    ByVal BonoMes12 As Double,  _
                    ByVal Jornal2daMoneda As Double,  _
                    ByVal Bono2daMoneda As Double,  _
                    ByVal JornalMes12daMoneda As Double,  _
                    ByVal JornalMes22daMoneda As Double,  _
                    ByVal JornalMes32daMoneda As Double,  _
                    ByVal JornalMes42daMoneda As Double,  _
                    ByVal JornalMes52daMoneda As Double,  _
                    ByVal JornalMes62daMoneda As Double,  _
                    ByVal JornalMes72daMoneda As Double,  _
                    ByVal JornalMes82daMoneda As Double,  _
                    ByVal JornalMes92daMoneda As Double,  _
                    ByVal JornalMes102daMoneda As Double,  _
                    ByVal JornalMes112daMoneda As Double,  _
                    ByVal JornalMes122daMoneda As Double,  _
                    ByVal BonoMes12daMoneda As Double,  _
                    ByVal BonoMes22daMoneda As Double,  _
                    ByVal BonoMes32daMoneda As Double,  _
                    ByVal BonoMes42daMoneda As Double,  _
                    ByVal BonoMes52daMoneda As Double,  _
                    ByVal BonoMes62daMoneda As Double,  _
                    ByVal BonoMes72daMoneda As Double,  _
                    ByVal BonoMes82daMoneda As Double,  _
                    ByVal BonoMes92daMoneda As Double,  _
                    ByVal BonoMes102daMoneda As Double,  _
                    ByVal BonoMes112daMoneda As Double,  _
                    ByVal BonoMes122daMoneda As Double,  _
                    ByVal DiferenciaJornal As Double,  _
                    ByVal DiferenciaBono As Double,  _
                    ByVal PorcentajeJornal As Double,  _
                    ByVal PorcentajeBono As Double) As MasterManoObraRow
            Dim rowMasterManoObraRow As MasterManoObraRow = CType(Me.NewRow,MasterManoObraRow)
            Dim columnValuesArray() As Object = New Object() {ID, Descripcion, Codigo, Unidad, Fecha, Jornal, Bono, Tipo, JornalMes1, JornalMes2, JornalMes3, JornalMes4, JornalMes5, JornalMes6, JornalMes7, JornalMes8, JornalMes9, JornalMes10, JornalMes11, JornalMes12, BonoMes1, BonoMes2, BonoMes3, BonoMes4, BonoMes5, BonoMes6, BonoMes7, BonoMes8, BonoMes9, BonoMes10, BonoMes11, BonoMes12, Jornal2daMoneda, Bono2daMoneda, JornalMes12daMoneda, JornalMes22daMoneda, JornalMes32daMoneda, JornalMes42daMoneda, JornalMes52daMoneda, JornalMes62daMoneda, JornalMes72daMoneda, JornalMes82daMoneda, JornalMes92daMoneda, JornalMes102daMoneda, JornalMes112daMoneda, JornalMes122daMoneda, BonoMes12daMoneda, BonoMes22daMoneda, BonoMes32daMoneda, BonoMes42daMoneda, BonoMes52daMoneda, BonoMes62daMoneda, BonoMes72daMoneda, BonoMes82daMoneda, BonoMes92daMoneda, BonoMes102daMoneda, BonoMes112daMoneda, BonoMes122daMoneda, DiferenciaJornal, DiferenciaBono, PorcentajeJornal, PorcentajeBono}
            rowMasterManoObraRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMasterManoObraRow)
            Return rowMasterManoObraRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MasterManoObraDataTable = CType(MyBase.Clone,MasterManoObraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MasterManoObraDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnJornal = MyBase.Columns("Jornal")
            Me.columnBono = MyBase.Columns("Bono")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnJornalMes1 = MyBase.Columns("JornalMes1")
            Me.columnJornalMes2 = MyBase.Columns("JornalMes2")
            Me.columnJornalMes3 = MyBase.Columns("JornalMes3")
            Me.columnJornalMes4 = MyBase.Columns("JornalMes4")
            Me.columnJornalMes5 = MyBase.Columns("JornalMes5")
            Me.columnJornalMes6 = MyBase.Columns("JornalMes6")
            Me.columnJornalMes7 = MyBase.Columns("JornalMes7")
            Me.columnJornalMes8 = MyBase.Columns("JornalMes8")
            Me.columnJornalMes9 = MyBase.Columns("JornalMes9")
            Me.columnJornalMes10 = MyBase.Columns("JornalMes10")
            Me.columnJornalMes11 = MyBase.Columns("JornalMes11")
            Me.columnJornalMes12 = MyBase.Columns("JornalMes12")
            Me.columnBonoMes1 = MyBase.Columns("BonoMes1")
            Me.columnBonoMes2 = MyBase.Columns("BonoMes2")
            Me.columnBonoMes3 = MyBase.Columns("BonoMes3")
            Me.columnBonoMes4 = MyBase.Columns("BonoMes4")
            Me.columnBonoMes5 = MyBase.Columns("BonoMes5")
            Me.columnBonoMes6 = MyBase.Columns("BonoMes6")
            Me.columnBonoMes7 = MyBase.Columns("BonoMes7")
            Me.columnBonoMes8 = MyBase.Columns("BonoMes8")
            Me.columnBonoMes9 = MyBase.Columns("BonoMes9")
            Me.columnBonoMes10 = MyBase.Columns("BonoMes10")
            Me.columnBonoMes11 = MyBase.Columns("BonoMes11")
            Me.columnBonoMes12 = MyBase.Columns("BonoMes12")
            Me.columnJornal2daMoneda = MyBase.Columns("Jornal2daMoneda")
            Me.columnBono2daMoneda = MyBase.Columns("Bono2daMoneda")
            Me.columnJornalMes12daMoneda = MyBase.Columns("JornalMes12daMoneda")
            Me.columnJornalMes22daMoneda = MyBase.Columns("JornalMes22daMoneda")
            Me.columnJornalMes32daMoneda = MyBase.Columns("JornalMes32daMoneda")
            Me.columnJornalMes42daMoneda = MyBase.Columns("JornalMes42daMoneda")
            Me.columnJornalMes52daMoneda = MyBase.Columns("JornalMes52daMoneda")
            Me.columnJornalMes62daMoneda = MyBase.Columns("JornalMes62daMoneda")
            Me.columnJornalMes72daMoneda = MyBase.Columns("JornalMes72daMoneda")
            Me.columnJornalMes82daMoneda = MyBase.Columns("JornalMes82daMoneda")
            Me.columnJornalMes92daMoneda = MyBase.Columns("JornalMes92daMoneda")
            Me.columnJornalMes102daMoneda = MyBase.Columns("JornalMes102daMoneda")
            Me.columnJornalMes112daMoneda = MyBase.Columns("JornalMes112daMoneda")
            Me.columnJornalMes122daMoneda = MyBase.Columns("JornalMes122daMoneda")
            Me.columnBonoMes12daMoneda = MyBase.Columns("BonoMes12daMoneda")
            Me.columnBonoMes22daMoneda = MyBase.Columns("BonoMes22daMoneda")
            Me.columnBonoMes32daMoneda = MyBase.Columns("BonoMes32daMoneda")
            Me.columnBonoMes42daMoneda = MyBase.Columns("BonoMes42daMoneda")
            Me.columnBonoMes52daMoneda = MyBase.Columns("BonoMes52daMoneda")
            Me.columnBonoMes62daMoneda = MyBase.Columns("BonoMes62daMoneda")
            Me.columnBonoMes72daMoneda = MyBase.Columns("BonoMes72daMoneda")
            Me.columnBonoMes82daMoneda = MyBase.Columns("BonoMes82daMoneda")
            Me.columnBonoMes92daMoneda = MyBase.Columns("BonoMes92daMoneda")
            Me.columnBonoMes102daMoneda = MyBase.Columns("BonoMes102daMoneda")
            Me.columnBonoMes112daMoneda = MyBase.Columns("BonoMes112daMoneda")
            Me.columnBonoMes122daMoneda = MyBase.Columns("BonoMes122daMoneda")
            Me.columnDiferenciaJornal = MyBase.Columns("DiferenciaJornal")
            Me.columnDiferenciaBono = MyBase.Columns("DiferenciaBono")
            Me.columnPorcentajeJornal = MyBase.Columns("PorcentajeJornal")
            Me.columnPorcentajeBono = MyBase.Columns("PorcentajeBono")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnJornal = New Global.System.Data.DataColumn("Jornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal)
            Me.columnBono = New Global.System.Data.DataColumn("Bono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnJornalMes1 = New Global.System.Data.DataColumn("JornalMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes1)
            Me.columnJornalMes2 = New Global.System.Data.DataColumn("JornalMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes2)
            Me.columnJornalMes3 = New Global.System.Data.DataColumn("JornalMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes3)
            Me.columnJornalMes4 = New Global.System.Data.DataColumn("JornalMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes4)
            Me.columnJornalMes5 = New Global.System.Data.DataColumn("JornalMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes5)
            Me.columnJornalMes6 = New Global.System.Data.DataColumn("JornalMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes6)
            Me.columnJornalMes7 = New Global.System.Data.DataColumn("JornalMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes7)
            Me.columnJornalMes8 = New Global.System.Data.DataColumn("JornalMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes8)
            Me.columnJornalMes9 = New Global.System.Data.DataColumn("JornalMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes9)
            Me.columnJornalMes10 = New Global.System.Data.DataColumn("JornalMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes10)
            Me.columnJornalMes11 = New Global.System.Data.DataColumn("JornalMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes11)
            Me.columnJornalMes12 = New Global.System.Data.DataColumn("JornalMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes12)
            Me.columnBonoMes1 = New Global.System.Data.DataColumn("BonoMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes1)
            Me.columnBonoMes2 = New Global.System.Data.DataColumn("BonoMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes2)
            Me.columnBonoMes3 = New Global.System.Data.DataColumn("BonoMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes3)
            Me.columnBonoMes4 = New Global.System.Data.DataColumn("BonoMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes4)
            Me.columnBonoMes5 = New Global.System.Data.DataColumn("BonoMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes5)
            Me.columnBonoMes6 = New Global.System.Data.DataColumn("BonoMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes6)
            Me.columnBonoMes7 = New Global.System.Data.DataColumn("BonoMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes7)
            Me.columnBonoMes8 = New Global.System.Data.DataColumn("BonoMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes8)
            Me.columnBonoMes9 = New Global.System.Data.DataColumn("BonoMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes9)
            Me.columnBonoMes10 = New Global.System.Data.DataColumn("BonoMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes10)
            Me.columnBonoMes11 = New Global.System.Data.DataColumn("BonoMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes11)
            Me.columnBonoMes12 = New Global.System.Data.DataColumn("BonoMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes12)
            Me.columnJornal2daMoneda = New Global.System.Data.DataColumn("Jornal2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal2daMoneda)
            Me.columnBono2daMoneda = New Global.System.Data.DataColumn("Bono2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono2daMoneda)
            Me.columnJornalMes12daMoneda = New Global.System.Data.DataColumn("JornalMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes12daMoneda)
            Me.columnJornalMes22daMoneda = New Global.System.Data.DataColumn("JornalMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes22daMoneda)
            Me.columnJornalMes32daMoneda = New Global.System.Data.DataColumn("JornalMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes32daMoneda)
            Me.columnJornalMes42daMoneda = New Global.System.Data.DataColumn("JornalMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes42daMoneda)
            Me.columnJornalMes52daMoneda = New Global.System.Data.DataColumn("JornalMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes52daMoneda)
            Me.columnJornalMes62daMoneda = New Global.System.Data.DataColumn("JornalMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes62daMoneda)
            Me.columnJornalMes72daMoneda = New Global.System.Data.DataColumn("JornalMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes72daMoneda)
            Me.columnJornalMes82daMoneda = New Global.System.Data.DataColumn("JornalMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes82daMoneda)
            Me.columnJornalMes92daMoneda = New Global.System.Data.DataColumn("JornalMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes92daMoneda)
            Me.columnJornalMes102daMoneda = New Global.System.Data.DataColumn("JornalMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes102daMoneda)
            Me.columnJornalMes112daMoneda = New Global.System.Data.DataColumn("JornalMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes112daMoneda)
            Me.columnJornalMes122daMoneda = New Global.System.Data.DataColumn("JornalMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes122daMoneda)
            Me.columnBonoMes12daMoneda = New Global.System.Data.DataColumn("BonoMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes12daMoneda)
            Me.columnBonoMes22daMoneda = New Global.System.Data.DataColumn("BonoMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes22daMoneda)
            Me.columnBonoMes32daMoneda = New Global.System.Data.DataColumn("BonoMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes32daMoneda)
            Me.columnBonoMes42daMoneda = New Global.System.Data.DataColumn("BonoMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes42daMoneda)
            Me.columnBonoMes52daMoneda = New Global.System.Data.DataColumn("BonoMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes52daMoneda)
            Me.columnBonoMes62daMoneda = New Global.System.Data.DataColumn("BonoMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes62daMoneda)
            Me.columnBonoMes72daMoneda = New Global.System.Data.DataColumn("BonoMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes72daMoneda)
            Me.columnBonoMes82daMoneda = New Global.System.Data.DataColumn("BonoMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes82daMoneda)
            Me.columnBonoMes92daMoneda = New Global.System.Data.DataColumn("BonoMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes92daMoneda)
            Me.columnBonoMes102daMoneda = New Global.System.Data.DataColumn("BonoMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes102daMoneda)
            Me.columnBonoMes112daMoneda = New Global.System.Data.DataColumn("BonoMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes112daMoneda)
            Me.columnBonoMes122daMoneda = New Global.System.Data.DataColumn("BonoMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes122daMoneda)
            Me.columnDiferenciaJornal = New Global.System.Data.DataColumn("DiferenciaJornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaJornal)
            Me.columnDiferenciaBono = New Global.System.Data.DataColumn("DiferenciaBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaBono)
            Me.columnPorcentajeJornal = New Global.System.Data.DataColumn("PorcentajeJornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeJornal)
            Me.columnPorcentajeBono = New Global.System.Data.DataColumn("PorcentajeBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeBono)
            Me.columnDescripcion.MaxLength = 55
            Me.columnUnidad.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMasterManoObraRow() As MasterManoObraRow
            Return CType(Me.NewRow,MasterManoObraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MasterManoObraRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MasterManoObraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MasterManoObraRowChangedEvent) Is Nothing) Then
                RaiseEvent MasterManoObraRowChanged(Me, New MasterManoObraRowChangeEvent(CType(e.Row,MasterManoObraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MasterManoObraRowChangingEvent) Is Nothing) Then
                RaiseEvent MasterManoObraRowChanging(Me, New MasterManoObraRowChangeEvent(CType(e.Row,MasterManoObraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MasterManoObraRowDeletedEvent) Is Nothing) Then
                RaiseEvent MasterManoObraRowDeleted(Me, New MasterManoObraRowChangeEvent(CType(e.Row,MasterManoObraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MasterManoObraRowDeletingEvent) Is Nothing) Then
                RaiseEvent MasterManoObraRowDeleting(Me, New MasterManoObraRowChangeEvent(CType(e.Row,MasterManoObraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMasterManoObraRow(ByVal row As MasterManoObraRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MasterManoObraDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MasterMaterialDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnDiferencia As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnGrupoBCV As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnSuplidor As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPrecioMes1 As Global.System.Data.DataColumn
        
        Private columnPrecioMes2 As Global.System.Data.DataColumn
        
        Private columnPrecioMes3 As Global.System.Data.DataColumn
        
        Private columnPrecioMes4 As Global.System.Data.DataColumn
        
        Private columnPrecioMes5 As Global.System.Data.DataColumn
        
        Private columnPrecioMes6 As Global.System.Data.DataColumn
        
        Private columnPrecioMes7 As Global.System.Data.DataColumn
        
        Private columnPrecioMes8 As Global.System.Data.DataColumn
        
        Private columnPrecioMes9 As Global.System.Data.DataColumn
        
        Private columnPrecioMes10 As Global.System.Data.DataColumn
        
        Private columnPrecioMes11 As Global.System.Data.DataColumn
        
        Private columnPrecioMes12 As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario As Global.System.Data.DataColumn
        
        Private columnPorcentajeDiferencia As Global.System.Data.DataColumn
        
        Private columnPrecioMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario2daMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MasterMaterial"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrupoBCVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrupoBCV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuplidorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuplidor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitario2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MasterMaterialRow
            Get
                Return CType(Me.Rows(index),MasterMaterialRow)
            End Get
        End Property
        
        Public Event MasterMaterialRowChanging As MasterMaterialRowChangeEventHandler
        
        Public Event MasterMaterialRowChanged As MasterMaterialRowChangeEventHandler
        
        Public Event MasterMaterialRowDeleting As MasterMaterialRowChangeEventHandler
        
        Public Event MasterMaterialRowDeleted As MasterMaterialRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMasterMaterialRow(ByVal row As MasterMaterialRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMasterMaterialRow( _
                    ByVal Codigo As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal Diferencia As Double,  _
                    ByVal Fecha As Date,  _
                    ByVal GrupoBCV As Double,  _
                    ByVal Unidad As String,  _
                    ByVal Suplidor As String,  _
                    ByVal Tipo As Double,  _
                    ByVal ID As Double,  _
                    ByVal PrecioMes1 As Double,  _
                    ByVal PrecioMes2 As Double,  _
                    ByVal PrecioMes3 As Double,  _
                    ByVal PrecioMes4 As Double,  _
                    ByVal PrecioMes5 As Double,  _
                    ByVal PrecioMes6 As Double,  _
                    ByVal PrecioMes7 As Double,  _
                    ByVal PrecioMes8 As Double,  _
                    ByVal PrecioMes9 As Double,  _
                    ByVal PrecioMes10 As Double,  _
                    ByVal PrecioMes11 As Double,  _
                    ByVal PrecioMes12 As Double,  _
                    ByVal PrecioUnitario As Double,  _
                    ByVal PorcentajeDiferencia As String,  _
                    ByVal PrecioMes12daMoneda As Double,  _
                    ByVal PrecioMes22daMoneda As Double,  _
                    ByVal PrecioMes32daMoneda As Double,  _
                    ByVal PrecioMes42daMoneda As Double,  _
                    ByVal PrecioMes52daMoneda As Double,  _
                    ByVal PrecioMes62daMoneda As Double,  _
                    ByVal PrecioMes72daMoneda As Double,  _
                    ByVal PrecioMes82daMoneda As Double,  _
                    ByVal PrecioMes92daMoneda As Double,  _
                    ByVal PrecioMes102daMoneda As Double,  _
                    ByVal PrecioMes112daMoneda As Double,  _
                    ByVal PrecioMes122daMoneda As Double,  _
                    ByVal PrecioUnitario2daMoneda As Double) As MasterMaterialRow
            Dim rowMasterMaterialRow As MasterMaterialRow = CType(Me.NewRow,MasterMaterialRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Descripcion, Diferencia, Fecha, GrupoBCV, Unidad, Suplidor, Tipo, ID, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, PrecioUnitario, PorcentajeDiferencia, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, PrecioMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, PrecioMes112daMoneda, PrecioMes122daMoneda, PrecioUnitario2daMoneda}
            rowMasterMaterialRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMasterMaterialRow)
            Return rowMasterMaterialRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MasterMaterialDataTable = CType(MyBase.Clone,MasterMaterialDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MasterMaterialDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnDiferencia = MyBase.Columns("Diferencia")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnGrupoBCV = MyBase.Columns("GrupoBCV")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnSuplidor = MyBase.Columns("Suplidor")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnID = MyBase.Columns("ID")
            Me.columnPrecioMes1 = MyBase.Columns("PrecioMes1")
            Me.columnPrecioMes2 = MyBase.Columns("PrecioMes2")
            Me.columnPrecioMes3 = MyBase.Columns("PrecioMes3")
            Me.columnPrecioMes4 = MyBase.Columns("PrecioMes4")
            Me.columnPrecioMes5 = MyBase.Columns("PrecioMes5")
            Me.columnPrecioMes6 = MyBase.Columns("PrecioMes6")
            Me.columnPrecioMes7 = MyBase.Columns("PrecioMes7")
            Me.columnPrecioMes8 = MyBase.Columns("PrecioMes8")
            Me.columnPrecioMes9 = MyBase.Columns("PrecioMes9")
            Me.columnPrecioMes10 = MyBase.Columns("PrecioMes10")
            Me.columnPrecioMes11 = MyBase.Columns("PrecioMes11")
            Me.columnPrecioMes12 = MyBase.Columns("PrecioMes12")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnPorcentajeDiferencia = MyBase.Columns("PorcentajeDiferencia")
            Me.columnPrecioMes12daMoneda = MyBase.Columns("PrecioMes12daMoneda")
            Me.columnPrecioMes22daMoneda = MyBase.Columns("PrecioMes22daMoneda")
            Me.columnPrecioMes32daMoneda = MyBase.Columns("PrecioMes32daMoneda")
            Me.columnPrecioMes42daMoneda = MyBase.Columns("PrecioMes42daMoneda")
            Me.columnPrecioMes52daMoneda = MyBase.Columns("PrecioMes52daMoneda")
            Me.columnPrecioMes62daMoneda = MyBase.Columns("PrecioMes62daMoneda")
            Me.columnPrecioMes72daMoneda = MyBase.Columns("PrecioMes72daMoneda")
            Me.columnPrecioMes82daMoneda = MyBase.Columns("PrecioMes82daMoneda")
            Me.columnPrecioMes92daMoneda = MyBase.Columns("PrecioMes92daMoneda")
            Me.columnPrecioMes102daMoneda = MyBase.Columns("PrecioMes102daMoneda")
            Me.columnPrecioMes112daMoneda = MyBase.Columns("PrecioMes112daMoneda")
            Me.columnPrecioMes122daMoneda = MyBase.Columns("PrecioMes122daMoneda")
            Me.columnPrecioUnitario2daMoneda = MyBase.Columns("PrecioUnitario2daMoneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnDiferencia = New Global.System.Data.DataColumn("Diferencia", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferencia)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnGrupoBCV = New Global.System.Data.DataColumn("GrupoBCV", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrupoBCV)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnSuplidor = New Global.System.Data.DataColumn("Suplidor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuplidor)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPrecioMes1 = New Global.System.Data.DataColumn("PrecioMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes1)
            Me.columnPrecioMes2 = New Global.System.Data.DataColumn("PrecioMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes2)
            Me.columnPrecioMes3 = New Global.System.Data.DataColumn("PrecioMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes3)
            Me.columnPrecioMes4 = New Global.System.Data.DataColumn("PrecioMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes4)
            Me.columnPrecioMes5 = New Global.System.Data.DataColumn("PrecioMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes5)
            Me.columnPrecioMes6 = New Global.System.Data.DataColumn("PrecioMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes6)
            Me.columnPrecioMes7 = New Global.System.Data.DataColumn("PrecioMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes7)
            Me.columnPrecioMes8 = New Global.System.Data.DataColumn("PrecioMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes8)
            Me.columnPrecioMes9 = New Global.System.Data.DataColumn("PrecioMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes9)
            Me.columnPrecioMes10 = New Global.System.Data.DataColumn("PrecioMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes10)
            Me.columnPrecioMes11 = New Global.System.Data.DataColumn("PrecioMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes11)
            Me.columnPrecioMes12 = New Global.System.Data.DataColumn("PrecioMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12)
            Me.columnPrecioUnitario = New Global.System.Data.DataColumn("PrecioUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnPorcentajeDiferencia = New Global.System.Data.DataColumn("PorcentajeDiferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDiferencia)
            Me.columnPrecioMes12daMoneda = New Global.System.Data.DataColumn("PrecioMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12daMoneda)
            Me.columnPrecioMes22daMoneda = New Global.System.Data.DataColumn("PrecioMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes22daMoneda)
            Me.columnPrecioMes32daMoneda = New Global.System.Data.DataColumn("PrecioMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes32daMoneda)
            Me.columnPrecioMes42daMoneda = New Global.System.Data.DataColumn("PrecioMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes42daMoneda)
            Me.columnPrecioMes52daMoneda = New Global.System.Data.DataColumn("PrecioMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes52daMoneda)
            Me.columnPrecioMes62daMoneda = New Global.System.Data.DataColumn("PrecioMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes62daMoneda)
            Me.columnPrecioMes72daMoneda = New Global.System.Data.DataColumn("PrecioMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes72daMoneda)
            Me.columnPrecioMes82daMoneda = New Global.System.Data.DataColumn("PrecioMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes82daMoneda)
            Me.columnPrecioMes92daMoneda = New Global.System.Data.DataColumn("PrecioMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes92daMoneda)
            Me.columnPrecioMes102daMoneda = New Global.System.Data.DataColumn("PrecioMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes102daMoneda)
            Me.columnPrecioMes112daMoneda = New Global.System.Data.DataColumn("PrecioMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes112daMoneda)
            Me.columnPrecioMes122daMoneda = New Global.System.Data.DataColumn("PrecioMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes122daMoneda)
            Me.columnPrecioUnitario2daMoneda = New Global.System.Data.DataColumn("PrecioUnitario2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario2daMoneda)
            Me.columnDescripcion.MaxLength = 55
            Me.columnUnidad.MaxLength = 5
            Me.columnSuplidor.MaxLength = 48
            Me.columnPorcentajeDiferencia.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMasterMaterialRow() As MasterMaterialRow
            Return CType(Me.NewRow,MasterMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MasterMaterialRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MasterMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MasterMaterialRowChangedEvent) Is Nothing) Then
                RaiseEvent MasterMaterialRowChanged(Me, New MasterMaterialRowChangeEvent(CType(e.Row,MasterMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MasterMaterialRowChangingEvent) Is Nothing) Then
                RaiseEvent MasterMaterialRowChanging(Me, New MasterMaterialRowChangeEvent(CType(e.Row,MasterMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MasterMaterialRowDeletedEvent) Is Nothing) Then
                RaiseEvent MasterMaterialRowDeleted(Me, New MasterMaterialRowChangeEvent(CType(e.Row,MasterMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MasterMaterialRowDeletingEvent) Is Nothing) Then
                RaiseEvent MasterMaterialRowDeleting(Me, New MasterMaterialRowChangeEvent(CType(e.Row,MasterMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMasterMaterialRow(ByVal row As MasterMaterialRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MasterMaterialDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MasterPartBsSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnCodParL As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescripcion1 As Global.System.Data.DataColumn
        
        Private columnDescripcion2 As Global.System.Data.DataColumn
        
        Private columnDescripcion3 As Global.System.Data.DataColumn
        
        Private columnCodigoCovenin As Global.System.Data.DataColumn
        
        Private columnMiniDescripcion As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnCantridadPartida As Global.System.Data.DataColumn
        
        Private columnRendimiento As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario As Global.System.Data.DataColumn
        
        Private columnPrecioAdoptado As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario2Mon As Global.System.Data.DataColumn
        
        Private columnPrecioAdoptado2Mon As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MasterPartBsS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodParLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodParL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCoveninColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCovenin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiniDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiniDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantridadPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantridadPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RendimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRendimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioAdoptadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioAdoptado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitario2MonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario2Mon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioAdoptado2MonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioAdoptado2Mon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MasterPartBsSRow
            Get
                Return CType(Me.Rows(index),MasterPartBsSRow)
            End Get
        End Property
        
        Public Event MasterPartBsSRowChanging As MasterPartBsSRowChangeEventHandler
        
        Public Event MasterPartBsSRowChanged As MasterPartBsSRowChangeEventHandler
        
        Public Event MasterPartBsSRowDeleting As MasterPartBsSRowChangeEventHandler
        
        Public Event MasterPartBsSRowDeleted As MasterPartBsSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMasterPartBsSRow(ByVal row As MasterPartBsSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMasterPartBsSRow( _
                    ByVal Codigo As Double,  _
                    ByVal CodParL As String,  _
                    ByVal ID As Double,  _
                    ByVal Descripcion1 As String,  _
                    ByVal Descripcion2 As String,  _
                    ByVal Descripcion3 As String,  _
                    ByVal CodigoCovenin As String,  _
                    ByVal MiniDescripcion As String,  _
                    ByVal Fecha As Date,  _
                    ByVal CantridadPartida As Double,  _
                    ByVal Rendimiento As Double,  _
                    ByVal Unidad As String,  _
                    ByVal PrecioUnitario As Double,  _
                    ByVal PrecioAdoptado As Double,  _
                    ByVal PrecioUnitario2Mon As Double,  _
                    ByVal PrecioAdoptado2Mon As Double) As MasterPartBsSRow
            Dim rowMasterPartBsSRow As MasterPartBsSRow = CType(Me.NewRow,MasterPartBsSRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, CodParL, ID, Descripcion1, Descripcion2, Descripcion3, CodigoCovenin, MiniDescripcion, Fecha, CantridadPartida, Rendimiento, Unidad, PrecioUnitario, PrecioAdoptado, PrecioUnitario2Mon, PrecioAdoptado2Mon}
            rowMasterPartBsSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMasterPartBsSRow)
            Return rowMasterPartBsSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MasterPartBsSDataTable = CType(MyBase.Clone,MasterPartBsSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MasterPartBsSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnCodParL = MyBase.Columns("CodParL")
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescripcion1 = MyBase.Columns("Descripcion1")
            Me.columnDescripcion2 = MyBase.Columns("Descripcion2")
            Me.columnDescripcion3 = MyBase.Columns("Descripcion3")
            Me.columnCodigoCovenin = MyBase.Columns("CodigoCovenin")
            Me.columnMiniDescripcion = MyBase.Columns("MiniDescripcion")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnCantridadPartida = MyBase.Columns("CantridadPartida")
            Me.columnRendimiento = MyBase.Columns("Rendimiento")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnPrecioAdoptado = MyBase.Columns("PrecioAdoptado")
            Me.columnPrecioUnitario2Mon = MyBase.Columns("PrecioUnitario2Mon")
            Me.columnPrecioAdoptado2Mon = MyBase.Columns("PrecioAdoptado2Mon")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnCodParL = New Global.System.Data.DataColumn("CodParL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodParL)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescripcion1 = New Global.System.Data.DataColumn("Descripcion1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion1)
            Me.columnDescripcion2 = New Global.System.Data.DataColumn("Descripcion2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion2)
            Me.columnDescripcion3 = New Global.System.Data.DataColumn("Descripcion3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion3)
            Me.columnCodigoCovenin = New Global.System.Data.DataColumn("CodigoCovenin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCovenin)
            Me.columnMiniDescripcion = New Global.System.Data.DataColumn("MiniDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiniDescripcion)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnCantridadPartida = New Global.System.Data.DataColumn("CantridadPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantridadPartida)
            Me.columnRendimiento = New Global.System.Data.DataColumn("Rendimiento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRendimiento)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnPrecioUnitario = New Global.System.Data.DataColumn("PrecioUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnPrecioAdoptado = New Global.System.Data.DataColumn("PrecioAdoptado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioAdoptado)
            Me.columnPrecioUnitario2Mon = New Global.System.Data.DataColumn("PrecioUnitario2Mon", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario2Mon)
            Me.columnPrecioAdoptado2Mon = New Global.System.Data.DataColumn("PrecioAdoptado2Mon", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioAdoptado2Mon)
            Me.columnCodParL.MaxLength = 8
            Me.columnDescripcion1.MaxLength = 70
            Me.columnDescripcion2.MaxLength = 70
            Me.columnDescripcion3.MaxLength = 70
            Me.columnCodigoCovenin.MaxLength = 15
            Me.columnMiniDescripcion.MaxLength = 60
            Me.columnUnidad.MaxLength = 7
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMasterPartBsSRow() As MasterPartBsSRow
            Return CType(Me.NewRow,MasterPartBsSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MasterPartBsSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MasterPartBsSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MasterPartBsSRowChangedEvent) Is Nothing) Then
                RaiseEvent MasterPartBsSRowChanged(Me, New MasterPartBsSRowChangeEvent(CType(e.Row,MasterPartBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MasterPartBsSRowChangingEvent) Is Nothing) Then
                RaiseEvent MasterPartBsSRowChanging(Me, New MasterPartBsSRowChangeEvent(CType(e.Row,MasterPartBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MasterPartBsSRowDeletedEvent) Is Nothing) Then
                RaiseEvent MasterPartBsSRowDeleted(Me, New MasterPartBsSRowChangeEvent(CType(e.Row,MasterPartBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MasterPartBsSRowDeletingEvent) Is Nothing) Then
                RaiseEvent MasterPartBsSRowDeleting(Me, New MasterPartBsSRowChangeEvent(CType(e.Row,MasterPartBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMasterPartBsSRow(ByVal row As MasterPartBsSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MasterPartBsSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MasterPartidasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnCodParL As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescripcion1 As Global.System.Data.DataColumn
        
        Private columnDescripcion2 As Global.System.Data.DataColumn
        
        Private columnDescripcion3 As Global.System.Data.DataColumn
        
        Private columnCodigoCovenin As Global.System.Data.DataColumn
        
        Private columnMiniDescripcion As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnCantridadPartida As Global.System.Data.DataColumn
        
        Private columnRendimiento As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario As Global.System.Data.DataColumn
        
        Private columnPrecioAdoptado As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario2Mon As Global.System.Data.DataColumn
        
        Private columnPrecioAdoptado2Mon As Global.System.Data.DataColumn
        
        Private columnF17 As Global.System.Data.DataColumn
        
        Private columnF18 As Global.System.Data.DataColumn
        
        Private columnF19 As Global.System.Data.DataColumn
        
        Private columnF20 As Global.System.Data.DataColumn
        
        Private columnF21 As Global.System.Data.DataColumn
        
        Private columnF22 As Global.System.Data.DataColumn
        
        Private columnF23 As Global.System.Data.DataColumn
        
        Private columnF24 As Global.System.Data.DataColumn
        
        Private columnF25 As Global.System.Data.DataColumn
        
        Private columnF26 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MasterPartidas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodParLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodParL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCoveninColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCovenin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiniDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiniDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantridadPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantridadPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RendimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRendimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioAdoptadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioAdoptado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitario2MonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario2Mon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioAdoptado2MonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioAdoptado2Mon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F17Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF17
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F18Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF18
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F19Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF19
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F20Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF20
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F21Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF21
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F22Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF22
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F23Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF23
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F24Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF24
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F25Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF25
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F26Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF26
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MasterPartidasRow
            Get
                Return CType(Me.Rows(index),MasterPartidasRow)
            End Get
        End Property
        
        Public Event MasterPartidasRowChanging As MasterPartidasRowChangeEventHandler
        
        Public Event MasterPartidasRowChanged As MasterPartidasRowChangeEventHandler
        
        Public Event MasterPartidasRowDeleting As MasterPartidasRowChangeEventHandler
        
        Public Event MasterPartidasRowDeleted As MasterPartidasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMasterPartidasRow(ByVal row As MasterPartidasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMasterPartidasRow( _
                    ByVal Codigo As Double,  _
                    ByVal CodParL As String,  _
                    ByVal ID As Double,  _
                    ByVal Descripcion1 As String,  _
                    ByVal Descripcion2 As String,  _
                    ByVal Descripcion3 As String,  _
                    ByVal CodigoCovenin As String,  _
                    ByVal MiniDescripcion As String,  _
                    ByVal Fecha As Date,  _
                    ByVal CantridadPartida As Double,  _
                    ByVal Rendimiento As Double,  _
                    ByVal Unidad As String,  _
                    ByVal PrecioUnitario As Double,  _
                    ByVal PrecioAdoptado As Double,  _
                    ByVal PrecioUnitario2Mon As Double,  _
                    ByVal PrecioAdoptado2Mon As Double,  _
                    ByVal F17 As Double,  _
                    ByVal F18 As Double,  _
                    ByVal F19 As Double,  _
                    ByVal F20 As Double,  _
                    ByVal F21 As Double,  _
                    ByVal F22 As Double,  _
                    ByVal F23 As Double,  _
                    ByVal F24 As Double,  _
                    ByVal F25 As String,  _
                    ByVal F26 As String) As MasterPartidasRow
            Dim rowMasterPartidasRow As MasterPartidasRow = CType(Me.NewRow,MasterPartidasRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, CodParL, ID, Descripcion1, Descripcion2, Descripcion3, CodigoCovenin, MiniDescripcion, Fecha, CantridadPartida, Rendimiento, Unidad, PrecioUnitario, PrecioAdoptado, PrecioUnitario2Mon, PrecioAdoptado2Mon, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26}
            rowMasterPartidasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMasterPartidasRow)
            Return rowMasterPartidasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MasterPartidasDataTable = CType(MyBase.Clone,MasterPartidasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MasterPartidasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnCodParL = MyBase.Columns("CodParL")
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescripcion1 = MyBase.Columns("Descripcion1")
            Me.columnDescripcion2 = MyBase.Columns("Descripcion2")
            Me.columnDescripcion3 = MyBase.Columns("Descripcion3")
            Me.columnCodigoCovenin = MyBase.Columns("CodigoCovenin")
            Me.columnMiniDescripcion = MyBase.Columns("MiniDescripcion")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnCantridadPartida = MyBase.Columns("CantridadPartida")
            Me.columnRendimiento = MyBase.Columns("Rendimiento")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnPrecioAdoptado = MyBase.Columns("PrecioAdoptado")
            Me.columnPrecioUnitario2Mon = MyBase.Columns("PrecioUnitario2Mon")
            Me.columnPrecioAdoptado2Mon = MyBase.Columns("PrecioAdoptado2Mon")
            Me.columnF17 = MyBase.Columns("F17")
            Me.columnF18 = MyBase.Columns("F18")
            Me.columnF19 = MyBase.Columns("F19")
            Me.columnF20 = MyBase.Columns("F20")
            Me.columnF21 = MyBase.Columns("F21")
            Me.columnF22 = MyBase.Columns("F22")
            Me.columnF23 = MyBase.Columns("F23")
            Me.columnF24 = MyBase.Columns("F24")
            Me.columnF25 = MyBase.Columns("F25")
            Me.columnF26 = MyBase.Columns("F26")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnCodParL = New Global.System.Data.DataColumn("CodParL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodParL)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescripcion1 = New Global.System.Data.DataColumn("Descripcion1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion1)
            Me.columnDescripcion2 = New Global.System.Data.DataColumn("Descripcion2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion2)
            Me.columnDescripcion3 = New Global.System.Data.DataColumn("Descripcion3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion3)
            Me.columnCodigoCovenin = New Global.System.Data.DataColumn("CodigoCovenin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCovenin)
            Me.columnMiniDescripcion = New Global.System.Data.DataColumn("MiniDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiniDescripcion)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnCantridadPartida = New Global.System.Data.DataColumn("CantridadPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantridadPartida)
            Me.columnRendimiento = New Global.System.Data.DataColumn("Rendimiento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRendimiento)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnPrecioUnitario = New Global.System.Data.DataColumn("PrecioUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnPrecioAdoptado = New Global.System.Data.DataColumn("PrecioAdoptado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioAdoptado)
            Me.columnPrecioUnitario2Mon = New Global.System.Data.DataColumn("PrecioUnitario2Mon", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario2Mon)
            Me.columnPrecioAdoptado2Mon = New Global.System.Data.DataColumn("PrecioAdoptado2Mon", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioAdoptado2Mon)
            Me.columnF17 = New Global.System.Data.DataColumn("F17", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF17)
            Me.columnF18 = New Global.System.Data.DataColumn("F18", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF18)
            Me.columnF19 = New Global.System.Data.DataColumn("F19", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF19)
            Me.columnF20 = New Global.System.Data.DataColumn("F20", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF20)
            Me.columnF21 = New Global.System.Data.DataColumn("F21", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF21)
            Me.columnF22 = New Global.System.Data.DataColumn("F22", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF22)
            Me.columnF23 = New Global.System.Data.DataColumn("F23", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF23)
            Me.columnF24 = New Global.System.Data.DataColumn("F24", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF24)
            Me.columnF25 = New Global.System.Data.DataColumn("F25", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF25)
            Me.columnF26 = New Global.System.Data.DataColumn("F26", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF26)
            Me.columnCodParL.MaxLength = 14
            Me.columnDescripcion1.MaxLength = 70
            Me.columnDescripcion2.MaxLength = 70
            Me.columnDescripcion3.MaxLength = 70
            Me.columnCodigoCovenin.MaxLength = 15
            Me.columnMiniDescripcion.MaxLength = 60
            Me.columnUnidad.MaxLength = 7
            Me.columnF25.MaxLength = 1
            Me.columnF26.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMasterPartidasRow() As MasterPartidasRow
            Return CType(Me.NewRow,MasterPartidasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MasterPartidasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MasterPartidasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MasterPartidasRowChangedEvent) Is Nothing) Then
                RaiseEvent MasterPartidasRowChanged(Me, New MasterPartidasRowChangeEvent(CType(e.Row,MasterPartidasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MasterPartidasRowChangingEvent) Is Nothing) Then
                RaiseEvent MasterPartidasRowChanging(Me, New MasterPartidasRowChangeEvent(CType(e.Row,MasterPartidasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MasterPartidasRowDeletedEvent) Is Nothing) Then
                RaiseEvent MasterPartidasRowDeleted(Me, New MasterPartidasRowChangeEvent(CType(e.Row,MasterPartidasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MasterPartidasRowDeletingEvent) Is Nothing) Then
                RaiseEvent MasterPartidasRowDeleting(Me, New MasterPartidasRowChangeEvent(CType(e.Row,MasterPartidasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMasterPartidasRow(ByVal row As MasterPartidasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MasterPartidasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class materialCompDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnLista As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCodInterno As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "materialComp"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLista
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As materialCompRow
            Get
                Return CType(Me.Rows(index),materialCompRow)
            End Get
        End Property
        
        Public Event materialCompRowChanging As materialCompRowChangeEventHandler
        
        Public Event materialCompRowChanged As materialCompRowChangeEventHandler
        
        Public Event materialCompRowDeleting As materialCompRowChangeEventHandler
        
        Public Event materialCompRowDeleted As materialCompRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddmaterialCompRow(ByVal row As materialCompRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddmaterialCompRow(ByVal Codigo As Double, ByVal Lista As Double, ByVal ID As Double, ByVal CodInterno As Double, ByVal Descripcion As String, ByVal Unidad As String, ByVal Cantidad As Double, ByVal Precio As Double) As materialCompRow
            Dim rowmaterialCompRow As materialCompRow = CType(Me.NewRow,materialCompRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Lista, ID, CodInterno, Descripcion, Unidad, Cantidad, Precio}
            rowmaterialCompRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmaterialCompRow)
            Return rowmaterialCompRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As materialCompDataTable = CType(MyBase.Clone,materialCompDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New materialCompDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnLista = MyBase.Columns("Lista")
            Me.columnID = MyBase.Columns("ID")
            Me.columnCodInterno = MyBase.Columns("CodInterno")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnPrecio = MyBase.Columns("Precio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnLista = New Global.System.Data.DataColumn("Lista", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLista)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCodInterno = New Global.System.Data.DataColumn("CodInterno", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodInterno)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnDescripcion.MaxLength = 55
            Me.columnUnidad.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewmaterialCompRow() As materialCompRow
            Return CType(Me.NewRow,materialCompRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New materialCompRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(materialCompRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.materialCompRowChangedEvent) Is Nothing) Then
                RaiseEvent materialCompRowChanged(Me, New materialCompRowChangeEvent(CType(e.Row,materialCompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.materialCompRowChangingEvent) Is Nothing) Then
                RaiseEvent materialCompRowChanging(Me, New materialCompRowChangeEvent(CType(e.Row,materialCompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.materialCompRowDeletedEvent) Is Nothing) Then
                RaiseEvent materialCompRowDeleted(Me, New materialCompRowChangeEvent(CType(e.Row,materialCompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.materialCompRowDeletingEvent) Is Nothing) Then
                RaiseEvent materialCompRowDeleting(Me, New materialCompRowChangeEvent(CType(e.Row,materialCompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovematerialCompRow(ByVal row As materialCompRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "materialCompDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MatImpLDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnCodMatL As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnDiferencia As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnGrupoBCV As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnSuplidor As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario As Global.System.Data.DataColumn
        
        Private columnPrecioMes1 As Global.System.Data.DataColumn
        
        Private columnPrecioMes2 As Global.System.Data.DataColumn
        
        Private columnPrecioMes3 As Global.System.Data.DataColumn
        
        Private columnPrecioMes4 As Global.System.Data.DataColumn
        
        Private columnPrecioMes5 As Global.System.Data.DataColumn
        
        Private columnPrecioMes6 As Global.System.Data.DataColumn
        
        Private columnPrecioMes7 As Global.System.Data.DataColumn
        
        Private columnPrecioMes8 As Global.System.Data.DataColumn
        
        Private columnPrecioMes9 As Global.System.Data.DataColumn
        
        Private columnPrecioMes10 As Global.System.Data.DataColumn
        
        Private columnPrecioMes11 As Global.System.Data.DataColumn
        
        Private columnPrecioMes12 As Global.System.Data.DataColumn
        
        Private columnPorcentajeDiferencia As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario2daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes122daMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MatImpL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMatLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMatL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrupoBCVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrupoBCV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuplidorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuplidor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitario2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MatImpLRow
            Get
                Return CType(Me.Rows(index),MatImpLRow)
            End Get
        End Property
        
        Public Event MatImpLRowChanging As MatImpLRowChangeEventHandler
        
        Public Event MatImpLRowChanged As MatImpLRowChangeEventHandler
        
        Public Event MatImpLRowDeleting As MatImpLRowChangeEventHandler
        
        Public Event MatImpLRowDeleted As MatImpLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMatImpLRow(ByVal row As MatImpLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMatImpLRow( _
                    ByVal Codigo As Double,  _
                    ByVal CodMatL As String,  _
                    ByVal Descripcion As String,  _
                    ByVal Diferencia As String,  _
                    ByVal Fecha As Date,  _
                    ByVal GrupoBCV As Double,  _
                    ByVal Unidad As String,  _
                    ByVal Suplidor As String,  _
                    ByVal Tipo As Double,  _
                    ByVal ID As Double,  _
                    ByVal PrecioUnitario As Double,  _
                    ByVal PrecioMes1 As Double,  _
                    ByVal PrecioMes2 As Double,  _
                    ByVal PrecioMes3 As Double,  _
                    ByVal PrecioMes4 As Double,  _
                    ByVal PrecioMes5 As Double,  _
                    ByVal PrecioMes6 As Double,  _
                    ByVal PrecioMes7 As Double,  _
                    ByVal PrecioMes8 As Double,  _
                    ByVal PrecioMes9 As Double,  _
                    ByVal PrecioMes10 As Double,  _
                    ByVal PrecioMes11 As Double,  _
                    ByVal PrecioMes12 As Double,  _
                    ByVal PorcentajeDiferencia As String,  _
                    ByVal PrecioUnitario2daMoneda As Double,  _
                    ByVal PrecioMes12daMoneda As Double,  _
                    ByVal PrecioMes22daMoneda As Double,  _
                    ByVal PrecioMes32daMoneda As Double,  _
                    ByVal PrecioMes42daMoneda As Double,  _
                    ByVal PrecioMes52daMoneda As Double,  _
                    ByVal PrecioMes62daMoneda As Double,  _
                    ByVal PrecioMes72daMoneda As Double,  _
                    ByVal PrecioMes82daMoneda As Double,  _
                    ByVal PrecioMes92daMoneda As Double,  _
                    ByVal PrecioMes102daMoneda As Double,  _
                    ByVal PrecioMes112daMoneda As Double,  _
                    ByVal PrecioMes122daMoneda As Double) As MatImpLRow
            Dim rowMatImpLRow As MatImpLRow = CType(Me.NewRow,MatImpLRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, CodMatL, Descripcion, Diferencia, Fecha, GrupoBCV, Unidad, Suplidor, Tipo, ID, PrecioUnitario, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, PorcentajeDiferencia, PrecioUnitario2daMoneda, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, PrecioMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, PrecioMes112daMoneda, PrecioMes122daMoneda}
            rowMatImpLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMatImpLRow)
            Return rowMatImpLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MatImpLDataTable = CType(MyBase.Clone,MatImpLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MatImpLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnCodMatL = MyBase.Columns("CodMatL")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnDiferencia = MyBase.Columns("Diferencia")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnGrupoBCV = MyBase.Columns("GrupoBCV")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnSuplidor = MyBase.Columns("Suplidor")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnID = MyBase.Columns("ID")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnPrecioMes1 = MyBase.Columns("PrecioMes1")
            Me.columnPrecioMes2 = MyBase.Columns("PrecioMes2")
            Me.columnPrecioMes3 = MyBase.Columns("PrecioMes3")
            Me.columnPrecioMes4 = MyBase.Columns("PrecioMes4")
            Me.columnPrecioMes5 = MyBase.Columns("PrecioMes5")
            Me.columnPrecioMes6 = MyBase.Columns("PrecioMes6")
            Me.columnPrecioMes7 = MyBase.Columns("PrecioMes7")
            Me.columnPrecioMes8 = MyBase.Columns("PrecioMes8")
            Me.columnPrecioMes9 = MyBase.Columns("PrecioMes9")
            Me.columnPrecioMes10 = MyBase.Columns("PrecioMes10")
            Me.columnPrecioMes11 = MyBase.Columns("PrecioMes11")
            Me.columnPrecioMes12 = MyBase.Columns("PrecioMes12")
            Me.columnPorcentajeDiferencia = MyBase.Columns("PorcentajeDiferencia")
            Me.columnPrecioUnitario2daMoneda = MyBase.Columns("PrecioUnitario2daMoneda")
            Me.columnPrecioMes12daMoneda = MyBase.Columns("PrecioMes12daMoneda")
            Me.columnPrecioMes22daMoneda = MyBase.Columns("PrecioMes22daMoneda")
            Me.columnPrecioMes32daMoneda = MyBase.Columns("PrecioMes32daMoneda")
            Me.columnPrecioMes42daMoneda = MyBase.Columns("PrecioMes42daMoneda")
            Me.columnPrecioMes52daMoneda = MyBase.Columns("PrecioMes52daMoneda")
            Me.columnPrecioMes62daMoneda = MyBase.Columns("PrecioMes62daMoneda")
            Me.columnPrecioMes72daMoneda = MyBase.Columns("PrecioMes72daMoneda")
            Me.columnPrecioMes82daMoneda = MyBase.Columns("PrecioMes82daMoneda")
            Me.columnPrecioMes92daMoneda = MyBase.Columns("PrecioMes92daMoneda")
            Me.columnPrecioMes102daMoneda = MyBase.Columns("PrecioMes102daMoneda")
            Me.columnPrecioMes112daMoneda = MyBase.Columns("PrecioMes112daMoneda")
            Me.columnPrecioMes122daMoneda = MyBase.Columns("PrecioMes122daMoneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnCodMatL = New Global.System.Data.DataColumn("CodMatL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMatL)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnDiferencia = New Global.System.Data.DataColumn("Diferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferencia)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnGrupoBCV = New Global.System.Data.DataColumn("GrupoBCV", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrupoBCV)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnSuplidor = New Global.System.Data.DataColumn("Suplidor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuplidor)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPrecioUnitario = New Global.System.Data.DataColumn("PrecioUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnPrecioMes1 = New Global.System.Data.DataColumn("PrecioMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes1)
            Me.columnPrecioMes2 = New Global.System.Data.DataColumn("PrecioMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes2)
            Me.columnPrecioMes3 = New Global.System.Data.DataColumn("PrecioMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes3)
            Me.columnPrecioMes4 = New Global.System.Data.DataColumn("PrecioMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes4)
            Me.columnPrecioMes5 = New Global.System.Data.DataColumn("PrecioMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes5)
            Me.columnPrecioMes6 = New Global.System.Data.DataColumn("PrecioMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes6)
            Me.columnPrecioMes7 = New Global.System.Data.DataColumn("PrecioMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes7)
            Me.columnPrecioMes8 = New Global.System.Data.DataColumn("PrecioMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes8)
            Me.columnPrecioMes9 = New Global.System.Data.DataColumn("PrecioMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes9)
            Me.columnPrecioMes10 = New Global.System.Data.DataColumn("PrecioMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes10)
            Me.columnPrecioMes11 = New Global.System.Data.DataColumn("PrecioMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes11)
            Me.columnPrecioMes12 = New Global.System.Data.DataColumn("PrecioMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12)
            Me.columnPorcentajeDiferencia = New Global.System.Data.DataColumn("PorcentajeDiferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDiferencia)
            Me.columnPrecioUnitario2daMoneda = New Global.System.Data.DataColumn("PrecioUnitario2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario2daMoneda)
            Me.columnPrecioMes12daMoneda = New Global.System.Data.DataColumn("PrecioMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12daMoneda)
            Me.columnPrecioMes22daMoneda = New Global.System.Data.DataColumn("PrecioMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes22daMoneda)
            Me.columnPrecioMes32daMoneda = New Global.System.Data.DataColumn("PrecioMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes32daMoneda)
            Me.columnPrecioMes42daMoneda = New Global.System.Data.DataColumn("PrecioMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes42daMoneda)
            Me.columnPrecioMes52daMoneda = New Global.System.Data.DataColumn("PrecioMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes52daMoneda)
            Me.columnPrecioMes62daMoneda = New Global.System.Data.DataColumn("PrecioMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes62daMoneda)
            Me.columnPrecioMes72daMoneda = New Global.System.Data.DataColumn("PrecioMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes72daMoneda)
            Me.columnPrecioMes82daMoneda = New Global.System.Data.DataColumn("PrecioMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes82daMoneda)
            Me.columnPrecioMes92daMoneda = New Global.System.Data.DataColumn("PrecioMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes92daMoneda)
            Me.columnPrecioMes102daMoneda = New Global.System.Data.DataColumn("PrecioMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes102daMoneda)
            Me.columnPrecioMes112daMoneda = New Global.System.Data.DataColumn("PrecioMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes112daMoneda)
            Me.columnPrecioMes122daMoneda = New Global.System.Data.DataColumn("PrecioMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes122daMoneda)
            Me.columnCodMatL.MaxLength = 8
            Me.columnDescripcion.MaxLength = 40
            Me.columnDiferencia.MaxLength = 1
            Me.columnUnidad.MaxLength = 6
            Me.columnSuplidor.MaxLength = 40
            Me.columnPorcentajeDiferencia.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMatImpLRow() As MatImpLRow
            Return CType(Me.NewRow,MatImpLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MatImpLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MatImpLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MatImpLRowChangedEvent) Is Nothing) Then
                RaiseEvent MatImpLRowChanged(Me, New MatImpLRowChangeEvent(CType(e.Row,MatImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MatImpLRowChangingEvent) Is Nothing) Then
                RaiseEvent MatImpLRowChanging(Me, New MatImpLRowChangeEvent(CType(e.Row,MatImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MatImpLRowDeletedEvent) Is Nothing) Then
                RaiseEvent MatImpLRowDeleted(Me, New MatImpLRowChangeEvent(CType(e.Row,MatImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MatImpLRowDeletingEvent) Is Nothing) Then
                RaiseEvent MatImpLRowDeleting(Me, New MatImpLRowChangeEvent(CType(e.Row,MatImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMatImpLRow(ByVal row As MatImpLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MatImpLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MatImpLBsSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnCodMatLULO As Global.System.Data.DataColumn
        
        Private columnDiferencia As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnGrupoBCV As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnSuplidor As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPrecioMes1 As Global.System.Data.DataColumn
        
        Private columnPrecioMes2 As Global.System.Data.DataColumn
        
        Private columnPrecioMes3 As Global.System.Data.DataColumn
        
        Private columnPrecioMes4 As Global.System.Data.DataColumn
        
        Private columnPrecioMes5 As Global.System.Data.DataColumn
        
        Private columnPrecioMes6 As Global.System.Data.DataColumn
        
        Private columnPrecioMes7 As Global.System.Data.DataColumn
        
        Private columnPrecioMes8 As Global.System.Data.DataColumn
        
        Private columnPrecioMes9 As Global.System.Data.DataColumn
        
        Private columnPrecioMes10 As Global.System.Data.DataColumn
        
        Private columnPrecioMes11 As Global.System.Data.DataColumn
        
        Private columnPrecioMes12 As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario As Global.System.Data.DataColumn
        
        Private columnPorcentajeDiferencia As Global.System.Data.DataColumn
        
        Private columnPrecioMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario2daMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MatImpLBsS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMatLULOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMatLULO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrupoBCVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrupoBCV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuplidorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuplidor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitario2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MatImpLBsSRow
            Get
                Return CType(Me.Rows(index),MatImpLBsSRow)
            End Get
        End Property
        
        Public Event MatImpLBsSRowChanging As MatImpLBsSRowChangeEventHandler
        
        Public Event MatImpLBsSRowChanged As MatImpLBsSRowChangeEventHandler
        
        Public Event MatImpLBsSRowDeleting As MatImpLBsSRowChangeEventHandler
        
        Public Event MatImpLBsSRowDeleted As MatImpLBsSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMatImpLBsSRow(ByVal row As MatImpLBsSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMatImpLBsSRow( _
                    ByVal Codigo As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal CodMatLULO As String,  _
                    ByVal Diferencia As Double,  _
                    ByVal Fecha As Date,  _
                    ByVal GrupoBCV As Double,  _
                    ByVal Unidad As String,  _
                    ByVal Suplidor As String,  _
                    ByVal Tipo As Double,  _
                    ByVal ID As Double,  _
                    ByVal PrecioMes1 As Double,  _
                    ByVal PrecioMes2 As Double,  _
                    ByVal PrecioMes3 As Double,  _
                    ByVal PrecioMes4 As Double,  _
                    ByVal PrecioMes5 As Double,  _
                    ByVal PrecioMes6 As Double,  _
                    ByVal PrecioMes7 As Double,  _
                    ByVal PrecioMes8 As Double,  _
                    ByVal PrecioMes9 As Double,  _
                    ByVal PrecioMes10 As Double,  _
                    ByVal PrecioMes11 As Double,  _
                    ByVal PrecioMes12 As Double,  _
                    ByVal PrecioUnitario As Double,  _
                    ByVal PorcentajeDiferencia As String,  _
                    ByVal PrecioMes12daMoneda As Double,  _
                    ByVal PrecioMes22daMoneda As Double,  _
                    ByVal PrecioMes32daMoneda As Double,  _
                    ByVal PrecioMes42daMoneda As Double,  _
                    ByVal PrecioMes52daMoneda As Double,  _
                    ByVal PrecioMes62daMoneda As Double,  _
                    ByVal PrecioMes72daMoneda As Double,  _
                    ByVal PrecioMes82daMoneda As Double,  _
                    ByVal PrecioMes92daMoneda As Double,  _
                    ByVal PrecioMes102daMoneda As Double,  _
                    ByVal PrecioMes112daMoneda As Double,  _
                    ByVal PrecioMes122daMoneda As Double,  _
                    ByVal PrecioUnitario2daMoneda As Double) As MatImpLBsSRow
            Dim rowMatImpLBsSRow As MatImpLBsSRow = CType(Me.NewRow,MatImpLBsSRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Descripcion, CodMatLULO, Diferencia, Fecha, GrupoBCV, Unidad, Suplidor, Tipo, ID, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, PrecioUnitario, PorcentajeDiferencia, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, PrecioMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, PrecioMes112daMoneda, PrecioMes122daMoneda, PrecioUnitario2daMoneda}
            rowMatImpLBsSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMatImpLBsSRow)
            Return rowMatImpLBsSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MatImpLBsSDataTable = CType(MyBase.Clone,MatImpLBsSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MatImpLBsSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnCodMatLULO = MyBase.Columns("CodMatLULO")
            Me.columnDiferencia = MyBase.Columns("Diferencia")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnGrupoBCV = MyBase.Columns("GrupoBCV")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnSuplidor = MyBase.Columns("Suplidor")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnID = MyBase.Columns("ID")
            Me.columnPrecioMes1 = MyBase.Columns("PrecioMes1")
            Me.columnPrecioMes2 = MyBase.Columns("PrecioMes2")
            Me.columnPrecioMes3 = MyBase.Columns("PrecioMes3")
            Me.columnPrecioMes4 = MyBase.Columns("PrecioMes4")
            Me.columnPrecioMes5 = MyBase.Columns("PrecioMes5")
            Me.columnPrecioMes6 = MyBase.Columns("PrecioMes6")
            Me.columnPrecioMes7 = MyBase.Columns("PrecioMes7")
            Me.columnPrecioMes8 = MyBase.Columns("PrecioMes8")
            Me.columnPrecioMes9 = MyBase.Columns("PrecioMes9")
            Me.columnPrecioMes10 = MyBase.Columns("PrecioMes10")
            Me.columnPrecioMes11 = MyBase.Columns("PrecioMes11")
            Me.columnPrecioMes12 = MyBase.Columns("PrecioMes12")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnPorcentajeDiferencia = MyBase.Columns("PorcentajeDiferencia")
            Me.columnPrecioMes12daMoneda = MyBase.Columns("PrecioMes12daMoneda")
            Me.columnPrecioMes22daMoneda = MyBase.Columns("PrecioMes22daMoneda")
            Me.columnPrecioMes32daMoneda = MyBase.Columns("PrecioMes32daMoneda")
            Me.columnPrecioMes42daMoneda = MyBase.Columns("PrecioMes42daMoneda")
            Me.columnPrecioMes52daMoneda = MyBase.Columns("PrecioMes52daMoneda")
            Me.columnPrecioMes62daMoneda = MyBase.Columns("PrecioMes62daMoneda")
            Me.columnPrecioMes72daMoneda = MyBase.Columns("PrecioMes72daMoneda")
            Me.columnPrecioMes82daMoneda = MyBase.Columns("PrecioMes82daMoneda")
            Me.columnPrecioMes92daMoneda = MyBase.Columns("PrecioMes92daMoneda")
            Me.columnPrecioMes102daMoneda = MyBase.Columns("PrecioMes102daMoneda")
            Me.columnPrecioMes112daMoneda = MyBase.Columns("PrecioMes112daMoneda")
            Me.columnPrecioMes122daMoneda = MyBase.Columns("PrecioMes122daMoneda")
            Me.columnPrecioUnitario2daMoneda = MyBase.Columns("PrecioUnitario2daMoneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCodMatLULO = New Global.System.Data.DataColumn("CodMatLULO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMatLULO)
            Me.columnDiferencia = New Global.System.Data.DataColumn("Diferencia", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferencia)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnGrupoBCV = New Global.System.Data.DataColumn("GrupoBCV", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrupoBCV)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnSuplidor = New Global.System.Data.DataColumn("Suplidor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuplidor)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPrecioMes1 = New Global.System.Data.DataColumn("PrecioMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes1)
            Me.columnPrecioMes2 = New Global.System.Data.DataColumn("PrecioMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes2)
            Me.columnPrecioMes3 = New Global.System.Data.DataColumn("PrecioMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes3)
            Me.columnPrecioMes4 = New Global.System.Data.DataColumn("PrecioMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes4)
            Me.columnPrecioMes5 = New Global.System.Data.DataColumn("PrecioMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes5)
            Me.columnPrecioMes6 = New Global.System.Data.DataColumn("PrecioMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes6)
            Me.columnPrecioMes7 = New Global.System.Data.DataColumn("PrecioMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes7)
            Me.columnPrecioMes8 = New Global.System.Data.DataColumn("PrecioMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes8)
            Me.columnPrecioMes9 = New Global.System.Data.DataColumn("PrecioMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes9)
            Me.columnPrecioMes10 = New Global.System.Data.DataColumn("PrecioMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes10)
            Me.columnPrecioMes11 = New Global.System.Data.DataColumn("PrecioMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes11)
            Me.columnPrecioMes12 = New Global.System.Data.DataColumn("PrecioMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12)
            Me.columnPrecioUnitario = New Global.System.Data.DataColumn("PrecioUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnPorcentajeDiferencia = New Global.System.Data.DataColumn("PorcentajeDiferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDiferencia)
            Me.columnPrecioMes12daMoneda = New Global.System.Data.DataColumn("PrecioMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12daMoneda)
            Me.columnPrecioMes22daMoneda = New Global.System.Data.DataColumn("PrecioMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes22daMoneda)
            Me.columnPrecioMes32daMoneda = New Global.System.Data.DataColumn("PrecioMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes32daMoneda)
            Me.columnPrecioMes42daMoneda = New Global.System.Data.DataColumn("PrecioMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes42daMoneda)
            Me.columnPrecioMes52daMoneda = New Global.System.Data.DataColumn("PrecioMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes52daMoneda)
            Me.columnPrecioMes62daMoneda = New Global.System.Data.DataColumn("PrecioMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes62daMoneda)
            Me.columnPrecioMes72daMoneda = New Global.System.Data.DataColumn("PrecioMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes72daMoneda)
            Me.columnPrecioMes82daMoneda = New Global.System.Data.DataColumn("PrecioMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes82daMoneda)
            Me.columnPrecioMes92daMoneda = New Global.System.Data.DataColumn("PrecioMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes92daMoneda)
            Me.columnPrecioMes102daMoneda = New Global.System.Data.DataColumn("PrecioMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes102daMoneda)
            Me.columnPrecioMes112daMoneda = New Global.System.Data.DataColumn("PrecioMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes112daMoneda)
            Me.columnPrecioMes122daMoneda = New Global.System.Data.DataColumn("PrecioMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes122daMoneda)
            Me.columnPrecioUnitario2daMoneda = New Global.System.Data.DataColumn("PrecioUnitario2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario2daMoneda)
            Me.columnDescripcion.MaxLength = 40
            Me.columnCodMatLULO.MaxLength = 8
            Me.columnUnidad.MaxLength = 6
            Me.columnSuplidor.MaxLength = 40
            Me.columnPorcentajeDiferencia.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMatImpLBsSRow() As MatImpLBsSRow
            Return CType(Me.NewRow,MatImpLBsSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MatImpLBsSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MatImpLBsSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MatImpLBsSRowChangedEvent) Is Nothing) Then
                RaiseEvent MatImpLBsSRowChanged(Me, New MatImpLBsSRowChangeEvent(CType(e.Row,MatImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MatImpLBsSRowChangingEvent) Is Nothing) Then
                RaiseEvent MatImpLBsSRowChanging(Me, New MatImpLBsSRowChangeEvent(CType(e.Row,MatImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MatImpLBsSRowDeletedEvent) Is Nothing) Then
                RaiseEvent MatImpLBsSRowDeleted(Me, New MatImpLBsSRowChangeEvent(CType(e.Row,MatImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MatImpLBsSRowDeletingEvent) Is Nothing) Then
                RaiseEvent MatImpLBsSRowDeleting(Me, New MatImpLBsSRowChangeEvent(CType(e.Row,MatImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMatImpLBsSRow(ByVal row As MatImpLBsSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MatImpLBsSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MOcompDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnCodigoSimple As Global.System.Data.DataColumn
        
        Private columnDescripcionSimple As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnJornal As Global.System.Data.DataColumn
        
        Private columnBono As Global.System.Data.DataColumn
        
        Private columnTotalJornal As Global.System.Data.DataColumn
        
        Private columnTotalBono As Global.System.Data.DataColumn
        
        Private columnJornal2daMoneda As Global.System.Data.DataColumn
        
        Private columnBono2daMoneda As Global.System.Data.DataColumn
        
        Private columnTotalJornal2daMoneda As Global.System.Data.DataColumn
        
        Private columnTotalBono2daMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MOcomp"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoSimpleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoSimple
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionSimpleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionSimple
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalJornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jornal2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bono2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalJornal2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalJornal2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalBono2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalBono2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MOcompRow
            Get
                Return CType(Me.Rows(index),MOcompRow)
            End Get
        End Property
        
        Public Event MOcompRowChanging As MOcompRowChangeEventHandler
        
        Public Event MOcompRowChanged As MOcompRowChangeEventHandler
        
        Public Event MOcompRowDeleting As MOcompRowChangeEventHandler
        
        Public Event MOcompRowDeleted As MOcompRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMOcompRow(ByVal row As MOcompRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMOcompRow(ByVal ID As Double, ByVal Descripcion As String, ByVal Unidad As String, ByVal CodigoSimple As Double, ByVal DescripcionSimple As String, ByVal Cantidad As Double, ByVal Jornal As Double, ByVal Bono As Double, ByVal TotalJornal As Double, ByVal TotalBono As Double, ByVal Jornal2daMoneda As Double, ByVal Bono2daMoneda As Double, ByVal TotalJornal2daMoneda As Double, ByVal TotalBono2daMoneda As Double) As MOcompRow
            Dim rowMOcompRow As MOcompRow = CType(Me.NewRow,MOcompRow)
            Dim columnValuesArray() As Object = New Object() {ID, Descripcion, Unidad, CodigoSimple, DescripcionSimple, Cantidad, Jornal, Bono, TotalJornal, TotalBono, Jornal2daMoneda, Bono2daMoneda, TotalJornal2daMoneda, TotalBono2daMoneda}
            rowMOcompRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMOcompRow)
            Return rowMOcompRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MOcompDataTable = CType(MyBase.Clone,MOcompDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MOcompDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnCodigoSimple = MyBase.Columns("CodigoSimple")
            Me.columnDescripcionSimple = MyBase.Columns("DescripcionSimple")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnJornal = MyBase.Columns("Jornal")
            Me.columnBono = MyBase.Columns("Bono")
            Me.columnTotalJornal = MyBase.Columns("TotalJornal")
            Me.columnTotalBono = MyBase.Columns("TotalBono")
            Me.columnJornal2daMoneda = MyBase.Columns("Jornal2daMoneda")
            Me.columnBono2daMoneda = MyBase.Columns("Bono2daMoneda")
            Me.columnTotalJornal2daMoneda = MyBase.Columns("TotalJornal2daMoneda")
            Me.columnTotalBono2daMoneda = MyBase.Columns("TotalBono2daMoneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnCodigoSimple = New Global.System.Data.DataColumn("CodigoSimple", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoSimple)
            Me.columnDescripcionSimple = New Global.System.Data.DataColumn("DescripcionSimple", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionSimple)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnJornal = New Global.System.Data.DataColumn("Jornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal)
            Me.columnBono = New Global.System.Data.DataColumn("Bono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono)
            Me.columnTotalJornal = New Global.System.Data.DataColumn("TotalJornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalJornal)
            Me.columnTotalBono = New Global.System.Data.DataColumn("TotalBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalBono)
            Me.columnJornal2daMoneda = New Global.System.Data.DataColumn("Jornal2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal2daMoneda)
            Me.columnBono2daMoneda = New Global.System.Data.DataColumn("Bono2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono2daMoneda)
            Me.columnTotalJornal2daMoneda = New Global.System.Data.DataColumn("TotalJornal2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalJornal2daMoneda)
            Me.columnTotalBono2daMoneda = New Global.System.Data.DataColumn("TotalBono2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalBono2daMoneda)
            Me.columnDescripcion.MaxLength = 47
            Me.columnUnidad.MaxLength = 5
            Me.columnDescripcionSimple.MaxLength = 43
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMOcompRow() As MOcompRow
            Return CType(Me.NewRow,MOcompRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MOcompRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MOcompRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MOcompRowChangedEvent) Is Nothing) Then
                RaiseEvent MOcompRowChanged(Me, New MOcompRowChangeEvent(CType(e.Row,MOcompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MOcompRowChangingEvent) Is Nothing) Then
                RaiseEvent MOcompRowChanging(Me, New MOcompRowChangeEvent(CType(e.Row,MOcompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MOcompRowDeletedEvent) Is Nothing) Then
                RaiseEvent MOcompRowDeleted(Me, New MOcompRowChangeEvent(CType(e.Row,MOcompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MOcompRowDeletingEvent) Is Nothing) Then
                RaiseEvent MOcompRowDeleting(Me, New MOcompRowChangeEvent(CType(e.Row,MOcompRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMOcompRow(ByVal row As MOcompRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MOcompDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MOImpLDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCodMOLULO As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnJornal As Global.System.Data.DataColumn
        
        Private columnJornalMes1 As Global.System.Data.DataColumn
        
        Private columnJornalMes2 As Global.System.Data.DataColumn
        
        Private columnJornalMes3 As Global.System.Data.DataColumn
        
        Private columnJornalMes4 As Global.System.Data.DataColumn
        
        Private columnJornalMes5 As Global.System.Data.DataColumn
        
        Private columnJornalMes6 As Global.System.Data.DataColumn
        
        Private columnJornalMes7 As Global.System.Data.DataColumn
        
        Private columnJornalMes8 As Global.System.Data.DataColumn
        
        Private columnJornalMes9 As Global.System.Data.DataColumn
        
        Private columnJornalMes10 As Global.System.Data.DataColumn
        
        Private columnJornalMes11 As Global.System.Data.DataColumn
        
        Private columnJornalMes12 As Global.System.Data.DataColumn
        
        Private columnJornal2daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnPorcentajeJornal As Global.System.Data.DataColumn
        
        Private columnDiferenciaJornal As Global.System.Data.DataColumn
        
        Private columnBono As Global.System.Data.DataColumn
        
        Private columnBonoMes1 As Global.System.Data.DataColumn
        
        Private columnBonoMes2 As Global.System.Data.DataColumn
        
        Private columnBonoMes3 As Global.System.Data.DataColumn
        
        Private columnBonoMes4 As Global.System.Data.DataColumn
        
        Private columnBonoMes5 As Global.System.Data.DataColumn
        
        Private columnBonoMes6 As Global.System.Data.DataColumn
        
        Private columnBonoMes7 As Global.System.Data.DataColumn
        
        Private columnBonoMes8 As Global.System.Data.DataColumn
        
        Private columnBonoMes9 As Global.System.Data.DataColumn
        
        Private columnBonoMes10 As Global.System.Data.DataColumn
        
        Private columnBonoMes11 As Global.System.Data.DataColumn
        
        Private columnBonoMes12 As Global.System.Data.DataColumn
        
        Private columnBono2daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnPorcentajeBono As Global.System.Data.DataColumn
        
        Private columnDiferenciaBono As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MOImpL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMOLULOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMOLULO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jornal2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeJornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaJornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bono2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MOImpLRow
            Get
                Return CType(Me.Rows(index),MOImpLRow)
            End Get
        End Property
        
        Public Event MOImpLRowChanging As MOImpLRowChangeEventHandler
        
        Public Event MOImpLRowChanged As MOImpLRowChangeEventHandler
        
        Public Event MOImpLRowDeleting As MOImpLRowChangeEventHandler
        
        Public Event MOImpLRowDeleted As MOImpLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMOImpLRow(ByVal row As MOImpLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMOImpLRow( _
                    ByVal ID As Double,  _
                    ByVal CodMOLULO As String,  _
                    ByVal Codigo As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal Fecha As Date,  _
                    ByVal Tipo As Double,  _
                    ByVal Unidad As String,  _
                    ByVal Jornal As Double,  _
                    ByVal JornalMes1 As Double,  _
                    ByVal JornalMes2 As Double,  _
                    ByVal JornalMes3 As Double,  _
                    ByVal JornalMes4 As Double,  _
                    ByVal JornalMes5 As Double,  _
                    ByVal JornalMes6 As Double,  _
                    ByVal JornalMes7 As Double,  _
                    ByVal JornalMes8 As Double,  _
                    ByVal JornalMes9 As Double,  _
                    ByVal JornalMes10 As Double,  _
                    ByVal JornalMes11 As Double,  _
                    ByVal JornalMes12 As Double,  _
                    ByVal Jornal2daMoneda As Double,  _
                    ByVal JornalMes12daMoneda As Double,  _
                    ByVal JornalMes22daMoneda As Double,  _
                    ByVal JornalMes32daMoneda As Double,  _
                    ByVal JornalMes42daMoneda As Double,  _
                    ByVal JornalMes52daMoneda As Double,  _
                    ByVal JornalMes62daMoneda As Double,  _
                    ByVal JornalMes72daMoneda As Double,  _
                    ByVal JornalMes82daMoneda As Double,  _
                    ByVal JornalMes92daMoneda As Double,  _
                    ByVal JornalMes102daMoneda As Double,  _
                    ByVal JornalMes112daMoneda As Double,  _
                    ByVal JornalMes122daMoneda As Double,  _
                    ByVal PorcentajeJornal As Double,  _
                    ByVal DiferenciaJornal As Double,  _
                    ByVal Bono As Double,  _
                    ByVal BonoMes1 As Double,  _
                    ByVal BonoMes2 As Double,  _
                    ByVal BonoMes3 As Double,  _
                    ByVal BonoMes4 As Double,  _
                    ByVal BonoMes5 As Double,  _
                    ByVal BonoMes6 As Double,  _
                    ByVal BonoMes7 As Double,  _
                    ByVal BonoMes8 As Double,  _
                    ByVal BonoMes9 As Double,  _
                    ByVal BonoMes10 As Double,  _
                    ByVal BonoMes11 As Double,  _
                    ByVal BonoMes12 As Double,  _
                    ByVal Bono2daMoneda As Double,  _
                    ByVal BonoMes12daMoneda As Double,  _
                    ByVal BonoMes22daMoneda As Double,  _
                    ByVal BonoMes32daMoneda As Double,  _
                    ByVal BonoMes42daMoneda As Double,  _
                    ByVal BonoMes52daMoneda As Double,  _
                    ByVal BonoMes62daMoneda As Double,  _
                    ByVal BonoMes72daMoneda As Double,  _
                    ByVal BonoMes82daMoneda As Double,  _
                    ByVal BonoMes92daMoneda As Double,  _
                    ByVal BonoMes102daMoneda As Double,  _
                    ByVal BonoMes112daMoneda As Double,  _
                    ByVal BonoMes122daMoneda As Double,  _
                    ByVal PorcentajeBono As Double,  _
                    ByVal DiferenciaBono As Double) As MOImpLRow
            Dim rowMOImpLRow As MOImpLRow = CType(Me.NewRow,MOImpLRow)
            Dim columnValuesArray() As Object = New Object() {ID, CodMOLULO, Codigo, Descripcion, Fecha, Tipo, Unidad, Jornal, JornalMes1, JornalMes2, JornalMes3, JornalMes4, JornalMes5, JornalMes6, JornalMes7, JornalMes8, JornalMes9, JornalMes10, JornalMes11, JornalMes12, Jornal2daMoneda, JornalMes12daMoneda, JornalMes22daMoneda, JornalMes32daMoneda, JornalMes42daMoneda, JornalMes52daMoneda, JornalMes62daMoneda, JornalMes72daMoneda, JornalMes82daMoneda, JornalMes92daMoneda, JornalMes102daMoneda, JornalMes112daMoneda, JornalMes122daMoneda, PorcentajeJornal, DiferenciaJornal, Bono, BonoMes1, BonoMes2, BonoMes3, BonoMes4, BonoMes5, BonoMes6, BonoMes7, BonoMes8, BonoMes9, BonoMes10, BonoMes11, BonoMes12, Bono2daMoneda, BonoMes12daMoneda, BonoMes22daMoneda, BonoMes32daMoneda, BonoMes42daMoneda, BonoMes52daMoneda, BonoMes62daMoneda, BonoMes72daMoneda, BonoMes82daMoneda, BonoMes92daMoneda, BonoMes102daMoneda, BonoMes112daMoneda, BonoMes122daMoneda, PorcentajeBono, DiferenciaBono}
            rowMOImpLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMOImpLRow)
            Return rowMOImpLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MOImpLDataTable = CType(MyBase.Clone,MOImpLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MOImpLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnCodMOLULO = MyBase.Columns("CodMOLULO")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnJornal = MyBase.Columns("Jornal")
            Me.columnJornalMes1 = MyBase.Columns("JornalMes1")
            Me.columnJornalMes2 = MyBase.Columns("JornalMes2")
            Me.columnJornalMes3 = MyBase.Columns("JornalMes3")
            Me.columnJornalMes4 = MyBase.Columns("JornalMes4")
            Me.columnJornalMes5 = MyBase.Columns("JornalMes5")
            Me.columnJornalMes6 = MyBase.Columns("JornalMes6")
            Me.columnJornalMes7 = MyBase.Columns("JornalMes7")
            Me.columnJornalMes8 = MyBase.Columns("JornalMes8")
            Me.columnJornalMes9 = MyBase.Columns("JornalMes9")
            Me.columnJornalMes10 = MyBase.Columns("JornalMes10")
            Me.columnJornalMes11 = MyBase.Columns("JornalMes11")
            Me.columnJornalMes12 = MyBase.Columns("JornalMes12")
            Me.columnJornal2daMoneda = MyBase.Columns("Jornal2daMoneda")
            Me.columnJornalMes12daMoneda = MyBase.Columns("JornalMes12daMoneda")
            Me.columnJornalMes22daMoneda = MyBase.Columns("JornalMes22daMoneda")
            Me.columnJornalMes32daMoneda = MyBase.Columns("JornalMes32daMoneda")
            Me.columnJornalMes42daMoneda = MyBase.Columns("JornalMes42daMoneda")
            Me.columnJornalMes52daMoneda = MyBase.Columns("JornalMes52daMoneda")
            Me.columnJornalMes62daMoneda = MyBase.Columns("JornalMes62daMoneda")
            Me.columnJornalMes72daMoneda = MyBase.Columns("JornalMes72daMoneda")
            Me.columnJornalMes82daMoneda = MyBase.Columns("JornalMes82daMoneda")
            Me.columnJornalMes92daMoneda = MyBase.Columns("JornalMes92daMoneda")
            Me.columnJornalMes102daMoneda = MyBase.Columns("JornalMes102daMoneda")
            Me.columnJornalMes112daMoneda = MyBase.Columns("JornalMes112daMoneda")
            Me.columnJornalMes122daMoneda = MyBase.Columns("JornalMes122daMoneda")
            Me.columnPorcentajeJornal = MyBase.Columns("PorcentajeJornal")
            Me.columnDiferenciaJornal = MyBase.Columns("DiferenciaJornal")
            Me.columnBono = MyBase.Columns("Bono")
            Me.columnBonoMes1 = MyBase.Columns("BonoMes1")
            Me.columnBonoMes2 = MyBase.Columns("BonoMes2")
            Me.columnBonoMes3 = MyBase.Columns("BonoMes3")
            Me.columnBonoMes4 = MyBase.Columns("BonoMes4")
            Me.columnBonoMes5 = MyBase.Columns("BonoMes5")
            Me.columnBonoMes6 = MyBase.Columns("BonoMes6")
            Me.columnBonoMes7 = MyBase.Columns("BonoMes7")
            Me.columnBonoMes8 = MyBase.Columns("BonoMes8")
            Me.columnBonoMes9 = MyBase.Columns("BonoMes9")
            Me.columnBonoMes10 = MyBase.Columns("BonoMes10")
            Me.columnBonoMes11 = MyBase.Columns("BonoMes11")
            Me.columnBonoMes12 = MyBase.Columns("BonoMes12")
            Me.columnBono2daMoneda = MyBase.Columns("Bono2daMoneda")
            Me.columnBonoMes12daMoneda = MyBase.Columns("BonoMes12daMoneda")
            Me.columnBonoMes22daMoneda = MyBase.Columns("BonoMes22daMoneda")
            Me.columnBonoMes32daMoneda = MyBase.Columns("BonoMes32daMoneda")
            Me.columnBonoMes42daMoneda = MyBase.Columns("BonoMes42daMoneda")
            Me.columnBonoMes52daMoneda = MyBase.Columns("BonoMes52daMoneda")
            Me.columnBonoMes62daMoneda = MyBase.Columns("BonoMes62daMoneda")
            Me.columnBonoMes72daMoneda = MyBase.Columns("BonoMes72daMoneda")
            Me.columnBonoMes82daMoneda = MyBase.Columns("BonoMes82daMoneda")
            Me.columnBonoMes92daMoneda = MyBase.Columns("BonoMes92daMoneda")
            Me.columnBonoMes102daMoneda = MyBase.Columns("BonoMes102daMoneda")
            Me.columnBonoMes112daMoneda = MyBase.Columns("BonoMes112daMoneda")
            Me.columnBonoMes122daMoneda = MyBase.Columns("BonoMes122daMoneda")
            Me.columnPorcentajeBono = MyBase.Columns("PorcentajeBono")
            Me.columnDiferenciaBono = MyBase.Columns("DiferenciaBono")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCodMOLULO = New Global.System.Data.DataColumn("CodMOLULO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMOLULO)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnJornal = New Global.System.Data.DataColumn("Jornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal)
            Me.columnJornalMes1 = New Global.System.Data.DataColumn("JornalMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes1)
            Me.columnJornalMes2 = New Global.System.Data.DataColumn("JornalMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes2)
            Me.columnJornalMes3 = New Global.System.Data.DataColumn("JornalMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes3)
            Me.columnJornalMes4 = New Global.System.Data.DataColumn("JornalMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes4)
            Me.columnJornalMes5 = New Global.System.Data.DataColumn("JornalMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes5)
            Me.columnJornalMes6 = New Global.System.Data.DataColumn("JornalMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes6)
            Me.columnJornalMes7 = New Global.System.Data.DataColumn("JornalMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes7)
            Me.columnJornalMes8 = New Global.System.Data.DataColumn("JornalMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes8)
            Me.columnJornalMes9 = New Global.System.Data.DataColumn("JornalMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes9)
            Me.columnJornalMes10 = New Global.System.Data.DataColumn("JornalMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes10)
            Me.columnJornalMes11 = New Global.System.Data.DataColumn("JornalMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes11)
            Me.columnJornalMes12 = New Global.System.Data.DataColumn("JornalMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes12)
            Me.columnJornal2daMoneda = New Global.System.Data.DataColumn("Jornal2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal2daMoneda)
            Me.columnJornalMes12daMoneda = New Global.System.Data.DataColumn("JornalMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes12daMoneda)
            Me.columnJornalMes22daMoneda = New Global.System.Data.DataColumn("JornalMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes22daMoneda)
            Me.columnJornalMes32daMoneda = New Global.System.Data.DataColumn("JornalMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes32daMoneda)
            Me.columnJornalMes42daMoneda = New Global.System.Data.DataColumn("JornalMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes42daMoneda)
            Me.columnJornalMes52daMoneda = New Global.System.Data.DataColumn("JornalMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes52daMoneda)
            Me.columnJornalMes62daMoneda = New Global.System.Data.DataColumn("JornalMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes62daMoneda)
            Me.columnJornalMes72daMoneda = New Global.System.Data.DataColumn("JornalMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes72daMoneda)
            Me.columnJornalMes82daMoneda = New Global.System.Data.DataColumn("JornalMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes82daMoneda)
            Me.columnJornalMes92daMoneda = New Global.System.Data.DataColumn("JornalMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes92daMoneda)
            Me.columnJornalMes102daMoneda = New Global.System.Data.DataColumn("JornalMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes102daMoneda)
            Me.columnJornalMes112daMoneda = New Global.System.Data.DataColumn("JornalMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes112daMoneda)
            Me.columnJornalMes122daMoneda = New Global.System.Data.DataColumn("JornalMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes122daMoneda)
            Me.columnPorcentajeJornal = New Global.System.Data.DataColumn("PorcentajeJornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeJornal)
            Me.columnDiferenciaJornal = New Global.System.Data.DataColumn("DiferenciaJornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaJornal)
            Me.columnBono = New Global.System.Data.DataColumn("Bono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono)
            Me.columnBonoMes1 = New Global.System.Data.DataColumn("BonoMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes1)
            Me.columnBonoMes2 = New Global.System.Data.DataColumn("BonoMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes2)
            Me.columnBonoMes3 = New Global.System.Data.DataColumn("BonoMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes3)
            Me.columnBonoMes4 = New Global.System.Data.DataColumn("BonoMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes4)
            Me.columnBonoMes5 = New Global.System.Data.DataColumn("BonoMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes5)
            Me.columnBonoMes6 = New Global.System.Data.DataColumn("BonoMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes6)
            Me.columnBonoMes7 = New Global.System.Data.DataColumn("BonoMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes7)
            Me.columnBonoMes8 = New Global.System.Data.DataColumn("BonoMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes8)
            Me.columnBonoMes9 = New Global.System.Data.DataColumn("BonoMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes9)
            Me.columnBonoMes10 = New Global.System.Data.DataColumn("BonoMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes10)
            Me.columnBonoMes11 = New Global.System.Data.DataColumn("BonoMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes11)
            Me.columnBonoMes12 = New Global.System.Data.DataColumn("BonoMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes12)
            Me.columnBono2daMoneda = New Global.System.Data.DataColumn("Bono2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono2daMoneda)
            Me.columnBonoMes12daMoneda = New Global.System.Data.DataColumn("BonoMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes12daMoneda)
            Me.columnBonoMes22daMoneda = New Global.System.Data.DataColumn("BonoMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes22daMoneda)
            Me.columnBonoMes32daMoneda = New Global.System.Data.DataColumn("BonoMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes32daMoneda)
            Me.columnBonoMes42daMoneda = New Global.System.Data.DataColumn("BonoMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes42daMoneda)
            Me.columnBonoMes52daMoneda = New Global.System.Data.DataColumn("BonoMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes52daMoneda)
            Me.columnBonoMes62daMoneda = New Global.System.Data.DataColumn("BonoMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes62daMoneda)
            Me.columnBonoMes72daMoneda = New Global.System.Data.DataColumn("BonoMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes72daMoneda)
            Me.columnBonoMes82daMoneda = New Global.System.Data.DataColumn("BonoMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes82daMoneda)
            Me.columnBonoMes92daMoneda = New Global.System.Data.DataColumn("BonoMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes92daMoneda)
            Me.columnBonoMes102daMoneda = New Global.System.Data.DataColumn("BonoMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes102daMoneda)
            Me.columnBonoMes112daMoneda = New Global.System.Data.DataColumn("BonoMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes112daMoneda)
            Me.columnBonoMes122daMoneda = New Global.System.Data.DataColumn("BonoMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes122daMoneda)
            Me.columnPorcentajeBono = New Global.System.Data.DataColumn("PorcentajeBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeBono)
            Me.columnDiferenciaBono = New Global.System.Data.DataColumn("DiferenciaBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaBono)
            Me.columnCodMOLULO.MaxLength = 8
            Me.columnDescripcion.MaxLength = 40
            Me.columnUnidad.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMOImpLRow() As MOImpLRow
            Return CType(Me.NewRow,MOImpLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MOImpLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MOImpLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MOImpLRowChangedEvent) Is Nothing) Then
                RaiseEvent MOImpLRowChanged(Me, New MOImpLRowChangeEvent(CType(e.Row,MOImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MOImpLRowChangingEvent) Is Nothing) Then
                RaiseEvent MOImpLRowChanging(Me, New MOImpLRowChangeEvent(CType(e.Row,MOImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MOImpLRowDeletedEvent) Is Nothing) Then
                RaiseEvent MOImpLRowDeleted(Me, New MOImpLRowChangeEvent(CType(e.Row,MOImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MOImpLRowDeletingEvent) Is Nothing) Then
                RaiseEvent MOImpLRowDeleting(Me, New MOImpLRowChangeEvent(CType(e.Row,MOImpLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMOImpLRow(ByVal row As MOImpLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MOImpLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MOImpLBsSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCodMOLULO As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnJornal As Global.System.Data.DataColumn
        
        Private columnJornalMes1 As Global.System.Data.DataColumn
        
        Private columnJornalMes2 As Global.System.Data.DataColumn
        
        Private columnJornalMes3 As Global.System.Data.DataColumn
        
        Private columnJornalMes4 As Global.System.Data.DataColumn
        
        Private columnJornalMes5 As Global.System.Data.DataColumn
        
        Private columnJornalMes6 As Global.System.Data.DataColumn
        
        Private columnJornalMes7 As Global.System.Data.DataColumn
        
        Private columnJornalMes8 As Global.System.Data.DataColumn
        
        Private columnJornalMes9 As Global.System.Data.DataColumn
        
        Private columnJornalMes10 As Global.System.Data.DataColumn
        
        Private columnJornalMes11 As Global.System.Data.DataColumn
        
        Private columnJornalMes12 As Global.System.Data.DataColumn
        
        Private columnJornal2daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnPorcentajeJornal As Global.System.Data.DataColumn
        
        Private columnDiferenciaJornal As Global.System.Data.DataColumn
        
        Private columnBono As Global.System.Data.DataColumn
        
        Private columnBonoMes1 As Global.System.Data.DataColumn
        
        Private columnBonoMes2 As Global.System.Data.DataColumn
        
        Private columnBonoMes3 As Global.System.Data.DataColumn
        
        Private columnBonoMes4 As Global.System.Data.DataColumn
        
        Private columnBonoMes5 As Global.System.Data.DataColumn
        
        Private columnBonoMes6 As Global.System.Data.DataColumn
        
        Private columnBonoMes7 As Global.System.Data.DataColumn
        
        Private columnBonoMes8 As Global.System.Data.DataColumn
        
        Private columnBonoMes9 As Global.System.Data.DataColumn
        
        Private columnBonoMes10 As Global.System.Data.DataColumn
        
        Private columnBonoMes11 As Global.System.Data.DataColumn
        
        Private columnBonoMes12 As Global.System.Data.DataColumn
        
        Private columnBono2daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnPorcentajeBono As Global.System.Data.DataColumn
        
        Private columnDiferenciaBono As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MOImpLBsS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMOLULOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMOLULO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jornal2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeJornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaJornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bono2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MOImpLBsSRow
            Get
                Return CType(Me.Rows(index),MOImpLBsSRow)
            End Get
        End Property
        
        Public Event MOImpLBsSRowChanging As MOImpLBsSRowChangeEventHandler
        
        Public Event MOImpLBsSRowChanged As MOImpLBsSRowChangeEventHandler
        
        Public Event MOImpLBsSRowDeleting As MOImpLBsSRowChangeEventHandler
        
        Public Event MOImpLBsSRowDeleted As MOImpLBsSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMOImpLBsSRow(ByVal row As MOImpLBsSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMOImpLBsSRow( _
                    ByVal ID As Double,  _
                    ByVal CodMOLULO As String,  _
                    ByVal Codigo As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal Fecha As Date,  _
                    ByVal Tipo As Double,  _
                    ByVal Unidad As String,  _
                    ByVal Jornal As Double,  _
                    ByVal JornalMes1 As Double,  _
                    ByVal JornalMes2 As Double,  _
                    ByVal JornalMes3 As Double,  _
                    ByVal JornalMes4 As Double,  _
                    ByVal JornalMes5 As Double,  _
                    ByVal JornalMes6 As Double,  _
                    ByVal JornalMes7 As Double,  _
                    ByVal JornalMes8 As Double,  _
                    ByVal JornalMes9 As Double,  _
                    ByVal JornalMes10 As Double,  _
                    ByVal JornalMes11 As Double,  _
                    ByVal JornalMes12 As Double,  _
                    ByVal Jornal2daMoneda As Double,  _
                    ByVal JornalMes12daMoneda As Double,  _
                    ByVal JornalMes22daMoneda As Double,  _
                    ByVal JornalMes32daMoneda As Double,  _
                    ByVal JornalMes42daMoneda As Double,  _
                    ByVal JornalMes52daMoneda As Double,  _
                    ByVal JornalMes62daMoneda As Double,  _
                    ByVal JornalMes72daMoneda As Double,  _
                    ByVal JornalMes82daMoneda As Double,  _
                    ByVal JornalMes92daMoneda As Double,  _
                    ByVal JornalMes102daMoneda As Double,  _
                    ByVal JornalMes112daMoneda As Double,  _
                    ByVal JornalMes122daMoneda As Double,  _
                    ByVal PorcentajeJornal As Double,  _
                    ByVal DiferenciaJornal As Double,  _
                    ByVal Bono As Double,  _
                    ByVal BonoMes1 As Double,  _
                    ByVal BonoMes2 As Double,  _
                    ByVal BonoMes3 As Double,  _
                    ByVal BonoMes4 As Double,  _
                    ByVal BonoMes5 As Double,  _
                    ByVal BonoMes6 As Double,  _
                    ByVal BonoMes7 As Double,  _
                    ByVal BonoMes8 As Double,  _
                    ByVal BonoMes9 As Double,  _
                    ByVal BonoMes10 As Double,  _
                    ByVal BonoMes11 As Double,  _
                    ByVal BonoMes12 As Double,  _
                    ByVal Bono2daMoneda As Double,  _
                    ByVal BonoMes12daMoneda As Double,  _
                    ByVal BonoMes22daMoneda As Double,  _
                    ByVal BonoMes32daMoneda As Double,  _
                    ByVal BonoMes42daMoneda As Double,  _
                    ByVal BonoMes52daMoneda As Double,  _
                    ByVal BonoMes62daMoneda As Double,  _
                    ByVal BonoMes72daMoneda As Double,  _
                    ByVal BonoMes82daMoneda As Double,  _
                    ByVal BonoMes92daMoneda As Double,  _
                    ByVal BonoMes102daMoneda As Double,  _
                    ByVal BonoMes112daMoneda As Double,  _
                    ByVal BonoMes122daMoneda As Double,  _
                    ByVal PorcentajeBono As Double,  _
                    ByVal DiferenciaBono As Double) As MOImpLBsSRow
            Dim rowMOImpLBsSRow As MOImpLBsSRow = CType(Me.NewRow,MOImpLBsSRow)
            Dim columnValuesArray() As Object = New Object() {ID, CodMOLULO, Codigo, Descripcion, Fecha, Tipo, Unidad, Jornal, JornalMes1, JornalMes2, JornalMes3, JornalMes4, JornalMes5, JornalMes6, JornalMes7, JornalMes8, JornalMes9, JornalMes10, JornalMes11, JornalMes12, Jornal2daMoneda, JornalMes12daMoneda, JornalMes22daMoneda, JornalMes32daMoneda, JornalMes42daMoneda, JornalMes52daMoneda, JornalMes62daMoneda, JornalMes72daMoneda, JornalMes82daMoneda, JornalMes92daMoneda, JornalMes102daMoneda, JornalMes112daMoneda, JornalMes122daMoneda, PorcentajeJornal, DiferenciaJornal, Bono, BonoMes1, BonoMes2, BonoMes3, BonoMes4, BonoMes5, BonoMes6, BonoMes7, BonoMes8, BonoMes9, BonoMes10, BonoMes11, BonoMes12, Bono2daMoneda, BonoMes12daMoneda, BonoMes22daMoneda, BonoMes32daMoneda, BonoMes42daMoneda, BonoMes52daMoneda, BonoMes62daMoneda, BonoMes72daMoneda, BonoMes82daMoneda, BonoMes92daMoneda, BonoMes102daMoneda, BonoMes112daMoneda, BonoMes122daMoneda, PorcentajeBono, DiferenciaBono}
            rowMOImpLBsSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMOImpLBsSRow)
            Return rowMOImpLBsSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MOImpLBsSDataTable = CType(MyBase.Clone,MOImpLBsSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MOImpLBsSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnCodMOLULO = MyBase.Columns("CodMOLULO")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnJornal = MyBase.Columns("Jornal")
            Me.columnJornalMes1 = MyBase.Columns("JornalMes1")
            Me.columnJornalMes2 = MyBase.Columns("JornalMes2")
            Me.columnJornalMes3 = MyBase.Columns("JornalMes3")
            Me.columnJornalMes4 = MyBase.Columns("JornalMes4")
            Me.columnJornalMes5 = MyBase.Columns("JornalMes5")
            Me.columnJornalMes6 = MyBase.Columns("JornalMes6")
            Me.columnJornalMes7 = MyBase.Columns("JornalMes7")
            Me.columnJornalMes8 = MyBase.Columns("JornalMes8")
            Me.columnJornalMes9 = MyBase.Columns("JornalMes9")
            Me.columnJornalMes10 = MyBase.Columns("JornalMes10")
            Me.columnJornalMes11 = MyBase.Columns("JornalMes11")
            Me.columnJornalMes12 = MyBase.Columns("JornalMes12")
            Me.columnJornal2daMoneda = MyBase.Columns("Jornal2daMoneda")
            Me.columnJornalMes12daMoneda = MyBase.Columns("JornalMes12daMoneda")
            Me.columnJornalMes22daMoneda = MyBase.Columns("JornalMes22daMoneda")
            Me.columnJornalMes32daMoneda = MyBase.Columns("JornalMes32daMoneda")
            Me.columnJornalMes42daMoneda = MyBase.Columns("JornalMes42daMoneda")
            Me.columnJornalMes52daMoneda = MyBase.Columns("JornalMes52daMoneda")
            Me.columnJornalMes62daMoneda = MyBase.Columns("JornalMes62daMoneda")
            Me.columnJornalMes72daMoneda = MyBase.Columns("JornalMes72daMoneda")
            Me.columnJornalMes82daMoneda = MyBase.Columns("JornalMes82daMoneda")
            Me.columnJornalMes92daMoneda = MyBase.Columns("JornalMes92daMoneda")
            Me.columnJornalMes102daMoneda = MyBase.Columns("JornalMes102daMoneda")
            Me.columnJornalMes112daMoneda = MyBase.Columns("JornalMes112daMoneda")
            Me.columnJornalMes122daMoneda = MyBase.Columns("JornalMes122daMoneda")
            Me.columnPorcentajeJornal = MyBase.Columns("PorcentajeJornal")
            Me.columnDiferenciaJornal = MyBase.Columns("DiferenciaJornal")
            Me.columnBono = MyBase.Columns("Bono")
            Me.columnBonoMes1 = MyBase.Columns("BonoMes1")
            Me.columnBonoMes2 = MyBase.Columns("BonoMes2")
            Me.columnBonoMes3 = MyBase.Columns("BonoMes3")
            Me.columnBonoMes4 = MyBase.Columns("BonoMes4")
            Me.columnBonoMes5 = MyBase.Columns("BonoMes5")
            Me.columnBonoMes6 = MyBase.Columns("BonoMes6")
            Me.columnBonoMes7 = MyBase.Columns("BonoMes7")
            Me.columnBonoMes8 = MyBase.Columns("BonoMes8")
            Me.columnBonoMes9 = MyBase.Columns("BonoMes9")
            Me.columnBonoMes10 = MyBase.Columns("BonoMes10")
            Me.columnBonoMes11 = MyBase.Columns("BonoMes11")
            Me.columnBonoMes12 = MyBase.Columns("BonoMes12")
            Me.columnBono2daMoneda = MyBase.Columns("Bono2daMoneda")
            Me.columnBonoMes12daMoneda = MyBase.Columns("BonoMes12daMoneda")
            Me.columnBonoMes22daMoneda = MyBase.Columns("BonoMes22daMoneda")
            Me.columnBonoMes32daMoneda = MyBase.Columns("BonoMes32daMoneda")
            Me.columnBonoMes42daMoneda = MyBase.Columns("BonoMes42daMoneda")
            Me.columnBonoMes52daMoneda = MyBase.Columns("BonoMes52daMoneda")
            Me.columnBonoMes62daMoneda = MyBase.Columns("BonoMes62daMoneda")
            Me.columnBonoMes72daMoneda = MyBase.Columns("BonoMes72daMoneda")
            Me.columnBonoMes82daMoneda = MyBase.Columns("BonoMes82daMoneda")
            Me.columnBonoMes92daMoneda = MyBase.Columns("BonoMes92daMoneda")
            Me.columnBonoMes102daMoneda = MyBase.Columns("BonoMes102daMoneda")
            Me.columnBonoMes112daMoneda = MyBase.Columns("BonoMes112daMoneda")
            Me.columnBonoMes122daMoneda = MyBase.Columns("BonoMes122daMoneda")
            Me.columnPorcentajeBono = MyBase.Columns("PorcentajeBono")
            Me.columnDiferenciaBono = MyBase.Columns("DiferenciaBono")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCodMOLULO = New Global.System.Data.DataColumn("CodMOLULO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMOLULO)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnJornal = New Global.System.Data.DataColumn("Jornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal)
            Me.columnJornalMes1 = New Global.System.Data.DataColumn("JornalMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes1)
            Me.columnJornalMes2 = New Global.System.Data.DataColumn("JornalMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes2)
            Me.columnJornalMes3 = New Global.System.Data.DataColumn("JornalMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes3)
            Me.columnJornalMes4 = New Global.System.Data.DataColumn("JornalMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes4)
            Me.columnJornalMes5 = New Global.System.Data.DataColumn("JornalMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes5)
            Me.columnJornalMes6 = New Global.System.Data.DataColumn("JornalMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes6)
            Me.columnJornalMes7 = New Global.System.Data.DataColumn("JornalMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes7)
            Me.columnJornalMes8 = New Global.System.Data.DataColumn("JornalMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes8)
            Me.columnJornalMes9 = New Global.System.Data.DataColumn("JornalMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes9)
            Me.columnJornalMes10 = New Global.System.Data.DataColumn("JornalMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes10)
            Me.columnJornalMes11 = New Global.System.Data.DataColumn("JornalMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes11)
            Me.columnJornalMes12 = New Global.System.Data.DataColumn("JornalMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes12)
            Me.columnJornal2daMoneda = New Global.System.Data.DataColumn("Jornal2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal2daMoneda)
            Me.columnJornalMes12daMoneda = New Global.System.Data.DataColumn("JornalMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes12daMoneda)
            Me.columnJornalMes22daMoneda = New Global.System.Data.DataColumn("JornalMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes22daMoneda)
            Me.columnJornalMes32daMoneda = New Global.System.Data.DataColumn("JornalMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes32daMoneda)
            Me.columnJornalMes42daMoneda = New Global.System.Data.DataColumn("JornalMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes42daMoneda)
            Me.columnJornalMes52daMoneda = New Global.System.Data.DataColumn("JornalMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes52daMoneda)
            Me.columnJornalMes62daMoneda = New Global.System.Data.DataColumn("JornalMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes62daMoneda)
            Me.columnJornalMes72daMoneda = New Global.System.Data.DataColumn("JornalMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes72daMoneda)
            Me.columnJornalMes82daMoneda = New Global.System.Data.DataColumn("JornalMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes82daMoneda)
            Me.columnJornalMes92daMoneda = New Global.System.Data.DataColumn("JornalMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes92daMoneda)
            Me.columnJornalMes102daMoneda = New Global.System.Data.DataColumn("JornalMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes102daMoneda)
            Me.columnJornalMes112daMoneda = New Global.System.Data.DataColumn("JornalMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes112daMoneda)
            Me.columnJornalMes122daMoneda = New Global.System.Data.DataColumn("JornalMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes122daMoneda)
            Me.columnPorcentajeJornal = New Global.System.Data.DataColumn("PorcentajeJornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeJornal)
            Me.columnDiferenciaJornal = New Global.System.Data.DataColumn("DiferenciaJornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaJornal)
            Me.columnBono = New Global.System.Data.DataColumn("Bono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono)
            Me.columnBonoMes1 = New Global.System.Data.DataColumn("BonoMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes1)
            Me.columnBonoMes2 = New Global.System.Data.DataColumn("BonoMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes2)
            Me.columnBonoMes3 = New Global.System.Data.DataColumn("BonoMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes3)
            Me.columnBonoMes4 = New Global.System.Data.DataColumn("BonoMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes4)
            Me.columnBonoMes5 = New Global.System.Data.DataColumn("BonoMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes5)
            Me.columnBonoMes6 = New Global.System.Data.DataColumn("BonoMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes6)
            Me.columnBonoMes7 = New Global.System.Data.DataColumn("BonoMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes7)
            Me.columnBonoMes8 = New Global.System.Data.DataColumn("BonoMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes8)
            Me.columnBonoMes9 = New Global.System.Data.DataColumn("BonoMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes9)
            Me.columnBonoMes10 = New Global.System.Data.DataColumn("BonoMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes10)
            Me.columnBonoMes11 = New Global.System.Data.DataColumn("BonoMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes11)
            Me.columnBonoMes12 = New Global.System.Data.DataColumn("BonoMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes12)
            Me.columnBono2daMoneda = New Global.System.Data.DataColumn("Bono2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono2daMoneda)
            Me.columnBonoMes12daMoneda = New Global.System.Data.DataColumn("BonoMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes12daMoneda)
            Me.columnBonoMes22daMoneda = New Global.System.Data.DataColumn("BonoMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes22daMoneda)
            Me.columnBonoMes32daMoneda = New Global.System.Data.DataColumn("BonoMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes32daMoneda)
            Me.columnBonoMes42daMoneda = New Global.System.Data.DataColumn("BonoMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes42daMoneda)
            Me.columnBonoMes52daMoneda = New Global.System.Data.DataColumn("BonoMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes52daMoneda)
            Me.columnBonoMes62daMoneda = New Global.System.Data.DataColumn("BonoMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes62daMoneda)
            Me.columnBonoMes72daMoneda = New Global.System.Data.DataColumn("BonoMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes72daMoneda)
            Me.columnBonoMes82daMoneda = New Global.System.Data.DataColumn("BonoMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes82daMoneda)
            Me.columnBonoMes92daMoneda = New Global.System.Data.DataColumn("BonoMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes92daMoneda)
            Me.columnBonoMes102daMoneda = New Global.System.Data.DataColumn("BonoMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes102daMoneda)
            Me.columnBonoMes112daMoneda = New Global.System.Data.DataColumn("BonoMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes112daMoneda)
            Me.columnBonoMes122daMoneda = New Global.System.Data.DataColumn("BonoMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes122daMoneda)
            Me.columnPorcentajeBono = New Global.System.Data.DataColumn("PorcentajeBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeBono)
            Me.columnDiferenciaBono = New Global.System.Data.DataColumn("DiferenciaBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaBono)
            Me.columnCodMOLULO.MaxLength = 8
            Me.columnDescripcion.MaxLength = 40
            Me.columnUnidad.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMOImpLBsSRow() As MOImpLBsSRow
            Return CType(Me.NewRow,MOImpLBsSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MOImpLBsSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MOImpLBsSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MOImpLBsSRowChangedEvent) Is Nothing) Then
                RaiseEvent MOImpLBsSRowChanged(Me, New MOImpLBsSRowChangeEvent(CType(e.Row,MOImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MOImpLBsSRowChangingEvent) Is Nothing) Then
                RaiseEvent MOImpLBsSRowChanging(Me, New MOImpLBsSRowChangeEvent(CType(e.Row,MOImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MOImpLBsSRowDeletedEvent) Is Nothing) Then
                RaiseEvent MOImpLBsSRowDeleted(Me, New MOImpLBsSRowChangeEvent(CType(e.Row,MOImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MOImpLBsSRowDeletingEvent) Is Nothing) Then
                RaiseEvent MOImpLBsSRowDeleting(Me, New MOImpLBsSRowChangeEvent(CType(e.Row,MOImpLBsSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMOImpLBsSRow(ByVal row As MOImpLBsSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MOImpLBsSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class obrasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private _columncod_obr As Global.System.Data.DataColumn
        
        Private _columndesc_obr As Global.System.Data.DataColumn
        
        Private columnObra As Global.System.Data.DataColumn
        
        Private columnFCAS As Global.System.Data.DataColumn
        
        Private columnAdministracion As Global.System.Data.DataColumn
        
        Private columnUtilidad As Global.System.Data.DataColumn
        
        Private columnRendimiento As Global.System.Data.DataColumn
        
        Private columnDig_Rend As Global.System.Data.DataColumn
        
        Private columnIVA As Global.System.Data.DataColumn
        
        Private columnCant_Part As Global.System.Data.DataColumn
        
        Private columnCant_Analisis As Global.System.Data.DataColumn
        
        Private columnDiv_Mat As Global.System.Data.DataColumn
        
        Private columnBase_MAT As Global.System.Data.DataColumn
        
        Private columnBase_EQP As Global.System.Data.DataColumn
        
        Private columnBase_MO As Global.System.Data.DataColumn
        
        Private columnBase_Partidas As Global.System.Data.DataColumn
        
        Private columnFechaB_MAT As Global.System.Data.DataColumn
        
        Private columnFechaB_EQP As Global.System.Data.DataColumn
        
        Private columnFechaB_MO As Global.System.Data.DataColumn
        
        Private columnFechaB_PART As Global.System.Data.DataColumn
        
        Private columnMoneda_P As Global.System.Data.DataColumn
        
        Private columnMoneda_S As Global.System.Data.DataColumn
        
        Private columnPropietario As Global.System.Data.DataColumn
        
        Private columnIngFirma As Global.System.Data.DataColumn
        
        Private columnCIV_Firma As Global.System.Data.DataColumn
        
        Private columnIngRevisa As Global.System.Data.DataColumn
        
        Private columnCIV_Revisa As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "obras"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_obrColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_obr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _desc_obrColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columndesc_obr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFCAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdministracionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdministracion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UtilidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUtilidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RendimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRendimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dig_RendColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDig_Rend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cant_PartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCant_Part
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cant_AnalisisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCant_Analisis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Div_MatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiv_Mat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Base_MATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBase_MAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Base_EQPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBase_EQP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Base_MOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBase_MO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Base_PartidasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBase_Partidas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaB_MATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaB_MAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaB_EQPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaB_EQP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaB_MOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaB_MO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaB_PARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaB_PART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Moneda_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Moneda_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropietarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropietario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngFirmaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngFirma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIV_FirmaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIV_Firma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngRevisaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngRevisa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIV_RevisaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIV_Revisa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As obrasRow
            Get
                Return CType(Me.Rows(index),obrasRow)
            End Get
        End Property
        
        Public Event obrasRowChanging As obrasRowChangeEventHandler
        
        Public Event obrasRowChanged As obrasRowChangeEventHandler
        
        Public Event obrasRowDeleting As obrasRowChangeEventHandler
        
        Public Event obrasRowDeleted As obrasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddobrasRow(ByVal row As obrasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddobrasRow( _
                    ByVal _cod_obr As String,  _
                    ByVal _desc_obr As String,  _
                    ByVal Obra As String,  _
                    ByVal FCAS As Double,  _
                    ByVal Administracion As Double,  _
                    ByVal Utilidad As Double,  _
                    ByVal Rendimiento As Double,  _
                    ByVal Dig_Rend As Double,  _
                    ByVal IVA As Double,  _
                    ByVal Cant_Part As Double,  _
                    ByVal Cant_Analisis As Double,  _
                    ByVal Div_Mat As String,  _
                    ByVal Base_MAT As String,  _
                    ByVal Base_EQP As String,  _
                    ByVal Base_MO As String,  _
                    ByVal Base_Partidas As String,  _
                    ByVal FechaB_MAT As Date,  _
                    ByVal FechaB_EQP As Date,  _
                    ByVal FechaB_MO As Date,  _
                    ByVal FechaB_PART As Date,  _
                    ByVal Moneda_P As String,  _
                    ByVal Moneda_S As String,  _
                    ByVal Propietario As String,  _
                    ByVal IngFirma As String,  _
                    ByVal CIV_Firma As String,  _
                    ByVal IngRevisa As String,  _
                    ByVal CIV_Revisa As Double) As obrasRow
            Dim rowobrasRow As obrasRow = CType(Me.NewRow,obrasRow)
            Dim columnValuesArray() As Object = New Object() {_cod_obr, _desc_obr, Obra, FCAS, Administracion, Utilidad, Rendimiento, Dig_Rend, IVA, Cant_Part, Cant_Analisis, Div_Mat, Base_MAT, Base_EQP, Base_MO, Base_Partidas, FechaB_MAT, FechaB_EQP, FechaB_MO, FechaB_PART, Moneda_P, Moneda_S, Propietario, IngFirma, CIV_Firma, IngRevisa, CIV_Revisa}
            rowobrasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowobrasRow)
            Return rowobrasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As obrasDataTable = CType(MyBase.Clone,obrasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New obrasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columncod_obr = MyBase.Columns("cod-obr")
            Me._columndesc_obr = MyBase.Columns("desc-obr")
            Me.columnObra = MyBase.Columns("Obra")
            Me.columnFCAS = MyBase.Columns("FCAS")
            Me.columnAdministracion = MyBase.Columns("Administracion")
            Me.columnUtilidad = MyBase.Columns("Utilidad")
            Me.columnRendimiento = MyBase.Columns("Rendimiento")
            Me.columnDig_Rend = MyBase.Columns("Dig_Rend")
            Me.columnIVA = MyBase.Columns("IVA")
            Me.columnCant_Part = MyBase.Columns("Cant_Part")
            Me.columnCant_Analisis = MyBase.Columns("Cant_Analisis")
            Me.columnDiv_Mat = MyBase.Columns("Div_Mat")
            Me.columnBase_MAT = MyBase.Columns("Base_MAT")
            Me.columnBase_EQP = MyBase.Columns("Base_EQP")
            Me.columnBase_MO = MyBase.Columns("Base_MO")
            Me.columnBase_Partidas = MyBase.Columns("Base_Partidas")
            Me.columnFechaB_MAT = MyBase.Columns("FechaB_MAT")
            Me.columnFechaB_EQP = MyBase.Columns("FechaB_EQP")
            Me.columnFechaB_MO = MyBase.Columns("FechaB_MO")
            Me.columnFechaB_PART = MyBase.Columns("FechaB_PART")
            Me.columnMoneda_P = MyBase.Columns("Moneda_P")
            Me.columnMoneda_S = MyBase.Columns("Moneda_S")
            Me.columnPropietario = MyBase.Columns("Propietario")
            Me.columnIngFirma = MyBase.Columns("IngFirma")
            Me.columnCIV_Firma = MyBase.Columns("CIV_Firma")
            Me.columnIngRevisa = MyBase.Columns("IngRevisa")
            Me.columnCIV_Revisa = MyBase.Columns("CIV_Revisa")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columncod_obr = New Global.System.Data.DataColumn("cod-obr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_obr.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_obr")
            Me._columncod_obr.ExtendedProperties.Add("Generator_UserColumnName", "cod-obr")
            MyBase.Columns.Add(Me._columncod_obr)
            Me._columndesc_obr = New Global.System.Data.DataColumn("desc-obr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columndesc_obr.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columndesc_obr")
            Me._columndesc_obr.ExtendedProperties.Add("Generator_UserColumnName", "desc-obr")
            MyBase.Columns.Add(Me._columndesc_obr)
            Me.columnObra = New Global.System.Data.DataColumn("Obra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObra)
            Me.columnFCAS = New Global.System.Data.DataColumn("FCAS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCAS)
            Me.columnAdministracion = New Global.System.Data.DataColumn("Administracion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdministracion)
            Me.columnUtilidad = New Global.System.Data.DataColumn("Utilidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUtilidad)
            Me.columnRendimiento = New Global.System.Data.DataColumn("Rendimiento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRendimiento)
            Me.columnDig_Rend = New Global.System.Data.DataColumn("Dig_Rend", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDig_Rend)
            Me.columnIVA = New Global.System.Data.DataColumn("IVA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVA)
            Me.columnCant_Part = New Global.System.Data.DataColumn("Cant_Part", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCant_Part)
            Me.columnCant_Analisis = New Global.System.Data.DataColumn("Cant_Analisis", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCant_Analisis)
            Me.columnDiv_Mat = New Global.System.Data.DataColumn("Div_Mat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiv_Mat)
            Me.columnBase_MAT = New Global.System.Data.DataColumn("Base_MAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBase_MAT)
            Me.columnBase_EQP = New Global.System.Data.DataColumn("Base_EQP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBase_EQP)
            Me.columnBase_MO = New Global.System.Data.DataColumn("Base_MO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBase_MO)
            Me.columnBase_Partidas = New Global.System.Data.DataColumn("Base_Partidas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBase_Partidas)
            Me.columnFechaB_MAT = New Global.System.Data.DataColumn("FechaB_MAT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaB_MAT)
            Me.columnFechaB_EQP = New Global.System.Data.DataColumn("FechaB_EQP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaB_EQP)
            Me.columnFechaB_MO = New Global.System.Data.DataColumn("FechaB_MO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaB_MO)
            Me.columnFechaB_PART = New Global.System.Data.DataColumn("FechaB_PART", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaB_PART)
            Me.columnMoneda_P = New Global.System.Data.DataColumn("Moneda_P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda_P)
            Me.columnMoneda_S = New Global.System.Data.DataColumn("Moneda_S", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda_S)
            Me.columnPropietario = New Global.System.Data.DataColumn("Propietario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropietario)
            Me.columnIngFirma = New Global.System.Data.DataColumn("IngFirma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngFirma)
            Me.columnCIV_Firma = New Global.System.Data.DataColumn("CIV_Firma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIV_Firma)
            Me.columnIngRevisa = New Global.System.Data.DataColumn("IngRevisa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngRevisa)
            Me.columnCIV_Revisa = New Global.System.Data.DataColumn("CIV_Revisa", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIV_Revisa)
            Me._columncod_obr.MaxLength = 16
            Me._columndesc_obr.MaxLength = 54
            Me.columnObra.MaxLength = 7
            Me.columnDiv_Mat.MaxLength = 1
            Me.columnBase_MAT.MaxLength = 14
            Me.columnBase_EQP.MaxLength = 9
            Me.columnBase_MO.MaxLength = 14
            Me.columnBase_Partidas.MaxLength = 14
            Me.columnMoneda_P.MaxLength = 4
            Me.columnMoneda_S.MaxLength = 3
            Me.columnPropietario.MaxLength = 1
            Me.columnIngFirma.MaxLength = 13
            Me.columnCIV_Firma.MaxLength = 1
            Me.columnIngRevisa.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewobrasRow() As obrasRow
            Return CType(Me.NewRow,obrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New obrasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(obrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.obrasRowChangedEvent) Is Nothing) Then
                RaiseEvent obrasRowChanged(Me, New obrasRowChangeEvent(CType(e.Row,obrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.obrasRowChangingEvent) Is Nothing) Then
                RaiseEvent obrasRowChanging(Me, New obrasRowChangeEvent(CType(e.Row,obrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.obrasRowDeletedEvent) Is Nothing) Then
                RaiseEvent obrasRowDeleted(Me, New obrasRowChangeEvent(CType(e.Row,obrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.obrasRowDeletingEvent) Is Nothing) Then
                RaiseEvent obrasRowDeleting(Me, New obrasRowChangeEvent(CType(e.Row,obrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveobrasRow(ByVal row As obrasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "obrasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PartEqCDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodInterno As Global.System.Data.DataColumn
        
        Private columnLista As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnDepreciacion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PartEqC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLista
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepreciacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepreciacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PartEqCRow
            Get
                Return CType(Me.Rows(index),PartEqCRow)
            End Get
        End Property
        
        Public Event PartEqCRowChanging As PartEqCRowChangeEventHandler
        
        Public Event PartEqCRowChanged As PartEqCRowChangeEventHandler
        
        Public Event PartEqCRowDeleting As PartEqCRowChangeEventHandler
        
        Public Event PartEqCRowDeleted As PartEqCRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPartEqCRow(ByVal row As PartEqCRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPartEqCRow(ByVal CodInterno As Double, ByVal Lista As Double, ByVal ID As Double, ByVal Codigo As Double, ByVal Descripcion As String, ByVal Unidad As String, ByVal Cantidad As Double, ByVal Precio As Double, ByVal Depreciacion As Double) As PartEqCRow
            Dim rowPartEqCRow As PartEqCRow = CType(Me.NewRow,PartEqCRow)
            Dim columnValuesArray() As Object = New Object() {CodInterno, Lista, ID, Codigo, Descripcion, Unidad, Cantidad, Precio, Depreciacion}
            rowPartEqCRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPartEqCRow)
            Return rowPartEqCRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PartEqCDataTable = CType(MyBase.Clone,PartEqCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PartEqCDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodInterno = MyBase.Columns("CodInterno")
            Me.columnLista = MyBase.Columns("Lista")
            Me.columnID = MyBase.Columns("ID")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnDepreciacion = MyBase.Columns("Depreciacion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodInterno = New Global.System.Data.DataColumn("CodInterno", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodInterno)
            Me.columnLista = New Global.System.Data.DataColumn("Lista", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLista)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnDepreciacion = New Global.System.Data.DataColumn("Depreciacion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepreciacion)
            Me.columnDescripcion.MaxLength = 55
            Me.columnUnidad.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPartEqCRow() As PartEqCRow
            Return CType(Me.NewRow,PartEqCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PartEqCRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PartEqCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PartEqCRowChangedEvent) Is Nothing) Then
                RaiseEvent PartEqCRowChanged(Me, New PartEqCRowChangeEvent(CType(e.Row,PartEqCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PartEqCRowChangingEvent) Is Nothing) Then
                RaiseEvent PartEqCRowChanging(Me, New PartEqCRowChangeEvent(CType(e.Row,PartEqCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PartEqCRowDeletedEvent) Is Nothing) Then
                RaiseEvent PartEqCRowDeleted(Me, New PartEqCRowChangeEvent(CType(e.Row,PartEqCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PartEqCRowDeletingEvent) Is Nothing) Then
                RaiseEvent PartEqCRowDeleting(Me, New PartEqCRowChangeEvent(CType(e.Row,PartEqCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePartEqCRow(ByVal row As PartEqCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PartEqCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EqpCompuestoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodInterno As Global.System.Data.DataColumn
        
        Private columnLista As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnEquipoComp_Descripcion As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnDepreciacion As Global.System.Data.DataColumn
        
        Private columnMasterEqp_Descripcion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EqpCompuesto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLista
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EquipoComp_DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEquipoComp_Descripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepreciacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepreciacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MasterEqp_DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMasterEqp_Descripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EqpCompuestoRow
            Get
                Return CType(Me.Rows(index),EqpCompuestoRow)
            End Get
        End Property
        
        Public Event EqpCompuestoRowChanging As EqpCompuestoRowChangeEventHandler
        
        Public Event EqpCompuestoRowChanged As EqpCompuestoRowChangeEventHandler
        
        Public Event EqpCompuestoRowDeleting As EqpCompuestoRowChangeEventHandler
        
        Public Event EqpCompuestoRowDeleted As EqpCompuestoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEqpCompuestoRow(ByVal row As EqpCompuestoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEqpCompuestoRow(ByVal CodInterno As Double, ByVal Lista As Double, ByVal ID As Double, ByVal Codigo As Double, ByVal EquipoComp_Descripcion As String, ByVal Unidad As String, ByVal Cantidad As Double, ByVal Precio As Double, ByVal Depreciacion As Double, ByVal MasterEqp_Descripcion As String) As EqpCompuestoRow
            Dim rowEqpCompuestoRow As EqpCompuestoRow = CType(Me.NewRow,EqpCompuestoRow)
            Dim columnValuesArray() As Object = New Object() {CodInterno, Lista, ID, Codigo, EquipoComp_Descripcion, Unidad, Cantidad, Precio, Depreciacion, MasterEqp_Descripcion}
            rowEqpCompuestoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEqpCompuestoRow)
            Return rowEqpCompuestoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EqpCompuestoDataTable = CType(MyBase.Clone,EqpCompuestoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EqpCompuestoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodInterno = MyBase.Columns("CodInterno")
            Me.columnLista = MyBase.Columns("Lista")
            Me.columnID = MyBase.Columns("ID")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnEquipoComp_Descripcion = MyBase.Columns("EquipoComp_Descripcion")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnDepreciacion = MyBase.Columns("Depreciacion")
            Me.columnMasterEqp_Descripcion = MyBase.Columns("MasterEqp_Descripcion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodInterno = New Global.System.Data.DataColumn("CodInterno", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodInterno)
            Me.columnLista = New Global.System.Data.DataColumn("Lista", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLista)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnEquipoComp_Descripcion = New Global.System.Data.DataColumn("EquipoComp_Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEquipoComp_Descripcion)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnDepreciacion = New Global.System.Data.DataColumn("Depreciacion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepreciacion)
            Me.columnMasterEqp_Descripcion = New Global.System.Data.DataColumn("MasterEqp_Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMasterEqp_Descripcion)
            Me.columnEquipoComp_Descripcion.MaxLength = 55
            Me.columnUnidad.MaxLength = 5
            Me.columnMasterEqp_Descripcion.MaxLength = 55
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEqpCompuestoRow() As EqpCompuestoRow
            Return CType(Me.NewRow,EqpCompuestoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EqpCompuestoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EqpCompuestoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EqpCompuestoRowChangedEvent) Is Nothing) Then
                RaiseEvent EqpCompuestoRowChanged(Me, New EqpCompuestoRowChangeEvent(CType(e.Row,EqpCompuestoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EqpCompuestoRowChangingEvent) Is Nothing) Then
                RaiseEvent EqpCompuestoRowChanging(Me, New EqpCompuestoRowChangeEvent(CType(e.Row,EqpCompuestoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EqpCompuestoRowDeletedEvent) Is Nothing) Then
                RaiseEvent EqpCompuestoRowDeleted(Me, New EqpCompuestoRowChangeEvent(CType(e.Row,EqpCompuestoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EqpCompuestoRowDeletingEvent) Is Nothing) Then
                RaiseEvent EqpCompuestoRowDeleting(Me, New EqpCompuestoRowChangeEvent(CType(e.Row,EqpCompuestoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEqpCompuestoRow(ByVal row As EqpCompuestoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EqpCompuestoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MMaterialDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnDiferencia As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnGrupoBCV As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnSuplidor As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPrecioMes1 As Global.System.Data.DataColumn
        
        Private columnPrecioMes2 As Global.System.Data.DataColumn
        
        Private columnPrecioMes3 As Global.System.Data.DataColumn
        
        Private columnPrecioMes4 As Global.System.Data.DataColumn
        
        Private columnPrecioMes5 As Global.System.Data.DataColumn
        
        Private columnPrecioMes6 As Global.System.Data.DataColumn
        
        Private columnPrecioMes7 As Global.System.Data.DataColumn
        
        Private columnPrecioMes8 As Global.System.Data.DataColumn
        
        Private columnPrecioMes9 As Global.System.Data.DataColumn
        
        Private columnPrecioMes10 As Global.System.Data.DataColumn
        
        Private columnPrecioMes11 As Global.System.Data.DataColumn
        
        Private columnPrecioMes12 As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario As Global.System.Data.DataColumn
        
        Private columnPorcentajeDiferencia As Global.System.Data.DataColumn
        
        Private columnPrecioMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario2daMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MMaterial"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrupoBCVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrupoBCV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuplidorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuplidor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitario2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MMaterialRow
            Get
                Return CType(Me.Rows(index),MMaterialRow)
            End Get
        End Property
        
        Public Event MMaterialRowChanging As MMaterialRowChangeEventHandler
        
        Public Event MMaterialRowChanged As MMaterialRowChangeEventHandler
        
        Public Event MMaterialRowDeleting As MMaterialRowChangeEventHandler
        
        Public Event MMaterialRowDeleted As MMaterialRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMMaterialRow(ByVal row As MMaterialRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMMaterialRow( _
                    ByVal Codigo As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal Diferencia As Double,  _
                    ByVal Fecha As Date,  _
                    ByVal GrupoBCV As Double,  _
                    ByVal Unidad As String,  _
                    ByVal Suplidor As String,  _
                    ByVal Tipo As Double,  _
                    ByVal ID As Double,  _
                    ByVal PrecioMes1 As Double,  _
                    ByVal PrecioMes2 As Double,  _
                    ByVal PrecioMes3 As Double,  _
                    ByVal PrecioMes4 As Double,  _
                    ByVal PrecioMes5 As Double,  _
                    ByVal PrecioMes6 As Double,  _
                    ByVal PrecioMes7 As Double,  _
                    ByVal PrecioMes8 As Double,  _
                    ByVal PrecioMes9 As Double,  _
                    ByVal PrecioMes10 As Double,  _
                    ByVal PrecioMes11 As Double,  _
                    ByVal PrecioMes12 As Double,  _
                    ByVal PrecioUnitario As Double,  _
                    ByVal PorcentajeDiferencia As String,  _
                    ByVal PrecioMes12daMoneda As Double,  _
                    ByVal PrecioMes22daMoneda As Double,  _
                    ByVal PrecioMes32daMoneda As Double,  _
                    ByVal PrecioMes42daMoneda As Double,  _
                    ByVal PrecioMes52daMoneda As Double,  _
                    ByVal PrecioMes62daMoneda As Double,  _
                    ByVal PrecioMes72daMoneda As Double,  _
                    ByVal PrecioMes82daMoneda As Double,  _
                    ByVal PrecioMes92daMoneda As Double,  _
                    ByVal PrecioMes102daMoneda As Double,  _
                    ByVal PrecioMes112daMoneda As Double,  _
                    ByVal PrecioMes122daMoneda As Double,  _
                    ByVal PrecioUnitario2daMoneda As Double) As MMaterialRow
            Dim rowMMaterialRow As MMaterialRow = CType(Me.NewRow,MMaterialRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Descripcion, Diferencia, Fecha, GrupoBCV, Unidad, Suplidor, Tipo, ID, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, PrecioUnitario, PorcentajeDiferencia, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, PrecioMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, PrecioMes112daMoneda, PrecioMes122daMoneda, PrecioUnitario2daMoneda}
            rowMMaterialRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMMaterialRow)
            Return rowMMaterialRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MMaterialDataTable = CType(MyBase.Clone,MMaterialDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MMaterialDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnDiferencia = MyBase.Columns("Diferencia")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnGrupoBCV = MyBase.Columns("GrupoBCV")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnSuplidor = MyBase.Columns("Suplidor")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnID = MyBase.Columns("ID")
            Me.columnPrecioMes1 = MyBase.Columns("PrecioMes1")
            Me.columnPrecioMes2 = MyBase.Columns("PrecioMes2")
            Me.columnPrecioMes3 = MyBase.Columns("PrecioMes3")
            Me.columnPrecioMes4 = MyBase.Columns("PrecioMes4")
            Me.columnPrecioMes5 = MyBase.Columns("PrecioMes5")
            Me.columnPrecioMes6 = MyBase.Columns("PrecioMes6")
            Me.columnPrecioMes7 = MyBase.Columns("PrecioMes7")
            Me.columnPrecioMes8 = MyBase.Columns("PrecioMes8")
            Me.columnPrecioMes9 = MyBase.Columns("PrecioMes9")
            Me.columnPrecioMes10 = MyBase.Columns("PrecioMes10")
            Me.columnPrecioMes11 = MyBase.Columns("PrecioMes11")
            Me.columnPrecioMes12 = MyBase.Columns("PrecioMes12")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnPorcentajeDiferencia = MyBase.Columns("PorcentajeDiferencia")
            Me.columnPrecioMes12daMoneda = MyBase.Columns("PrecioMes12daMoneda")
            Me.columnPrecioMes22daMoneda = MyBase.Columns("PrecioMes22daMoneda")
            Me.columnPrecioMes32daMoneda = MyBase.Columns("PrecioMes32daMoneda")
            Me.columnPrecioMes42daMoneda = MyBase.Columns("PrecioMes42daMoneda")
            Me.columnPrecioMes52daMoneda = MyBase.Columns("PrecioMes52daMoneda")
            Me.columnPrecioMes62daMoneda = MyBase.Columns("PrecioMes62daMoneda")
            Me.columnPrecioMes72daMoneda = MyBase.Columns("PrecioMes72daMoneda")
            Me.columnPrecioMes82daMoneda = MyBase.Columns("PrecioMes82daMoneda")
            Me.columnPrecioMes92daMoneda = MyBase.Columns("PrecioMes92daMoneda")
            Me.columnPrecioMes102daMoneda = MyBase.Columns("PrecioMes102daMoneda")
            Me.columnPrecioMes112daMoneda = MyBase.Columns("PrecioMes112daMoneda")
            Me.columnPrecioMes122daMoneda = MyBase.Columns("PrecioMes122daMoneda")
            Me.columnPrecioUnitario2daMoneda = MyBase.Columns("PrecioUnitario2daMoneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnDiferencia = New Global.System.Data.DataColumn("Diferencia", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferencia)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnGrupoBCV = New Global.System.Data.DataColumn("GrupoBCV", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrupoBCV)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnSuplidor = New Global.System.Data.DataColumn("Suplidor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuplidor)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPrecioMes1 = New Global.System.Data.DataColumn("PrecioMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes1)
            Me.columnPrecioMes2 = New Global.System.Data.DataColumn("PrecioMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes2)
            Me.columnPrecioMes3 = New Global.System.Data.DataColumn("PrecioMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes3)
            Me.columnPrecioMes4 = New Global.System.Data.DataColumn("PrecioMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes4)
            Me.columnPrecioMes5 = New Global.System.Data.DataColumn("PrecioMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes5)
            Me.columnPrecioMes6 = New Global.System.Data.DataColumn("PrecioMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes6)
            Me.columnPrecioMes7 = New Global.System.Data.DataColumn("PrecioMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes7)
            Me.columnPrecioMes8 = New Global.System.Data.DataColumn("PrecioMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes8)
            Me.columnPrecioMes9 = New Global.System.Data.DataColumn("PrecioMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes9)
            Me.columnPrecioMes10 = New Global.System.Data.DataColumn("PrecioMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes10)
            Me.columnPrecioMes11 = New Global.System.Data.DataColumn("PrecioMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes11)
            Me.columnPrecioMes12 = New Global.System.Data.DataColumn("PrecioMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12)
            Me.columnPrecioUnitario = New Global.System.Data.DataColumn("PrecioUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnPorcentajeDiferencia = New Global.System.Data.DataColumn("PorcentajeDiferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDiferencia)
            Me.columnPrecioMes12daMoneda = New Global.System.Data.DataColumn("PrecioMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12daMoneda)
            Me.columnPrecioMes22daMoneda = New Global.System.Data.DataColumn("PrecioMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes22daMoneda)
            Me.columnPrecioMes32daMoneda = New Global.System.Data.DataColumn("PrecioMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes32daMoneda)
            Me.columnPrecioMes42daMoneda = New Global.System.Data.DataColumn("PrecioMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes42daMoneda)
            Me.columnPrecioMes52daMoneda = New Global.System.Data.DataColumn("PrecioMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes52daMoneda)
            Me.columnPrecioMes62daMoneda = New Global.System.Data.DataColumn("PrecioMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes62daMoneda)
            Me.columnPrecioMes72daMoneda = New Global.System.Data.DataColumn("PrecioMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes72daMoneda)
            Me.columnPrecioMes82daMoneda = New Global.System.Data.DataColumn("PrecioMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes82daMoneda)
            Me.columnPrecioMes92daMoneda = New Global.System.Data.DataColumn("PrecioMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes92daMoneda)
            Me.columnPrecioMes102daMoneda = New Global.System.Data.DataColumn("PrecioMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes102daMoneda)
            Me.columnPrecioMes112daMoneda = New Global.System.Data.DataColumn("PrecioMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes112daMoneda)
            Me.columnPrecioMes122daMoneda = New Global.System.Data.DataColumn("PrecioMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes122daMoneda)
            Me.columnPrecioUnitario2daMoneda = New Global.System.Data.DataColumn("PrecioUnitario2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario2daMoneda)
            Me.columnDescripcion.MaxLength = 55
            Me.columnUnidad.MaxLength = 5
            Me.columnSuplidor.MaxLength = 48
            Me.columnPorcentajeDiferencia.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMMaterialRow() As MMaterialRow
            Return CType(Me.NewRow,MMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MMaterialRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MMaterialRowChangedEvent) Is Nothing) Then
                RaiseEvent MMaterialRowChanged(Me, New MMaterialRowChangeEvent(CType(e.Row,MMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MMaterialRowChangingEvent) Is Nothing) Then
                RaiseEvent MMaterialRowChanging(Me, New MMaterialRowChangeEvent(CType(e.Row,MMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MMaterialRowDeletedEvent) Is Nothing) Then
                RaiseEvent MMaterialRowDeleted(Me, New MMaterialRowChangeEvent(CType(e.Row,MMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MMaterialRowDeletingEvent) Is Nothing) Then
                RaiseEvent MMaterialRowDeleting(Me, New MMaterialRowChangeEvent(CType(e.Row,MMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMMaterialRow(ByVal row As MMaterialRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MMaterialDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MObraDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnJornal As Global.System.Data.DataColumn
        
        Private columnBono As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnJornalMes1 As Global.System.Data.DataColumn
        
        Private columnJornalMes2 As Global.System.Data.DataColumn
        
        Private columnJornalMes3 As Global.System.Data.DataColumn
        
        Private columnJornalMes4 As Global.System.Data.DataColumn
        
        Private columnJornalMes5 As Global.System.Data.DataColumn
        
        Private columnJornalMes6 As Global.System.Data.DataColumn
        
        Private columnJornalMes7 As Global.System.Data.DataColumn
        
        Private columnJornalMes8 As Global.System.Data.DataColumn
        
        Private columnJornalMes9 As Global.System.Data.DataColumn
        
        Private columnJornalMes10 As Global.System.Data.DataColumn
        
        Private columnJornalMes11 As Global.System.Data.DataColumn
        
        Private columnJornalMes12 As Global.System.Data.DataColumn
        
        Private columnBonoMes1 As Global.System.Data.DataColumn
        
        Private columnBonoMes2 As Global.System.Data.DataColumn
        
        Private columnBonoMes3 As Global.System.Data.DataColumn
        
        Private columnBonoMes4 As Global.System.Data.DataColumn
        
        Private columnBonoMes5 As Global.System.Data.DataColumn
        
        Private columnBonoMes6 As Global.System.Data.DataColumn
        
        Private columnBonoMes7 As Global.System.Data.DataColumn
        
        Private columnBonoMes8 As Global.System.Data.DataColumn
        
        Private columnBonoMes9 As Global.System.Data.DataColumn
        
        Private columnBonoMes10 As Global.System.Data.DataColumn
        
        Private columnBonoMes11 As Global.System.Data.DataColumn
        
        Private columnBonoMes12 As Global.System.Data.DataColumn
        
        Private columnJornal2daMoneda As Global.System.Data.DataColumn
        
        Private columnBono2daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnJornalMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnBonoMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnDiferenciaJornal As Global.System.Data.DataColumn
        
        Private columnDiferenciaBono As Global.System.Data.DataColumn
        
        Private columnPorcentajeJornal As Global.System.Data.DataColumn
        
        Private columnPorcentajeBono As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MObra"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jornal2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bono2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonoMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaJornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferenciaBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeJornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MObraRow
            Get
                Return CType(Me.Rows(index),MObraRow)
            End Get
        End Property
        
        Public Event MObraRowChanging As MObraRowChangeEventHandler
        
        Public Event MObraRowChanged As MObraRowChangeEventHandler
        
        Public Event MObraRowDeleting As MObraRowChangeEventHandler
        
        Public Event MObraRowDeleted As MObraRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMObraRow(ByVal row As MObraRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMObraRow( _
                    ByVal ID As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal Codigo As Double,  _
                    ByVal Unidad As String,  _
                    ByVal Fecha As Date,  _
                    ByVal Jornal As Double,  _
                    ByVal Bono As Double,  _
                    ByVal Tipo As Double,  _
                    ByVal JornalMes1 As Double,  _
                    ByVal JornalMes2 As Double,  _
                    ByVal JornalMes3 As Double,  _
                    ByVal JornalMes4 As Double,  _
                    ByVal JornalMes5 As Double,  _
                    ByVal JornalMes6 As Double,  _
                    ByVal JornalMes7 As Double,  _
                    ByVal JornalMes8 As Double,  _
                    ByVal JornalMes9 As Double,  _
                    ByVal JornalMes10 As Double,  _
                    ByVal JornalMes11 As Double,  _
                    ByVal JornalMes12 As Double,  _
                    ByVal BonoMes1 As Double,  _
                    ByVal BonoMes2 As Double,  _
                    ByVal BonoMes3 As Double,  _
                    ByVal BonoMes4 As Double,  _
                    ByVal BonoMes5 As Double,  _
                    ByVal BonoMes6 As Double,  _
                    ByVal BonoMes7 As Double,  _
                    ByVal BonoMes8 As Double,  _
                    ByVal BonoMes9 As Double,  _
                    ByVal BonoMes10 As Double,  _
                    ByVal BonoMes11 As Double,  _
                    ByVal BonoMes12 As Double,  _
                    ByVal Jornal2daMoneda As Double,  _
                    ByVal Bono2daMoneda As Double,  _
                    ByVal JornalMes12daMoneda As Double,  _
                    ByVal JornalMes22daMoneda As Double,  _
                    ByVal JornalMes32daMoneda As Double,  _
                    ByVal JornalMes42daMoneda As Double,  _
                    ByVal JornalMes52daMoneda As Double,  _
                    ByVal JornalMes62daMoneda As Double,  _
                    ByVal JornalMes72daMoneda As Double,  _
                    ByVal JornalMes82daMoneda As Double,  _
                    ByVal JornalMes92daMoneda As Double,  _
                    ByVal JornalMes102daMoneda As Double,  _
                    ByVal JornalMes112daMoneda As Double,  _
                    ByVal JornalMes122daMoneda As Double,  _
                    ByVal BonoMes12daMoneda As Double,  _
                    ByVal BonoMes22daMoneda As Double,  _
                    ByVal BonoMes32daMoneda As Double,  _
                    ByVal BonoMes42daMoneda As Double,  _
                    ByVal BonoMes52daMoneda As Double,  _
                    ByVal BonoMes62daMoneda As Double,  _
                    ByVal BonoMes72daMoneda As Double,  _
                    ByVal BonoMes82daMoneda As Double,  _
                    ByVal BonoMes92daMoneda As Double,  _
                    ByVal BonoMes102daMoneda As Double,  _
                    ByVal BonoMes112daMoneda As Double,  _
                    ByVal BonoMes122daMoneda As Double,  _
                    ByVal DiferenciaJornal As Double,  _
                    ByVal DiferenciaBono As Double,  _
                    ByVal PorcentajeJornal As Double,  _
                    ByVal PorcentajeBono As Double) As MObraRow
            Dim rowMObraRow As MObraRow = CType(Me.NewRow,MObraRow)
            Dim columnValuesArray() As Object = New Object() {ID, Descripcion, Codigo, Unidad, Fecha, Jornal, Bono, Tipo, JornalMes1, JornalMes2, JornalMes3, JornalMes4, JornalMes5, JornalMes6, JornalMes7, JornalMes8, JornalMes9, JornalMes10, JornalMes11, JornalMes12, BonoMes1, BonoMes2, BonoMes3, BonoMes4, BonoMes5, BonoMes6, BonoMes7, BonoMes8, BonoMes9, BonoMes10, BonoMes11, BonoMes12, Jornal2daMoneda, Bono2daMoneda, JornalMes12daMoneda, JornalMes22daMoneda, JornalMes32daMoneda, JornalMes42daMoneda, JornalMes52daMoneda, JornalMes62daMoneda, JornalMes72daMoneda, JornalMes82daMoneda, JornalMes92daMoneda, JornalMes102daMoneda, JornalMes112daMoneda, JornalMes122daMoneda, BonoMes12daMoneda, BonoMes22daMoneda, BonoMes32daMoneda, BonoMes42daMoneda, BonoMes52daMoneda, BonoMes62daMoneda, BonoMes72daMoneda, BonoMes82daMoneda, BonoMes92daMoneda, BonoMes102daMoneda, BonoMes112daMoneda, BonoMes122daMoneda, DiferenciaJornal, DiferenciaBono, PorcentajeJornal, PorcentajeBono}
            rowMObraRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMObraRow)
            Return rowMObraRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MObraDataTable = CType(MyBase.Clone,MObraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MObraDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnJornal = MyBase.Columns("Jornal")
            Me.columnBono = MyBase.Columns("Bono")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnJornalMes1 = MyBase.Columns("JornalMes1")
            Me.columnJornalMes2 = MyBase.Columns("JornalMes2")
            Me.columnJornalMes3 = MyBase.Columns("JornalMes3")
            Me.columnJornalMes4 = MyBase.Columns("JornalMes4")
            Me.columnJornalMes5 = MyBase.Columns("JornalMes5")
            Me.columnJornalMes6 = MyBase.Columns("JornalMes6")
            Me.columnJornalMes7 = MyBase.Columns("JornalMes7")
            Me.columnJornalMes8 = MyBase.Columns("JornalMes8")
            Me.columnJornalMes9 = MyBase.Columns("JornalMes9")
            Me.columnJornalMes10 = MyBase.Columns("JornalMes10")
            Me.columnJornalMes11 = MyBase.Columns("JornalMes11")
            Me.columnJornalMes12 = MyBase.Columns("JornalMes12")
            Me.columnBonoMes1 = MyBase.Columns("BonoMes1")
            Me.columnBonoMes2 = MyBase.Columns("BonoMes2")
            Me.columnBonoMes3 = MyBase.Columns("BonoMes3")
            Me.columnBonoMes4 = MyBase.Columns("BonoMes4")
            Me.columnBonoMes5 = MyBase.Columns("BonoMes5")
            Me.columnBonoMes6 = MyBase.Columns("BonoMes6")
            Me.columnBonoMes7 = MyBase.Columns("BonoMes7")
            Me.columnBonoMes8 = MyBase.Columns("BonoMes8")
            Me.columnBonoMes9 = MyBase.Columns("BonoMes9")
            Me.columnBonoMes10 = MyBase.Columns("BonoMes10")
            Me.columnBonoMes11 = MyBase.Columns("BonoMes11")
            Me.columnBonoMes12 = MyBase.Columns("BonoMes12")
            Me.columnJornal2daMoneda = MyBase.Columns("Jornal2daMoneda")
            Me.columnBono2daMoneda = MyBase.Columns("Bono2daMoneda")
            Me.columnJornalMes12daMoneda = MyBase.Columns("JornalMes12daMoneda")
            Me.columnJornalMes22daMoneda = MyBase.Columns("JornalMes22daMoneda")
            Me.columnJornalMes32daMoneda = MyBase.Columns("JornalMes32daMoneda")
            Me.columnJornalMes42daMoneda = MyBase.Columns("JornalMes42daMoneda")
            Me.columnJornalMes52daMoneda = MyBase.Columns("JornalMes52daMoneda")
            Me.columnJornalMes62daMoneda = MyBase.Columns("JornalMes62daMoneda")
            Me.columnJornalMes72daMoneda = MyBase.Columns("JornalMes72daMoneda")
            Me.columnJornalMes82daMoneda = MyBase.Columns("JornalMes82daMoneda")
            Me.columnJornalMes92daMoneda = MyBase.Columns("JornalMes92daMoneda")
            Me.columnJornalMes102daMoneda = MyBase.Columns("JornalMes102daMoneda")
            Me.columnJornalMes112daMoneda = MyBase.Columns("JornalMes112daMoneda")
            Me.columnJornalMes122daMoneda = MyBase.Columns("JornalMes122daMoneda")
            Me.columnBonoMes12daMoneda = MyBase.Columns("BonoMes12daMoneda")
            Me.columnBonoMes22daMoneda = MyBase.Columns("BonoMes22daMoneda")
            Me.columnBonoMes32daMoneda = MyBase.Columns("BonoMes32daMoneda")
            Me.columnBonoMes42daMoneda = MyBase.Columns("BonoMes42daMoneda")
            Me.columnBonoMes52daMoneda = MyBase.Columns("BonoMes52daMoneda")
            Me.columnBonoMes62daMoneda = MyBase.Columns("BonoMes62daMoneda")
            Me.columnBonoMes72daMoneda = MyBase.Columns("BonoMes72daMoneda")
            Me.columnBonoMes82daMoneda = MyBase.Columns("BonoMes82daMoneda")
            Me.columnBonoMes92daMoneda = MyBase.Columns("BonoMes92daMoneda")
            Me.columnBonoMes102daMoneda = MyBase.Columns("BonoMes102daMoneda")
            Me.columnBonoMes112daMoneda = MyBase.Columns("BonoMes112daMoneda")
            Me.columnBonoMes122daMoneda = MyBase.Columns("BonoMes122daMoneda")
            Me.columnDiferenciaJornal = MyBase.Columns("DiferenciaJornal")
            Me.columnDiferenciaBono = MyBase.Columns("DiferenciaBono")
            Me.columnPorcentajeJornal = MyBase.Columns("PorcentajeJornal")
            Me.columnPorcentajeBono = MyBase.Columns("PorcentajeBono")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnJornal = New Global.System.Data.DataColumn("Jornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal)
            Me.columnBono = New Global.System.Data.DataColumn("Bono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnJornalMes1 = New Global.System.Data.DataColumn("JornalMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes1)
            Me.columnJornalMes2 = New Global.System.Data.DataColumn("JornalMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes2)
            Me.columnJornalMes3 = New Global.System.Data.DataColumn("JornalMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes3)
            Me.columnJornalMes4 = New Global.System.Data.DataColumn("JornalMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes4)
            Me.columnJornalMes5 = New Global.System.Data.DataColumn("JornalMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes5)
            Me.columnJornalMes6 = New Global.System.Data.DataColumn("JornalMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes6)
            Me.columnJornalMes7 = New Global.System.Data.DataColumn("JornalMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes7)
            Me.columnJornalMes8 = New Global.System.Data.DataColumn("JornalMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes8)
            Me.columnJornalMes9 = New Global.System.Data.DataColumn("JornalMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes9)
            Me.columnJornalMes10 = New Global.System.Data.DataColumn("JornalMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes10)
            Me.columnJornalMes11 = New Global.System.Data.DataColumn("JornalMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes11)
            Me.columnJornalMes12 = New Global.System.Data.DataColumn("JornalMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes12)
            Me.columnBonoMes1 = New Global.System.Data.DataColumn("BonoMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes1)
            Me.columnBonoMes2 = New Global.System.Data.DataColumn("BonoMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes2)
            Me.columnBonoMes3 = New Global.System.Data.DataColumn("BonoMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes3)
            Me.columnBonoMes4 = New Global.System.Data.DataColumn("BonoMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes4)
            Me.columnBonoMes5 = New Global.System.Data.DataColumn("BonoMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes5)
            Me.columnBonoMes6 = New Global.System.Data.DataColumn("BonoMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes6)
            Me.columnBonoMes7 = New Global.System.Data.DataColumn("BonoMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes7)
            Me.columnBonoMes8 = New Global.System.Data.DataColumn("BonoMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes8)
            Me.columnBonoMes9 = New Global.System.Data.DataColumn("BonoMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes9)
            Me.columnBonoMes10 = New Global.System.Data.DataColumn("BonoMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes10)
            Me.columnBonoMes11 = New Global.System.Data.DataColumn("BonoMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes11)
            Me.columnBonoMes12 = New Global.System.Data.DataColumn("BonoMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes12)
            Me.columnJornal2daMoneda = New Global.System.Data.DataColumn("Jornal2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal2daMoneda)
            Me.columnBono2daMoneda = New Global.System.Data.DataColumn("Bono2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono2daMoneda)
            Me.columnJornalMes12daMoneda = New Global.System.Data.DataColumn("JornalMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes12daMoneda)
            Me.columnJornalMes22daMoneda = New Global.System.Data.DataColumn("JornalMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes22daMoneda)
            Me.columnJornalMes32daMoneda = New Global.System.Data.DataColumn("JornalMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes32daMoneda)
            Me.columnJornalMes42daMoneda = New Global.System.Data.DataColumn("JornalMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes42daMoneda)
            Me.columnJornalMes52daMoneda = New Global.System.Data.DataColumn("JornalMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes52daMoneda)
            Me.columnJornalMes62daMoneda = New Global.System.Data.DataColumn("JornalMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes62daMoneda)
            Me.columnJornalMes72daMoneda = New Global.System.Data.DataColumn("JornalMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes72daMoneda)
            Me.columnJornalMes82daMoneda = New Global.System.Data.DataColumn("JornalMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes82daMoneda)
            Me.columnJornalMes92daMoneda = New Global.System.Data.DataColumn("JornalMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes92daMoneda)
            Me.columnJornalMes102daMoneda = New Global.System.Data.DataColumn("JornalMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes102daMoneda)
            Me.columnJornalMes112daMoneda = New Global.System.Data.DataColumn("JornalMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes112daMoneda)
            Me.columnJornalMes122daMoneda = New Global.System.Data.DataColumn("JornalMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalMes122daMoneda)
            Me.columnBonoMes12daMoneda = New Global.System.Data.DataColumn("BonoMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes12daMoneda)
            Me.columnBonoMes22daMoneda = New Global.System.Data.DataColumn("BonoMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes22daMoneda)
            Me.columnBonoMes32daMoneda = New Global.System.Data.DataColumn("BonoMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes32daMoneda)
            Me.columnBonoMes42daMoneda = New Global.System.Data.DataColumn("BonoMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes42daMoneda)
            Me.columnBonoMes52daMoneda = New Global.System.Data.DataColumn("BonoMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes52daMoneda)
            Me.columnBonoMes62daMoneda = New Global.System.Data.DataColumn("BonoMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes62daMoneda)
            Me.columnBonoMes72daMoneda = New Global.System.Data.DataColumn("BonoMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes72daMoneda)
            Me.columnBonoMes82daMoneda = New Global.System.Data.DataColumn("BonoMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes82daMoneda)
            Me.columnBonoMes92daMoneda = New Global.System.Data.DataColumn("BonoMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes92daMoneda)
            Me.columnBonoMes102daMoneda = New Global.System.Data.DataColumn("BonoMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes102daMoneda)
            Me.columnBonoMes112daMoneda = New Global.System.Data.DataColumn("BonoMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes112daMoneda)
            Me.columnBonoMes122daMoneda = New Global.System.Data.DataColumn("BonoMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonoMes122daMoneda)
            Me.columnDiferenciaJornal = New Global.System.Data.DataColumn("DiferenciaJornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaJornal)
            Me.columnDiferenciaBono = New Global.System.Data.DataColumn("DiferenciaBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferenciaBono)
            Me.columnPorcentajeJornal = New Global.System.Data.DataColumn("PorcentajeJornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeJornal)
            Me.columnPorcentajeBono = New Global.System.Data.DataColumn("PorcentajeBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeBono)
            Me.columnDescripcion.MaxLength = 55
            Me.columnUnidad.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMObraRow() As MObraRow
            Return CType(Me.NewRow,MObraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MObraRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MObraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MObraRowChangedEvent) Is Nothing) Then
                RaiseEvent MObraRowChanged(Me, New MObraRowChangeEvent(CType(e.Row,MObraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MObraRowChangingEvent) Is Nothing) Then
                RaiseEvent MObraRowChanging(Me, New MObraRowChangeEvent(CType(e.Row,MObraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MObraRowDeletedEvent) Is Nothing) Then
                RaiseEvent MObraRowDeleted(Me, New MObraRowChangeEvent(CType(e.Row,MObraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MObraRowDeletingEvent) Is Nothing) Then
                RaiseEvent MObraRowDeleting(Me, New MObraRowChangeEvent(CType(e.Row,MObraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMObraRow(ByVal row As MObraRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MObraDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MObraCDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnCodigoSimple As Global.System.Data.DataColumn
        
        Private columnDescripcionSimple As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnJornal As Global.System.Data.DataColumn
        
        Private columnBono As Global.System.Data.DataColumn
        
        Private columnTotalJornal As Global.System.Data.DataColumn
        
        Private columnTotalBono As Global.System.Data.DataColumn
        
        Private columnJornal2daMoneda As Global.System.Data.DataColumn
        
        Private columnBono2daMoneda As Global.System.Data.DataColumn
        
        Private columnTotalJornal2daMoneda As Global.System.Data.DataColumn
        
        Private columnTotalBono2daMoneda As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MObraC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoSimpleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoSimple
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionSimpleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionSimple
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalJornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jornal2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bono2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalJornal2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalJornal2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalBono2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalBono2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MObraCRow
            Get
                Return CType(Me.Rows(index),MObraCRow)
            End Get
        End Property
        
        Public Event MObraCRowChanging As MObraCRowChangeEventHandler
        
        Public Event MObraCRowChanged As MObraCRowChangeEventHandler
        
        Public Event MObraCRowDeleting As MObraCRowChangeEventHandler
        
        Public Event MObraCRowDeleted As MObraCRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMObraCRow(ByVal row As MObraCRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMObraCRow(ByVal ID As Double, ByVal Descripcion As String, ByVal Unidad As String, ByVal CodigoSimple As Double, ByVal DescripcionSimple As String, ByVal Cantidad As Double, ByVal Jornal As Double, ByVal Bono As Double, ByVal TotalJornal As Double, ByVal TotalBono As Double, ByVal Jornal2daMoneda As Double, ByVal Bono2daMoneda As Double, ByVal TotalJornal2daMoneda As Double, ByVal TotalBono2daMoneda As Double, ByVal Fecha As Date) As MObraCRow
            Dim rowMObraCRow As MObraCRow = CType(Me.NewRow,MObraCRow)
            Dim columnValuesArray() As Object = New Object() {ID, Descripcion, Unidad, CodigoSimple, DescripcionSimple, Cantidad, Jornal, Bono, TotalJornal, TotalBono, Jornal2daMoneda, Bono2daMoneda, TotalJornal2daMoneda, TotalBono2daMoneda, Fecha}
            rowMObraCRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMObraCRow)
            Return rowMObraCRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MObraCDataTable = CType(MyBase.Clone,MObraCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MObraCDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnCodigoSimple = MyBase.Columns("CodigoSimple")
            Me.columnDescripcionSimple = MyBase.Columns("DescripcionSimple")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnJornal = MyBase.Columns("Jornal")
            Me.columnBono = MyBase.Columns("Bono")
            Me.columnTotalJornal = MyBase.Columns("TotalJornal")
            Me.columnTotalBono = MyBase.Columns("TotalBono")
            Me.columnJornal2daMoneda = MyBase.Columns("Jornal2daMoneda")
            Me.columnBono2daMoneda = MyBase.Columns("Bono2daMoneda")
            Me.columnTotalJornal2daMoneda = MyBase.Columns("TotalJornal2daMoneda")
            Me.columnTotalBono2daMoneda = MyBase.Columns("TotalBono2daMoneda")
            Me.columnFecha = MyBase.Columns("Fecha")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnCodigoSimple = New Global.System.Data.DataColumn("CodigoSimple", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoSimple)
            Me.columnDescripcionSimple = New Global.System.Data.DataColumn("DescripcionSimple", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionSimple)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnJornal = New Global.System.Data.DataColumn("Jornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal)
            Me.columnBono = New Global.System.Data.DataColumn("Bono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono)
            Me.columnTotalJornal = New Global.System.Data.DataColumn("TotalJornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalJornal)
            Me.columnTotalBono = New Global.System.Data.DataColumn("TotalBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalBono)
            Me.columnJornal2daMoneda = New Global.System.Data.DataColumn("Jornal2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal2daMoneda)
            Me.columnBono2daMoneda = New Global.System.Data.DataColumn("Bono2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono2daMoneda)
            Me.columnTotalJornal2daMoneda = New Global.System.Data.DataColumn("TotalJornal2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalJornal2daMoneda)
            Me.columnTotalBono2daMoneda = New Global.System.Data.DataColumn("TotalBono2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalBono2daMoneda)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnDescripcion.MaxLength = 47
            Me.columnUnidad.MaxLength = 5
            Me.columnDescripcionSimple.MaxLength = 43
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMObraCRow() As MObraCRow
            Return CType(Me.NewRow,MObraCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MObraCRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MObraCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MObraCRowChangedEvent) Is Nothing) Then
                RaiseEvent MObraCRowChanged(Me, New MObraCRowChangeEvent(CType(e.Row,MObraCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MObraCRowChangingEvent) Is Nothing) Then
                RaiseEvent MObraCRowChanging(Me, New MObraCRowChangeEvent(CType(e.Row,MObraCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MObraCRowDeletedEvent) Is Nothing) Then
                RaiseEvent MObraCRowDeleted(Me, New MObraCRowChangeEvent(CType(e.Row,MObraCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MObraCRowDeletingEvent) Is Nothing) Then
                RaiseEvent MObraCRowDeleting(Me, New MObraCRowChangeEvent(CType(e.Row,MObraCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMObraCRow(ByVal row As MObraCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MObraCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ValuacionesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodObr As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnNumeroPartida As Global.System.Data.DataColumn
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnCodigoCovenin As Global.System.Data.DataColumn
        
        Private columnPartidaTexto As Global.System.Data.DataColumn
        
        Private columnDescripcion1 As Global.System.Data.DataColumn
        
        Private columnDescripcion2 As Global.System.Data.DataColumn
        
        Private columnDescripcion3 As Global.System.Data.DataColumn
        
        Private columnMiniDescripcion As Global.System.Data.DataColumn
        
        Private columnCantidadDePartida As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario As Global.System.Data.DataColumn
        
        Private columnPrecioTotal As Global.System.Data.DataColumn
        
        Private columnTotalGeneral As Global.System.Data.DataColumn
        
        Private columnCantidadPeriodo As Global.System.Data.DataColumn
        
        Private columnTotalPeriodo As Global.System.Data.DataColumn
        
        Private columnCantidadAcumulada As Global.System.Data.DataColumn
        
        Private columnTotalAcumulado As Global.System.Data.DataColumn
        
        Private columnCantidadAnterior As Global.System.Data.DataColumn
        
        Private columnTotalAnterior As Global.System.Data.DataColumn
        
        Private columnCantidadAumentoAcumulado As Global.System.Data.DataColumn
        
        Private columnTotalAumentoAcumulado As Global.System.Data.DataColumn
        
        Private columnAumentoEnPeriodo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Valuaciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodObrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodObr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCoveninColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCovenin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartidaTextoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartidaTexto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiniDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiniDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadDePartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadDePartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalGeneralColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalGeneral
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadPeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadAcumuladaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadAcumulada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalAcumuladoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalAcumulado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadAnteriorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadAnterior
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalAnteriorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalAnterior
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadAumentoAcumuladoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadAumentoAcumulado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalAumentoAcumuladoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalAumentoAcumulado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AumentoEnPeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAumentoEnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ValuacionesRow
            Get
                Return CType(Me.Rows(index),ValuacionesRow)
            End Get
        End Property
        
        Public Event ValuacionesRowChanging As ValuacionesRowChangeEventHandler
        
        Public Event ValuacionesRowChanged As ValuacionesRowChangeEventHandler
        
        Public Event ValuacionesRowDeleting As ValuacionesRowChangeEventHandler
        
        Public Event ValuacionesRowDeleted As ValuacionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddValuacionesRow(ByVal row As ValuacionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddValuacionesRow( _
                    ByVal CodObr As String,  _
                    ByVal Periodo As String,  _
                    ByVal NumeroPartida As Double,  _
                    ByVal Id As Double,  _
                    ByVal CodigoCovenin As Double,  _
                    ByVal PartidaTexto As String,  _
                    ByVal Descripcion1 As String,  _
                    ByVal Descripcion2 As String,  _
                    ByVal Descripcion3 As String,  _
                    ByVal MiniDescripcion As String,  _
                    ByVal CantidadDePartida As Double,  _
                    ByVal Unidad As String,  _
                    ByVal PrecioUnitario As Double,  _
                    ByVal PrecioTotal As Double,  _
                    ByVal TotalGeneral As Double,  _
                    ByVal CantidadPeriodo As Double,  _
                    ByVal TotalPeriodo As Double,  _
                    ByVal CantidadAcumulada As Double,  _
                    ByVal TotalAcumulado As Double,  _
                    ByVal CantidadAnterior As Double,  _
                    ByVal TotalAnterior As Double,  _
                    ByVal CantidadAumentoAcumulado As Double,  _
                    ByVal TotalAumentoAcumulado As Double,  _
                    ByVal AumentoEnPeriodo As Double) As ValuacionesRow
            Dim rowValuacionesRow As ValuacionesRow = CType(Me.NewRow,ValuacionesRow)
            Dim columnValuesArray() As Object = New Object() {CodObr, Periodo, NumeroPartida, Id, CodigoCovenin, PartidaTexto, Descripcion1, Descripcion2, Descripcion3, MiniDescripcion, CantidadDePartida, Unidad, PrecioUnitario, PrecioTotal, TotalGeneral, CantidadPeriodo, TotalPeriodo, CantidadAcumulada, TotalAcumulado, CantidadAnterior, TotalAnterior, CantidadAumentoAcumulado, TotalAumentoAcumulado, AumentoEnPeriodo}
            rowValuacionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowValuacionesRow)
            Return rowValuacionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ValuacionesDataTable = CType(MyBase.Clone,ValuacionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ValuacionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodObr = MyBase.Columns("CodObr")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnNumeroPartida = MyBase.Columns("NumeroPartida")
            Me.columnId = MyBase.Columns("Id")
            Me.columnCodigoCovenin = MyBase.Columns("CodigoCovenin")
            Me.columnPartidaTexto = MyBase.Columns("PartidaTexto")
            Me.columnDescripcion1 = MyBase.Columns("Descripcion1")
            Me.columnDescripcion2 = MyBase.Columns("Descripcion2")
            Me.columnDescripcion3 = MyBase.Columns("Descripcion3")
            Me.columnMiniDescripcion = MyBase.Columns("MiniDescripcion")
            Me.columnCantidadDePartida = MyBase.Columns("CantidadDePartida")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnPrecioTotal = MyBase.Columns("PrecioTotal")
            Me.columnTotalGeneral = MyBase.Columns("TotalGeneral")
            Me.columnCantidadPeriodo = MyBase.Columns("CantidadPeriodo")
            Me.columnTotalPeriodo = MyBase.Columns("TotalPeriodo")
            Me.columnCantidadAcumulada = MyBase.Columns("CantidadAcumulada")
            Me.columnTotalAcumulado = MyBase.Columns("TotalAcumulado")
            Me.columnCantidadAnterior = MyBase.Columns("CantidadAnterior")
            Me.columnTotalAnterior = MyBase.Columns("TotalAnterior")
            Me.columnCantidadAumentoAcumulado = MyBase.Columns("CantidadAumentoAcumulado")
            Me.columnTotalAumentoAcumulado = MyBase.Columns("TotalAumentoAcumulado")
            Me.columnAumentoEnPeriodo = MyBase.Columns("AumentoEnPeriodo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodObr = New Global.System.Data.DataColumn("CodObr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodObr)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnNumeroPartida = New Global.System.Data.DataColumn("NumeroPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroPartida)
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnCodigoCovenin = New Global.System.Data.DataColumn("CodigoCovenin", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCovenin)
            Me.columnPartidaTexto = New Global.System.Data.DataColumn("PartidaTexto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartidaTexto)
            Me.columnDescripcion1 = New Global.System.Data.DataColumn("Descripcion1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion1)
            Me.columnDescripcion2 = New Global.System.Data.DataColumn("Descripcion2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion2)
            Me.columnDescripcion3 = New Global.System.Data.DataColumn("Descripcion3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion3)
            Me.columnMiniDescripcion = New Global.System.Data.DataColumn("MiniDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiniDescripcion)
            Me.columnCantidadDePartida = New Global.System.Data.DataColumn("CantidadDePartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadDePartida)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnPrecioUnitario = New Global.System.Data.DataColumn("PrecioUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnPrecioTotal = New Global.System.Data.DataColumn("PrecioTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioTotal)
            Me.columnTotalGeneral = New Global.System.Data.DataColumn("TotalGeneral", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalGeneral)
            Me.columnCantidadPeriodo = New Global.System.Data.DataColumn("CantidadPeriodo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadPeriodo)
            Me.columnTotalPeriodo = New Global.System.Data.DataColumn("TotalPeriodo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPeriodo)
            Me.columnCantidadAcumulada = New Global.System.Data.DataColumn("CantidadAcumulada", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadAcumulada)
            Me.columnTotalAcumulado = New Global.System.Data.DataColumn("TotalAcumulado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalAcumulado)
            Me.columnCantidadAnterior = New Global.System.Data.DataColumn("CantidadAnterior", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadAnterior)
            Me.columnTotalAnterior = New Global.System.Data.DataColumn("TotalAnterior", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalAnterior)
            Me.columnCantidadAumentoAcumulado = New Global.System.Data.DataColumn("CantidadAumentoAcumulado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadAumentoAcumulado)
            Me.columnTotalAumentoAcumulado = New Global.System.Data.DataColumn("TotalAumentoAcumulado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalAumentoAcumulado)
            Me.columnAumentoEnPeriodo = New Global.System.Data.DataColumn("AumentoEnPeriodo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAumentoEnPeriodo)
            Me.columnCodObr.MaxLength = 16
            Me.columnPeriodo.MaxLength = 4
            Me.columnPartidaTexto.MaxLength = 8
            Me.columnDescripcion1.MaxLength = 70
            Me.columnDescripcion2.MaxLength = 13
            Me.columnDescripcion3.MaxLength = 1
            Me.columnMiniDescripcion.MaxLength = 35
            Me.columnUnidad.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewValuacionesRow() As ValuacionesRow
            Return CType(Me.NewRow,ValuacionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ValuacionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ValuacionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ValuacionesRowChangedEvent) Is Nothing) Then
                RaiseEvent ValuacionesRowChanged(Me, New ValuacionesRowChangeEvent(CType(e.Row,ValuacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ValuacionesRowChangingEvent) Is Nothing) Then
                RaiseEvent ValuacionesRowChanging(Me, New ValuacionesRowChangeEvent(CType(e.Row,ValuacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ValuacionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ValuacionesRowDeleted(Me, New ValuacionesRowChangeEvent(CType(e.Row,ValuacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ValuacionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ValuacionesRowDeleting(Me, New ValuacionesRowChangeEvent(CType(e.Row,ValuacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveValuacionesRow(ByVal row As ValuacionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ValuacionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ComputoEQDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodObr As Global.System.Data.DataColumn
        
        Private columnNumeroPartida As Global.System.Data.DataColumn
        
        Private columnCantidadDePartida As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnDepreciacion As Global.System.Data.DataColumn
        
        Private columnCanTotal As Global.System.Data.DataColumn
        
        Private columnBsTotal As Global.System.Data.DataColumn
        
        Private columnCanUnitario As Global.System.Data.DataColumn
        
        Private columnBsUnitario As Global.System.Data.DataColumn
        
        Private columnPorcentaje As Global.System.Data.DataColumn
        
        Private columnRecType As Global.System.Data.DataColumn
        
        Private columnDias As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ComputoEQ"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodObrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodObr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadDePartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadDePartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepreciacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepreciacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CanTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCanTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BsTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBsTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CanUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCanUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BsUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBsUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentaje
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDias
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ComputoEQRow
            Get
                Return CType(Me.Rows(index),ComputoEQRow)
            End Get
        End Property
        
        Public Event ComputoEQRowChanging As ComputoEQRowChangeEventHandler
        
        Public Event ComputoEQRowChanged As ComputoEQRowChangeEventHandler
        
        Public Event ComputoEQRowDeleting As ComputoEQRowChangeEventHandler
        
        Public Event ComputoEQRowDeleted As ComputoEQRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddComputoEQRow(ByVal row As ComputoEQRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComputoEQRow( _
                    ByVal CodObr As String,  _
                    ByVal NumeroPartida As Double,  _
                    ByVal CantidadDePartida As Double,  _
                    ByVal Codigo As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal Unidad As String,  _
                    ByVal Cantidad As Double,  _
                    ByVal Costo As Double,  _
                    ByVal Depreciacion As Double,  _
                    ByVal CanTotal As Double,  _
                    ByVal BsTotal As Double,  _
                    ByVal CanUnitario As Double,  _
                    ByVal BsUnitario As Double,  _
                    ByVal Porcentaje As Double,  _
                    ByVal RecType As String,  _
                    ByVal Dias As Double) As ComputoEQRow
            Dim rowComputoEQRow As ComputoEQRow = CType(Me.NewRow,ComputoEQRow)
            Dim columnValuesArray() As Object = New Object() {CodObr, NumeroPartida, CantidadDePartida, Codigo, Descripcion, Unidad, Cantidad, Costo, Depreciacion, CanTotal, BsTotal, CanUnitario, BsUnitario, Porcentaje, RecType, Dias}
            rowComputoEQRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowComputoEQRow)
            Return rowComputoEQRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ComputoEQDataTable = CType(MyBase.Clone,ComputoEQDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ComputoEQDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodObr = MyBase.Columns("CodObr")
            Me.columnNumeroPartida = MyBase.Columns("NumeroPartida")
            Me.columnCantidadDePartida = MyBase.Columns("CantidadDePartida")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnDepreciacion = MyBase.Columns("Depreciacion")
            Me.columnCanTotal = MyBase.Columns("CanTotal")
            Me.columnBsTotal = MyBase.Columns("BsTotal")
            Me.columnCanUnitario = MyBase.Columns("CanUnitario")
            Me.columnBsUnitario = MyBase.Columns("BsUnitario")
            Me.columnPorcentaje = MyBase.Columns("Porcentaje")
            Me.columnRecType = MyBase.Columns("RecType")
            Me.columnDias = MyBase.Columns("Dias")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodObr = New Global.System.Data.DataColumn("CodObr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodObr)
            Me.columnNumeroPartida = New Global.System.Data.DataColumn("NumeroPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroPartida)
            Me.columnCantidadDePartida = New Global.System.Data.DataColumn("CantidadDePartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadDePartida)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnDepreciacion = New Global.System.Data.DataColumn("Depreciacion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepreciacion)
            Me.columnCanTotal = New Global.System.Data.DataColumn("CanTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCanTotal)
            Me.columnBsTotal = New Global.System.Data.DataColumn("BsTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBsTotal)
            Me.columnCanUnitario = New Global.System.Data.DataColumn("CanUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCanUnitario)
            Me.columnBsUnitario = New Global.System.Data.DataColumn("BsUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBsUnitario)
            Me.columnPorcentaje = New Global.System.Data.DataColumn("Porcentaje", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentaje)
            Me.columnRecType = New Global.System.Data.DataColumn("RecType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecType)
            Me.columnDias = New Global.System.Data.DataColumn("Dias", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDias)
            Me.columnCodObr.MaxLength = 16
            Me.columnDescripcion.MaxLength = 54
            Me.columnUnidad.MaxLength = 4
            Me.columnRecType.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewComputoEQRow() As ComputoEQRow
            Return CType(Me.NewRow,ComputoEQRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ComputoEQRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ComputoEQRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ComputoEQRowChangedEvent) Is Nothing) Then
                RaiseEvent ComputoEQRowChanged(Me, New ComputoEQRowChangeEvent(CType(e.Row,ComputoEQRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ComputoEQRowChangingEvent) Is Nothing) Then
                RaiseEvent ComputoEQRowChanging(Me, New ComputoEQRowChangeEvent(CType(e.Row,ComputoEQRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ComputoEQRowDeletedEvent) Is Nothing) Then
                RaiseEvent ComputoEQRowDeleted(Me, New ComputoEQRowChangeEvent(CType(e.Row,ComputoEQRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ComputoEQRowDeletingEvent) Is Nothing) Then
                RaiseEvent ComputoEQRowDeleting(Me, New ComputoEQRowChangeEvent(CType(e.Row,ComputoEQRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveComputoEQRow(ByVal row As ComputoEQRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ComputoEQDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ComputoMODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodObr As Global.System.Data.DataColumn
        
        Private columnNumeroPartida As Global.System.Data.DataColumn
        
        Private columnCantidadDePartida As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnCantidadPersonas As Global.System.Data.DataColumn
        
        Private columnCantTotPersonas As Global.System.Data.DataColumn
        
        Private columnHorasHombre As Global.System.Data.DataColumn
        
        Private columnJornal As Global.System.Data.DataColumn
        
        Private columnBono As Global.System.Data.DataColumn
        
        Private columnJornalBono As Global.System.Data.DataColumn
        
        Private columnTotalJornal As Global.System.Data.DataColumn
        
        Private columnTotalBono As Global.System.Data.DataColumn
        
        Private columnTotalSalario As Global.System.Data.DataColumn
        
        Private columnSalarioUnidad As Global.System.Data.DataColumn
        
        Private columnPresSoc As Global.System.Data.DataColumn
        
        Private columnRecType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ComputoMO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodObrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodObr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadDePartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadDePartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadPersonasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadPersonas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantTotPersonasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantTotPersonas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HorasHombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHorasHombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JornalBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJornalBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalJornalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalJornal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalBonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalBono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalSalarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalSalario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioUnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalarioUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PresSocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPresSoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ComputoMORow
            Get
                Return CType(Me.Rows(index),ComputoMORow)
            End Get
        End Property
        
        Public Event ComputoMORowChanging As ComputoMORowChangeEventHandler
        
        Public Event ComputoMORowChanged As ComputoMORowChangeEventHandler
        
        Public Event ComputoMORowDeleting As ComputoMORowChangeEventHandler
        
        Public Event ComputoMORowDeleted As ComputoMORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddComputoMORow(ByVal row As ComputoMORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComputoMORow( _
                    ByVal CodObr As String,  _
                    ByVal NumeroPartida As Double,  _
                    ByVal CantidadDePartida As Double,  _
                    ByVal Codigo As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal CantidadPersonas As Double,  _
                    ByVal CantTotPersonas As Double,  _
                    ByVal HorasHombre As Double,  _
                    ByVal Jornal As Double,  _
                    ByVal Bono As Double,  _
                    ByVal JornalBono As Double,  _
                    ByVal TotalJornal As Double,  _
                    ByVal TotalBono As Double,  _
                    ByVal TotalSalario As Double,  _
                    ByVal SalarioUnidad As Double,  _
                    ByVal PresSoc As Double,  _
                    ByVal RecType As String) As ComputoMORow
            Dim rowComputoMORow As ComputoMORow = CType(Me.NewRow,ComputoMORow)
            Dim columnValuesArray() As Object = New Object() {CodObr, NumeroPartida, CantidadDePartida, Codigo, Descripcion, CantidadPersonas, CantTotPersonas, HorasHombre, Jornal, Bono, JornalBono, TotalJornal, TotalBono, TotalSalario, SalarioUnidad, PresSoc, RecType}
            rowComputoMORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowComputoMORow)
            Return rowComputoMORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ComputoMODataTable = CType(MyBase.Clone,ComputoMODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ComputoMODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodObr = MyBase.Columns("CodObr")
            Me.columnNumeroPartida = MyBase.Columns("NumeroPartida")
            Me.columnCantidadDePartida = MyBase.Columns("CantidadDePartida")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnCantidadPersonas = MyBase.Columns("CantidadPersonas")
            Me.columnCantTotPersonas = MyBase.Columns("CantTotPersonas")
            Me.columnHorasHombre = MyBase.Columns("HorasHombre")
            Me.columnJornal = MyBase.Columns("Jornal")
            Me.columnBono = MyBase.Columns("Bono")
            Me.columnJornalBono = MyBase.Columns("JornalBono")
            Me.columnTotalJornal = MyBase.Columns("TotalJornal")
            Me.columnTotalBono = MyBase.Columns("TotalBono")
            Me.columnTotalSalario = MyBase.Columns("TotalSalario")
            Me.columnSalarioUnidad = MyBase.Columns("SalarioUnidad")
            Me.columnPresSoc = MyBase.Columns("PresSoc")
            Me.columnRecType = MyBase.Columns("RecType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodObr = New Global.System.Data.DataColumn("CodObr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodObr)
            Me.columnNumeroPartida = New Global.System.Data.DataColumn("NumeroPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroPartida)
            Me.columnCantidadDePartida = New Global.System.Data.DataColumn("CantidadDePartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadDePartida)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCantidadPersonas = New Global.System.Data.DataColumn("CantidadPersonas", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadPersonas)
            Me.columnCantTotPersonas = New Global.System.Data.DataColumn("CantTotPersonas", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantTotPersonas)
            Me.columnHorasHombre = New Global.System.Data.DataColumn("HorasHombre", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHorasHombre)
            Me.columnJornal = New Global.System.Data.DataColumn("Jornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornal)
            Me.columnBono = New Global.System.Data.DataColumn("Bono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBono)
            Me.columnJornalBono = New Global.System.Data.DataColumn("JornalBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJornalBono)
            Me.columnTotalJornal = New Global.System.Data.DataColumn("TotalJornal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalJornal)
            Me.columnTotalBono = New Global.System.Data.DataColumn("TotalBono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalBono)
            Me.columnTotalSalario = New Global.System.Data.DataColumn("TotalSalario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalSalario)
            Me.columnSalarioUnidad = New Global.System.Data.DataColumn("SalarioUnidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalarioUnidad)
            Me.columnPresSoc = New Global.System.Data.DataColumn("PresSoc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPresSoc)
            Me.columnRecType = New Global.System.Data.DataColumn("RecType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecType)
            Me.columnCodObr.MaxLength = 16
            Me.columnDescripcion.MaxLength = 54
            Me.columnRecType.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewComputoMORow() As ComputoMORow
            Return CType(Me.NewRow,ComputoMORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ComputoMORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ComputoMORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ComputoMORowChangedEvent) Is Nothing) Then
                RaiseEvent ComputoMORowChanged(Me, New ComputoMORowChangeEvent(CType(e.Row,ComputoMORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ComputoMORowChangingEvent) Is Nothing) Then
                RaiseEvent ComputoMORowChanging(Me, New ComputoMORowChangeEvent(CType(e.Row,ComputoMORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ComputoMORowDeletedEvent) Is Nothing) Then
                RaiseEvent ComputoMORowDeleted(Me, New ComputoMORowChangeEvent(CType(e.Row,ComputoMORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ComputoMORowDeletingEvent) Is Nothing) Then
                RaiseEvent ComputoMORowDeleting(Me, New ComputoMORowChangeEvent(CType(e.Row,ComputoMORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveComputoMORow(ByVal row As ComputoMORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ComputoMODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ComputoMTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodObr As Global.System.Data.DataColumn
        
        Private columnNumeroPartida As Global.System.Data.DataColumn
        
        Private columnCantidadDePartida As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCanTotal As Global.System.Data.DataColumn
        
        Private columnBsTotal As Global.System.Data.DataColumn
        
        Private columnCanUnitario As Global.System.Data.DataColumn
        
        Private columnBsUnitario As Global.System.Data.DataColumn
        
        Private columnPorcentaje As Global.System.Data.DataColumn
        
        Private columnRecType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ComputoMT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodObrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodObr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadDePartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadDePartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CanTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCanTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BsTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBsTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CanUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCanUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BsUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBsUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentaje
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ComputoMTRow
            Get
                Return CType(Me.Rows(index),ComputoMTRow)
            End Get
        End Property
        
        Public Event ComputoMTRowChanging As ComputoMTRowChangeEventHandler
        
        Public Event ComputoMTRowChanged As ComputoMTRowChangeEventHandler
        
        Public Event ComputoMTRowDeleting As ComputoMTRowChangeEventHandler
        
        Public Event ComputoMTRowDeleted As ComputoMTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddComputoMTRow(ByVal row As ComputoMTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComputoMTRow(ByVal CodObr As String, ByVal NumeroPartida As Double, ByVal CantidadDePartida As Double, ByVal Codigo As Double, ByVal Descripcion As String, ByVal Unidad As String, ByVal Costo As Double, ByVal Cantidad As Double, ByVal CanTotal As Double, ByVal BsTotal As Double, ByVal CanUnitario As Double, ByVal BsUnitario As Double, ByVal Porcentaje As Double, ByVal RecType As String) As ComputoMTRow
            Dim rowComputoMTRow As ComputoMTRow = CType(Me.NewRow,ComputoMTRow)
            Dim columnValuesArray() As Object = New Object() {CodObr, NumeroPartida, CantidadDePartida, Codigo, Descripcion, Unidad, Costo, Cantidad, CanTotal, BsTotal, CanUnitario, BsUnitario, Porcentaje, RecType}
            rowComputoMTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowComputoMTRow)
            Return rowComputoMTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ComputoMTDataTable = CType(MyBase.Clone,ComputoMTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ComputoMTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodObr = MyBase.Columns("CodObr")
            Me.columnNumeroPartida = MyBase.Columns("NumeroPartida")
            Me.columnCantidadDePartida = MyBase.Columns("CantidadDePartida")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCanTotal = MyBase.Columns("CanTotal")
            Me.columnBsTotal = MyBase.Columns("BsTotal")
            Me.columnCanUnitario = MyBase.Columns("CanUnitario")
            Me.columnBsUnitario = MyBase.Columns("BsUnitario")
            Me.columnPorcentaje = MyBase.Columns("Porcentaje")
            Me.columnRecType = MyBase.Columns("RecType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodObr = New Global.System.Data.DataColumn("CodObr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodObr)
            Me.columnNumeroPartida = New Global.System.Data.DataColumn("NumeroPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroPartida)
            Me.columnCantidadDePartida = New Global.System.Data.DataColumn("CantidadDePartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadDePartida)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCanTotal = New Global.System.Data.DataColumn("CanTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCanTotal)
            Me.columnBsTotal = New Global.System.Data.DataColumn("BsTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBsTotal)
            Me.columnCanUnitario = New Global.System.Data.DataColumn("CanUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCanUnitario)
            Me.columnBsUnitario = New Global.System.Data.DataColumn("BsUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBsUnitario)
            Me.columnPorcentaje = New Global.System.Data.DataColumn("Porcentaje", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentaje)
            Me.columnRecType = New Global.System.Data.DataColumn("RecType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecType)
            Me.columnCodObr.MaxLength = 16
            Me.columnDescripcion.MaxLength = 54
            Me.columnUnidad.MaxLength = 4
            Me.columnRecType.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewComputoMTRow() As ComputoMTRow
            Return CType(Me.NewRow,ComputoMTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ComputoMTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ComputoMTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ComputoMTRowChangedEvent) Is Nothing) Then
                RaiseEvent ComputoMTRowChanged(Me, New ComputoMTRowChangeEvent(CType(e.Row,ComputoMTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ComputoMTRowChangingEvent) Is Nothing) Then
                RaiseEvent ComputoMTRowChanging(Me, New ComputoMTRowChangeEvent(CType(e.Row,ComputoMTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ComputoMTRowDeletedEvent) Is Nothing) Then
                RaiseEvent ComputoMTRowDeleted(Me, New ComputoMTRowChangeEvent(CType(e.Row,ComputoMTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ComputoMTRowDeletingEvent) Is Nothing) Then
                RaiseEvent ComputoMTRowDeleting(Me, New ComputoMTRowChangeEvent(CType(e.Row,ComputoMTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveComputoMTRow(ByVal row As ComputoMTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ComputoMTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ComputoTRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodObr As Global.System.Data.DataColumn
        
        Private columnNumeroPartida As Global.System.Data.DataColumn
        
        Private columnCantidadDePartida As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCanTotal As Global.System.Data.DataColumn
        
        Private columnBsTotal As Global.System.Data.DataColumn
        
        Private columnCanUnitario As Global.System.Data.DataColumn
        
        Private columnBsUnitario As Global.System.Data.DataColumn
        
        Private columnPorcentaje As Global.System.Data.DataColumn
        
        Private columnRecType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ComputoTR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodObrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodObr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadDePartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadDePartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CanTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCanTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BsTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBsTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CanUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCanUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BsUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBsUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentaje
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ComputoTRRow
            Get
                Return CType(Me.Rows(index),ComputoTRRow)
            End Get
        End Property
        
        Public Event ComputoTRRowChanging As ComputoTRRowChangeEventHandler
        
        Public Event ComputoTRRowChanged As ComputoTRRowChangeEventHandler
        
        Public Event ComputoTRRowDeleting As ComputoTRRowChangeEventHandler
        
        Public Event ComputoTRRowDeleted As ComputoTRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddComputoTRRow(ByVal row As ComputoTRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComputoTRRow(ByVal CodObr As String, ByVal NumeroPartida As Double, ByVal CantidadDePartida As Double, ByVal Codigo As Double, ByVal Descripcion As String, ByVal Unidad As String, ByVal Costo As Double, ByVal Cantidad As Double, ByVal CanTotal As Double, ByVal BsTotal As Double, ByVal CanUnitario As Double, ByVal BsUnitario As Double, ByVal Porcentaje As Double, ByVal RecType As String) As ComputoTRRow
            Dim rowComputoTRRow As ComputoTRRow = CType(Me.NewRow,ComputoTRRow)
            Dim columnValuesArray() As Object = New Object() {CodObr, NumeroPartida, CantidadDePartida, Codigo, Descripcion, Unidad, Costo, Cantidad, CanTotal, BsTotal, CanUnitario, BsUnitario, Porcentaje, RecType}
            rowComputoTRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowComputoTRRow)
            Return rowComputoTRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ComputoTRDataTable = CType(MyBase.Clone,ComputoTRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ComputoTRDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodObr = MyBase.Columns("CodObr")
            Me.columnNumeroPartida = MyBase.Columns("NumeroPartida")
            Me.columnCantidadDePartida = MyBase.Columns("CantidadDePartida")
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCanTotal = MyBase.Columns("CanTotal")
            Me.columnBsTotal = MyBase.Columns("BsTotal")
            Me.columnCanUnitario = MyBase.Columns("CanUnitario")
            Me.columnBsUnitario = MyBase.Columns("BsUnitario")
            Me.columnPorcentaje = MyBase.Columns("Porcentaje")
            Me.columnRecType = MyBase.Columns("RecType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodObr = New Global.System.Data.DataColumn("CodObr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodObr)
            Me.columnNumeroPartida = New Global.System.Data.DataColumn("NumeroPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroPartida)
            Me.columnCantidadDePartida = New Global.System.Data.DataColumn("CantidadDePartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadDePartida)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCanTotal = New Global.System.Data.DataColumn("CanTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCanTotal)
            Me.columnBsTotal = New Global.System.Data.DataColumn("BsTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBsTotal)
            Me.columnCanUnitario = New Global.System.Data.DataColumn("CanUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCanUnitario)
            Me.columnBsUnitario = New Global.System.Data.DataColumn("BsUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBsUnitario)
            Me.columnPorcentaje = New Global.System.Data.DataColumn("Porcentaje", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentaje)
            Me.columnRecType = New Global.System.Data.DataColumn("RecType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecType)
            Me.columnCodObr.MaxLength = 16
            Me.columnDescripcion.MaxLength = 54
            Me.columnUnidad.MaxLength = 4
            Me.columnRecType.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewComputoTRRow() As ComputoTRRow
            Return CType(Me.NewRow,ComputoTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ComputoTRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ComputoTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ComputoTRRowChangedEvent) Is Nothing) Then
                RaiseEvent ComputoTRRowChanged(Me, New ComputoTRRowChangeEvent(CType(e.Row,ComputoTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ComputoTRRowChangingEvent) Is Nothing) Then
                RaiseEvent ComputoTRRowChanging(Me, New ComputoTRRowChangeEvent(CType(e.Row,ComputoTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ComputoTRRowDeletedEvent) Is Nothing) Then
                RaiseEvent ComputoTRRowDeleted(Me, New ComputoTRRowChangeEvent(CType(e.Row,ComputoTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ComputoTRRowDeletingEvent) Is Nothing) Then
                RaiseEvent ComputoTRRowDeleting(Me, New ComputoTRRowChangeEvent(CType(e.Row,ComputoTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveComputoTRRow(ByVal row As ComputoTRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ComputoTRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IndPACDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGRUPO As Global.System.Data.DataColumn
        
        Private columnAGRUPACION As Global.System.Data.DataColumn
        
        Private columnAÑO As Global.System.Data.DataColumn
        
        Private columnIDENTIFICACION As Global.System.Data.DataColumn
        
        Private columnMES1 As Global.System.Data.DataColumn
        
        Private columnMES2 As Global.System.Data.DataColumn
        
        Private columnMES3 As Global.System.Data.DataColumn
        
        Private columnMES4 As Global.System.Data.DataColumn
        
        Private columnMES5 As Global.System.Data.DataColumn
        
        Private columnMES6 As Global.System.Data.DataColumn
        
        Private columnMES7 As Global.System.Data.DataColumn
        
        Private columnMES8 As Global.System.Data.DataColumn
        
        Private columnMES9 As Global.System.Data.DataColumn
        
        Private columnMES10 As Global.System.Data.DataColumn
        
        Private columnMES11 As Global.System.Data.DataColumn
        
        Private columnMES12 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IndPAC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGRUPACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGRUPACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AÑOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAÑO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDENTIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MES12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IndPACRow
            Get
                Return CType(Me.Rows(index),IndPACRow)
            End Get
        End Property
        
        Public Event IndPACRowChanging As IndPACRowChangeEventHandler
        
        Public Event IndPACRowChanged As IndPACRowChangeEventHandler
        
        Public Event IndPACRowDeleting As IndPACRowChangeEventHandler
        
        Public Event IndPACRowDeleted As IndPACRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIndPACRow(ByVal row As IndPACRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIndPACRow( _
                    ByVal GRUPO As Double,  _
                    ByVal AGRUPACION As String,  _
                    ByVal AÑO As Double,  _
                    ByVal IDENTIFICACION As String,  _
                    ByVal MES1 As Double,  _
                    ByVal MES2 As Double,  _
                    ByVal MES3 As Double,  _
                    ByVal MES4 As Double,  _
                    ByVal MES5 As Double,  _
                    ByVal MES6 As Double,  _
                    ByVal MES7 As Double,  _
                    ByVal MES8 As Double,  _
                    ByVal MES9 As Double,  _
                    ByVal MES10 As Double,  _
                    ByVal MES11 As Double,  _
                    ByVal MES12 As Double) As IndPACRow
            Dim rowIndPACRow As IndPACRow = CType(Me.NewRow,IndPACRow)
            Dim columnValuesArray() As Object = New Object() {GRUPO, AGRUPACION, AÑO, IDENTIFICACION, MES1, MES2, MES3, MES4, MES5, MES6, MES7, MES8, MES9, MES10, MES11, MES12}
            rowIndPACRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIndPACRow)
            Return rowIndPACRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IndPACDataTable = CType(MyBase.Clone,IndPACDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IndPACDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGRUPO = MyBase.Columns("GRUPO")
            Me.columnAGRUPACION = MyBase.Columns("AGRUPACION")
            Me.columnAÑO = MyBase.Columns("AÑO")
            Me.columnIDENTIFICACION = MyBase.Columns("IDENTIFICACION")
            Me.columnMES1 = MyBase.Columns("MES1")
            Me.columnMES2 = MyBase.Columns("MES2")
            Me.columnMES3 = MyBase.Columns("MES3")
            Me.columnMES4 = MyBase.Columns("MES4")
            Me.columnMES5 = MyBase.Columns("MES5")
            Me.columnMES6 = MyBase.Columns("MES6")
            Me.columnMES7 = MyBase.Columns("MES7")
            Me.columnMES8 = MyBase.Columns("MES8")
            Me.columnMES9 = MyBase.Columns("MES9")
            Me.columnMES10 = MyBase.Columns("MES10")
            Me.columnMES11 = MyBase.Columns("MES11")
            Me.columnMES12 = MyBase.Columns("MES12")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGRUPO = New Global.System.Data.DataColumn("GRUPO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRUPO)
            Me.columnAGRUPACION = New Global.System.Data.DataColumn("AGRUPACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGRUPACION)
            Me.columnAÑO = New Global.System.Data.DataColumn("AÑO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAÑO)
            Me.columnIDENTIFICACION = New Global.System.Data.DataColumn("IDENTIFICACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTIFICACION)
            Me.columnMES1 = New Global.System.Data.DataColumn("MES1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES1)
            Me.columnMES2 = New Global.System.Data.DataColumn("MES2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES2)
            Me.columnMES3 = New Global.System.Data.DataColumn("MES3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES3)
            Me.columnMES4 = New Global.System.Data.DataColumn("MES4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES4)
            Me.columnMES5 = New Global.System.Data.DataColumn("MES5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES5)
            Me.columnMES6 = New Global.System.Data.DataColumn("MES6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES6)
            Me.columnMES7 = New Global.System.Data.DataColumn("MES7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES7)
            Me.columnMES8 = New Global.System.Data.DataColumn("MES8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES8)
            Me.columnMES9 = New Global.System.Data.DataColumn("MES9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES9)
            Me.columnMES10 = New Global.System.Data.DataColumn("MES10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES10)
            Me.columnMES11 = New Global.System.Data.DataColumn("MES11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES11)
            Me.columnMES12 = New Global.System.Data.DataColumn("MES12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES12)
            Me.columnAGRUPACION.MaxLength = 44
            Me.columnIDENTIFICACION.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIndPACRow() As IndPACRow
            Return CType(Me.NewRow,IndPACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IndPACRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IndPACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IndPACRowChangedEvent) Is Nothing) Then
                RaiseEvent IndPACRowChanged(Me, New IndPACRowChangeEvent(CType(e.Row,IndPACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IndPACRowChangingEvent) Is Nothing) Then
                RaiseEvent IndPACRowChanging(Me, New IndPACRowChangeEvent(CType(e.Row,IndPACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IndPACRowDeletedEvent) Is Nothing) Then
                RaiseEvent IndPACRowDeleted(Me, New IndPACRowChangeEvent(CType(e.Row,IndPACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IndPACRowDeletingEvent) Is Nothing) Then
                RaiseEvent IndPACRowDeleting(Me, New IndPACRowChangeEvent(CType(e.Row,IndPACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIndPACRow(ByVal row As IndPACRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IndPACDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MatCompDDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoMatC As Global.System.Data.DataColumn
        
        Private columnDescMMat As Global.System.Data.DataColumn
        
        Private columnDescMatC As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnAGRUPACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MatCompDD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMatCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMatC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescMMatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescMMat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescMatCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescMatC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGRUPACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGRUPACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MatCompDDRow
            Get
                Return CType(Me.Rows(index),MatCompDDRow)
            End Get
        End Property
        
        Public Event MatCompDDRowChanging As MatCompDDRowChangeEventHandler
        
        Public Event MatCompDDRowChanged As MatCompDDRowChangeEventHandler
        
        Public Event MatCompDDRowDeleting As MatCompDDRowChangeEventHandler
        
        Public Event MatCompDDRowDeleted As MatCompDDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMatCompDDRow(ByVal row As MatCompDDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMatCompDDRow(ByVal CodigoMatC As Double, ByVal DescMMat As String, ByVal DescMatC As String, ByVal Unidad As String, ByVal Cantidad As Double, ByVal Precio As Double, ByVal AGRUPACION As String) As MatCompDDRow
            Dim rowMatCompDDRow As MatCompDDRow = CType(Me.NewRow,MatCompDDRow)
            Dim columnValuesArray() As Object = New Object() {CodigoMatC, DescMMat, DescMatC, Unidad, Cantidad, Precio, AGRUPACION}
            rowMatCompDDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMatCompDDRow)
            Return rowMatCompDDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MatCompDDDataTable = CType(MyBase.Clone,MatCompDDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MatCompDDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoMatC = MyBase.Columns("CodigoMatC")
            Me.columnDescMMat = MyBase.Columns("DescMMat")
            Me.columnDescMatC = MyBase.Columns("DescMatC")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnAGRUPACION = MyBase.Columns("AGRUPACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoMatC = New Global.System.Data.DataColumn("CodigoMatC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMatC)
            Me.columnDescMMat = New Global.System.Data.DataColumn("DescMMat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescMMat)
            Me.columnDescMatC = New Global.System.Data.DataColumn("DescMatC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescMatC)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnAGRUPACION = New Global.System.Data.DataColumn("AGRUPACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGRUPACION)
            Me.columnDescMMat.MaxLength = 56
            Me.columnDescMatC.MaxLength = 55
            Me.columnUnidad.MaxLength = 5
            Me.columnAGRUPACION.MaxLength = 44
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMatCompDDRow() As MatCompDDRow
            Return CType(Me.NewRow,MatCompDDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MatCompDDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MatCompDDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MatCompDDRowChangedEvent) Is Nothing) Then
                RaiseEvent MatCompDDRowChanged(Me, New MatCompDDRowChangeEvent(CType(e.Row,MatCompDDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MatCompDDRowChangingEvent) Is Nothing) Then
                RaiseEvent MatCompDDRowChanging(Me, New MatCompDDRowChangeEvent(CType(e.Row,MatCompDDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MatCompDDRowDeletedEvent) Is Nothing) Then
                RaiseEvent MatCompDDRowDeleted(Me, New MatCompDDRowChangeEvent(CType(e.Row,MatCompDDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MatCompDDRowDeletingEvent) Is Nothing) Then
                RaiseEvent MatCompDDRowDeleting(Me, New MatCompDDRowChangeEvent(CType(e.Row,MatCompDDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMatCompDDRow(ByVal row As MatCompDDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MatCompDDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MaterialBCVDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnGrupoBCV As Global.System.Data.DataColumn
        
        Private columnAGRUPACION As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnSuplidor As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario As Global.System.Data.DataColumn
        
        Private columnPorcentajeDiferencia As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MaterialBCV"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrupoBCVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrupoBCV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGRUPACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGRUPACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuplidorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuplidor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MaterialBCVRow
            Get
                Return CType(Me.Rows(index),MaterialBCVRow)
            End Get
        End Property
        
        Public Event MaterialBCVRowChanging As MaterialBCVRowChangeEventHandler
        
        Public Event MaterialBCVRowChanged As MaterialBCVRowChangeEventHandler
        
        Public Event MaterialBCVRowDeleting As MaterialBCVRowChangeEventHandler
        
        Public Event MaterialBCVRowDeleted As MaterialBCVRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMaterialBCVRow(ByVal row As MaterialBCVRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMaterialBCVRow(ByVal Codigo As Double, ByVal Descripcion As String, ByVal Fecha As Date, ByVal GrupoBCV As Double, ByVal AGRUPACION As String, ByVal Unidad As String, ByVal Suplidor As String, ByVal PrecioUnitario As Double, ByVal PorcentajeDiferencia As String) As MaterialBCVRow
            Dim rowMaterialBCVRow As MaterialBCVRow = CType(Me.NewRow,MaterialBCVRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Descripcion, Fecha, GrupoBCV, AGRUPACION, Unidad, Suplidor, PrecioUnitario, PorcentajeDiferencia}
            rowMaterialBCVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMaterialBCVRow)
            Return rowMaterialBCVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MaterialBCVDataTable = CType(MyBase.Clone,MaterialBCVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MaterialBCVDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnGrupoBCV = MyBase.Columns("GrupoBCV")
            Me.columnAGRUPACION = MyBase.Columns("AGRUPACION")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnSuplidor = MyBase.Columns("Suplidor")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnPorcentajeDiferencia = MyBase.Columns("PorcentajeDiferencia")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnGrupoBCV = New Global.System.Data.DataColumn("GrupoBCV", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrupoBCV)
            Me.columnAGRUPACION = New Global.System.Data.DataColumn("AGRUPACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGRUPACION)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnSuplidor = New Global.System.Data.DataColumn("Suplidor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuplidor)
            Me.columnPrecioUnitario = New Global.System.Data.DataColumn("PrecioUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnPorcentajeDiferencia = New Global.System.Data.DataColumn("PorcentajeDiferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDiferencia)
            Me.columnDescripcion.MaxLength = 56
            Me.columnAGRUPACION.MaxLength = 44
            Me.columnUnidad.MaxLength = 6
            Me.columnSuplidor.MaxLength = 48
            Me.columnPorcentajeDiferencia.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMaterialBCVRow() As MaterialBCVRow
            Return CType(Me.NewRow,MaterialBCVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MaterialBCVRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MaterialBCVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MaterialBCVRowChangedEvent) Is Nothing) Then
                RaiseEvent MaterialBCVRowChanged(Me, New MaterialBCVRowChangeEvent(CType(e.Row,MaterialBCVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MaterialBCVRowChangingEvent) Is Nothing) Then
                RaiseEvent MaterialBCVRowChanging(Me, New MaterialBCVRowChangeEvent(CType(e.Row,MaterialBCVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MaterialBCVRowDeletedEvent) Is Nothing) Then
                RaiseEvent MaterialBCVRowDeleted(Me, New MaterialBCVRowChangeEvent(CType(e.Row,MaterialBCVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MaterialBCVRowDeletingEvent) Is Nothing) Then
                RaiseEvent MaterialBCVRowDeleting(Me, New MaterialBCVRowChangeEvent(CType(e.Row,MaterialBCVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMaterialBCVRow(ByVal row As MaterialBCVRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MaterialBCVDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MatObrDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private _columncod_obr_apu As Global.System.Data.DataColumn
        
        Private _columnrec_typ_apu As Global.System.Data.DataColumn
        
        Private _columnnum_par_apu As Global.System.Data.DataColumn
        
        Private _columncod_mat_apu As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private _columnid_mat_apu As Global.System.Data.DataColumn
        
        Private _columnund_mat_apu As Global.System.Data.DataColumn
        
        Private _columncnt_mat_apu As Global.System.Data.DataColumn
        
        Private _columncst_mat_apu As Global.System.Data.DataColumn
        
        Private _columntot_mat_apu As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MatObr"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_obr_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_obr_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _rec_typ_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnrec_typ_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _num_par_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnnum_par_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _id_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnid_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _und_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnund_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cnt_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncnt_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cst_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncst_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _tot_mat_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columntot_mat_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MatObrRow
            Get
                Return CType(Me.Rows(index),MatObrRow)
            End Get
        End Property
        
        Public Event MatObrRowChanging As MatObrRowChangeEventHandler
        
        Public Event MatObrRowChanged As MatObrRowChangeEventHandler
        
        Public Event MatObrRowDeleting As MatObrRowChangeEventHandler
        
        Public Event MatObrRowDeleted As MatObrRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMatObrRow(ByVal row As MatObrRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMatObrRow(ByVal _cod_obr_apu As String, ByVal _rec_typ_apu As String, ByVal _num_par_apu As Double, ByVal _cod_mat_apu As Double, ByVal Descripcion As String, ByVal _id_mat_apu As Double, ByVal _und_mat_apu As Double, ByVal _cnt_mat_apu As Double, ByVal _cst_mat_apu As Double, ByVal _tot_mat_apu As Double) As MatObrRow
            Dim rowMatObrRow As MatObrRow = CType(Me.NewRow,MatObrRow)
            Dim columnValuesArray() As Object = New Object() {_cod_obr_apu, _rec_typ_apu, _num_par_apu, _cod_mat_apu, Descripcion, _id_mat_apu, _und_mat_apu, _cnt_mat_apu, _cst_mat_apu, _tot_mat_apu}
            rowMatObrRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMatObrRow)
            Return rowMatObrRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MatObrDataTable = CType(MyBase.Clone,MatObrDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MatObrDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columncod_obr_apu = MyBase.Columns("cod-obr-apu")
            Me._columnrec_typ_apu = MyBase.Columns("rec-typ-apu")
            Me._columnnum_par_apu = MyBase.Columns("num-par-apu")
            Me._columncod_mat_apu = MyBase.Columns("cod-mat-apu")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me._columnid_mat_apu = MyBase.Columns("id-mat-apu")
            Me._columnund_mat_apu = MyBase.Columns("und-mat-apu")
            Me._columncnt_mat_apu = MyBase.Columns("cnt-mat-apu")
            Me._columncst_mat_apu = MyBase.Columns("cst-mat-apu")
            Me._columntot_mat_apu = MyBase.Columns("tot-mat-apu")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columncod_obr_apu = New Global.System.Data.DataColumn("cod-obr-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_obr_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_obr_apu")
            Me._columncod_obr_apu.ExtendedProperties.Add("Generator_UserColumnName", "cod-obr-apu")
            MyBase.Columns.Add(Me._columncod_obr_apu)
            Me._columnrec_typ_apu = New Global.System.Data.DataColumn("rec-typ-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnrec_typ_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnrec_typ_apu")
            Me._columnrec_typ_apu.ExtendedProperties.Add("Generator_UserColumnName", "rec-typ-apu")
            MyBase.Columns.Add(Me._columnrec_typ_apu)
            Me._columnnum_par_apu = New Global.System.Data.DataColumn("num-par-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnnum_par_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnnum_par_apu")
            Me._columnnum_par_apu.ExtendedProperties.Add("Generator_UserColumnName", "num-par-apu")
            MyBase.Columns.Add(Me._columnnum_par_apu)
            Me._columncod_mat_apu = New Global.System.Data.DataColumn("cod-mat-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_mat_apu")
            Me._columncod_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "cod-mat-apu")
            MyBase.Columns.Add(Me._columncod_mat_apu)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me._columnid_mat_apu = New Global.System.Data.DataColumn("id-mat-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnid_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnid_mat_apu")
            Me._columnid_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "id-mat-apu")
            MyBase.Columns.Add(Me._columnid_mat_apu)
            Me._columnund_mat_apu = New Global.System.Data.DataColumn("und-mat-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnund_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnund_mat_apu")
            Me._columnund_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "und-mat-apu")
            MyBase.Columns.Add(Me._columnund_mat_apu)
            Me._columncnt_mat_apu = New Global.System.Data.DataColumn("cnt-mat-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncnt_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncnt_mat_apu")
            Me._columncnt_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "cnt-mat-apu")
            MyBase.Columns.Add(Me._columncnt_mat_apu)
            Me._columncst_mat_apu = New Global.System.Data.DataColumn("cst-mat-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncst_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncst_mat_apu")
            Me._columncst_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "cst-mat-apu")
            MyBase.Columns.Add(Me._columncst_mat_apu)
            Me._columntot_mat_apu = New Global.System.Data.DataColumn("tot-mat-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columntot_mat_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columntot_mat_apu")
            Me._columntot_mat_apu.ExtendedProperties.Add("Generator_UserColumnName", "tot-mat-apu")
            MyBase.Columns.Add(Me._columntot_mat_apu)
            Me._columncod_obr_apu.MaxLength = 16
            Me._columnrec_typ_apu.MaxLength = 2
            Me.columnDescripcion.MaxLength = 56
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMatObrRow() As MatObrRow
            Return CType(Me.NewRow,MatObrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MatObrRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MatObrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MatObrRowChangedEvent) Is Nothing) Then
                RaiseEvent MatObrRowChanged(Me, New MatObrRowChangeEvent(CType(e.Row,MatObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MatObrRowChangingEvent) Is Nothing) Then
                RaiseEvent MatObrRowChanging(Me, New MatObrRowChangeEvent(CType(e.Row,MatObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MatObrRowDeletedEvent) Is Nothing) Then
                RaiseEvent MatObrRowDeleted(Me, New MatObrRowChangeEvent(CType(e.Row,MatObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MatObrRowDeletingEvent) Is Nothing) Then
                RaiseEvent MatObrRowDeleting(Me, New MatObrRowChangeEvent(CType(e.Row,MatObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMatObrRow(ByVal row As MatObrRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MatObrDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PartObrDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private _columncod_obr_apu As Global.System.Data.DataColumn
        
        Private _columndesc_obr As Global.System.Data.DataColumn
        
        Private _columnrec_typ_apu As Global.System.Data.DataColumn
        
        Private _columnnum_par_apu As Global.System.Data.DataColumn
        
        Private _columncod_par_m As Global.System.Data.DataColumn
        
        Private columnDescripcion1 As Global.System.Data.DataColumn
        
        Private columnDescripcion2 As Global.System.Data.DataColumn
        
        Private columnDescripcion3 As Global.System.Data.DataColumn
        
        Private columnMiniDescripcion As Global.System.Data.DataColumn
        
        Private columnCodigoCovenin As Global.System.Data.DataColumn
        
        Private columnPartidaTexto As Global.System.Data.DataColumn
        
        Private _columncan_ana_apu As Global.System.Data.DataColumn
        
        Private _columnren_par_apu As Global.System.Data.DataColumn
        
        Private _columncan_apr_apu As Global.System.Data.DataColumn
        
        Private _columnund_par_apu As Global.System.Data.DataColumn
        
        Private _columnpun_par_apu As Global.System.Data.DataColumn
        
        Private _columnpun_ana_apu As Global.System.Data.DataColumn
        
        Private _columnpun_adp_apu As Global.System.Data.DataColumn
        
        Private _columnptot_pr_apu As Global.System.Data.DataColumn
        
        Private _columntot_gen_apu As Global.System.Data.DataColumn
        
        Private _columntit_is_apu As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PartObr"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_obr_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_obr_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _desc_obrColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columndesc_obr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _rec_typ_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnrec_typ_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _num_par_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnnum_par_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_par_mColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_par_m
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Descripcion3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiniDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiniDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCoveninColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCovenin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartidaTextoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartidaTexto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _can_ana_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncan_ana_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ren_par_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnren_par_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _can_apr_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncan_apr_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _und_par_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnund_par_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _pun_par_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnpun_par_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _pun_ana_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnpun_ana_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _pun_adp_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnpun_adp_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _ptot_pr_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnptot_pr_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _tot_gen_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columntot_gen_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _tit_is_apuColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columntit_is_apu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PartObrRow
            Get
                Return CType(Me.Rows(index),PartObrRow)
            End Get
        End Property
        
        Public Event PartObrRowChanging As PartObrRowChangeEventHandler
        
        Public Event PartObrRowChanged As PartObrRowChangeEventHandler
        
        Public Event PartObrRowDeleting As PartObrRowChangeEventHandler
        
        Public Event PartObrRowDeleted As PartObrRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPartObrRow(ByVal row As PartObrRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPartObrRow( _
                    ByVal _cod_obr_apu As String,  _
                    ByVal _desc_obr As String,  _
                    ByVal _rec_typ_apu As String,  _
                    ByVal _num_par_apu As Double,  _
                    ByVal _cod_par_m As String,  _
                    ByVal Descripcion1 As String,  _
                    ByVal Descripcion2 As String,  _
                    ByVal Descripcion3 As String,  _
                    ByVal MiniDescripcion As String,  _
                    ByVal CodigoCovenin As String,  _
                    ByVal PartidaTexto As String,  _
                    ByVal _can_ana_apu As Double,  _
                    ByVal _ren_par_apu As Double,  _
                    ByVal _can_apr_apu As Double,  _
                    ByVal _und_par_apu As String,  _
                    ByVal _pun_par_apu As Double,  _
                    ByVal _pun_ana_apu As Double,  _
                    ByVal _pun_adp_apu As Double,  _
                    ByVal _ptot_pr_apu As Double,  _
                    ByVal _tot_gen_apu As Double,  _
                    ByVal _tit_is_apu As String) As PartObrRow
            Dim rowPartObrRow As PartObrRow = CType(Me.NewRow,PartObrRow)
            Dim columnValuesArray() As Object = New Object() {_cod_obr_apu, _desc_obr, _rec_typ_apu, _num_par_apu, _cod_par_m, Descripcion1, Descripcion2, Descripcion3, MiniDescripcion, CodigoCovenin, PartidaTexto, _can_ana_apu, _ren_par_apu, _can_apr_apu, _und_par_apu, _pun_par_apu, _pun_ana_apu, _pun_adp_apu, _ptot_pr_apu, _tot_gen_apu, _tit_is_apu}
            rowPartObrRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPartObrRow)
            Return rowPartObrRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PartObrDataTable = CType(MyBase.Clone,PartObrDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PartObrDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columncod_obr_apu = MyBase.Columns("cod-obr-apu")
            Me._columndesc_obr = MyBase.Columns("desc-obr")
            Me._columnrec_typ_apu = MyBase.Columns("rec-typ-apu")
            Me._columnnum_par_apu = MyBase.Columns("num-par-apu")
            Me._columncod_par_m = MyBase.Columns("cod-par-m")
            Me.columnDescripcion1 = MyBase.Columns("Descripcion1")
            Me.columnDescripcion2 = MyBase.Columns("Descripcion2")
            Me.columnDescripcion3 = MyBase.Columns("Descripcion3")
            Me.columnMiniDescripcion = MyBase.Columns("MiniDescripcion")
            Me.columnCodigoCovenin = MyBase.Columns("CodigoCovenin")
            Me.columnPartidaTexto = MyBase.Columns("PartidaTexto")
            Me._columncan_ana_apu = MyBase.Columns("can-ana-apu")
            Me._columnren_par_apu = MyBase.Columns("ren-par-apu")
            Me._columncan_apr_apu = MyBase.Columns("can-apr-apu")
            Me._columnund_par_apu = MyBase.Columns("und-par-apu")
            Me._columnpun_par_apu = MyBase.Columns("pun-par-apu")
            Me._columnpun_ana_apu = MyBase.Columns("pun-ana-apu")
            Me._columnpun_adp_apu = MyBase.Columns("pun-adp-apu")
            Me._columnptot_pr_apu = MyBase.Columns("ptot-pr-apu")
            Me._columntot_gen_apu = MyBase.Columns("tot-gen-apu")
            Me._columntit_is_apu = MyBase.Columns("tit-is-apu")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columncod_obr_apu = New Global.System.Data.DataColumn("cod-obr-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_obr_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_obr_apu")
            Me._columncod_obr_apu.ExtendedProperties.Add("Generator_UserColumnName", "cod-obr-apu")
            MyBase.Columns.Add(Me._columncod_obr_apu)
            Me._columndesc_obr = New Global.System.Data.DataColumn("desc-obr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columndesc_obr.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columndesc_obr")
            Me._columndesc_obr.ExtendedProperties.Add("Generator_UserColumnName", "desc-obr")
            MyBase.Columns.Add(Me._columndesc_obr)
            Me._columnrec_typ_apu = New Global.System.Data.DataColumn("rec-typ-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnrec_typ_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnrec_typ_apu")
            Me._columnrec_typ_apu.ExtendedProperties.Add("Generator_UserColumnName", "rec-typ-apu")
            MyBase.Columns.Add(Me._columnrec_typ_apu)
            Me._columnnum_par_apu = New Global.System.Data.DataColumn("num-par-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnnum_par_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnnum_par_apu")
            Me._columnnum_par_apu.ExtendedProperties.Add("Generator_UserColumnName", "num-par-apu")
            MyBase.Columns.Add(Me._columnnum_par_apu)
            Me._columncod_par_m = New Global.System.Data.DataColumn("cod-par-m", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_par_m.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_par_m")
            Me._columncod_par_m.ExtendedProperties.Add("Generator_UserColumnName", "cod-par-m")
            MyBase.Columns.Add(Me._columncod_par_m)
            Me.columnDescripcion1 = New Global.System.Data.DataColumn("Descripcion1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion1)
            Me.columnDescripcion2 = New Global.System.Data.DataColumn("Descripcion2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion2)
            Me.columnDescripcion3 = New Global.System.Data.DataColumn("Descripcion3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion3)
            Me.columnMiniDescripcion = New Global.System.Data.DataColumn("MiniDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiniDescripcion)
            Me.columnCodigoCovenin = New Global.System.Data.DataColumn("CodigoCovenin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCovenin)
            Me.columnPartidaTexto = New Global.System.Data.DataColumn("PartidaTexto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartidaTexto)
            Me._columncan_ana_apu = New Global.System.Data.DataColumn("can-ana-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncan_ana_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncan_ana_apu")
            Me._columncan_ana_apu.ExtendedProperties.Add("Generator_UserColumnName", "can-ana-apu")
            MyBase.Columns.Add(Me._columncan_ana_apu)
            Me._columnren_par_apu = New Global.System.Data.DataColumn("ren-par-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnren_par_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnren_par_apu")
            Me._columnren_par_apu.ExtendedProperties.Add("Generator_UserColumnName", "ren-par-apu")
            MyBase.Columns.Add(Me._columnren_par_apu)
            Me._columncan_apr_apu = New Global.System.Data.DataColumn("can-apr-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columncan_apr_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncan_apr_apu")
            Me._columncan_apr_apu.ExtendedProperties.Add("Generator_UserColumnName", "can-apr-apu")
            MyBase.Columns.Add(Me._columncan_apr_apu)
            Me._columnund_par_apu = New Global.System.Data.DataColumn("und-par-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnund_par_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnund_par_apu")
            Me._columnund_par_apu.ExtendedProperties.Add("Generator_UserColumnName", "und-par-apu")
            MyBase.Columns.Add(Me._columnund_par_apu)
            Me._columnpun_par_apu = New Global.System.Data.DataColumn("pun-par-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnpun_par_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnpun_par_apu")
            Me._columnpun_par_apu.ExtendedProperties.Add("Generator_UserColumnName", "pun-par-apu")
            MyBase.Columns.Add(Me._columnpun_par_apu)
            Me._columnpun_ana_apu = New Global.System.Data.DataColumn("pun-ana-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnpun_ana_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnpun_ana_apu")
            Me._columnpun_ana_apu.ExtendedProperties.Add("Generator_UserColumnName", "pun-ana-apu")
            MyBase.Columns.Add(Me._columnpun_ana_apu)
            Me._columnpun_adp_apu = New Global.System.Data.DataColumn("pun-adp-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnpun_adp_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnpun_adp_apu")
            Me._columnpun_adp_apu.ExtendedProperties.Add("Generator_UserColumnName", "pun-adp-apu")
            MyBase.Columns.Add(Me._columnpun_adp_apu)
            Me._columnptot_pr_apu = New Global.System.Data.DataColumn("ptot-pr-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnptot_pr_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnptot_pr_apu")
            Me._columnptot_pr_apu.ExtendedProperties.Add("Generator_UserColumnName", "ptot-pr-apu")
            MyBase.Columns.Add(Me._columnptot_pr_apu)
            Me._columntot_gen_apu = New Global.System.Data.DataColumn("tot-gen-apu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columntot_gen_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columntot_gen_apu")
            Me._columntot_gen_apu.ExtendedProperties.Add("Generator_UserColumnName", "tot-gen-apu")
            MyBase.Columns.Add(Me._columntot_gen_apu)
            Me._columntit_is_apu = New Global.System.Data.DataColumn("tit-is-apu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columntit_is_apu.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columntit_is_apu")
            Me._columntit_is_apu.ExtendedProperties.Add("Generator_UserColumnName", "tit-is-apu")
            MyBase.Columns.Add(Me._columntit_is_apu)
            Me._columncod_obr_apu.MaxLength = 16
            Me._columndesc_obr.MaxLength = 54
            Me._columnrec_typ_apu.MaxLength = 2
            Me._columncod_par_m.MaxLength = 14
            Me.columnDescripcion1.MaxLength = 70
            Me.columnDescripcion2.MaxLength = 70
            Me.columnDescripcion3.MaxLength = 70
            Me.columnMiniDescripcion.MaxLength = 60
            Me.columnCodigoCovenin.MaxLength = 15
            Me.columnPartidaTexto.MaxLength = 8
            Me._columnund_par_apu.MaxLength = 3
            Me._columntit_is_apu.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPartObrRow() As PartObrRow
            Return CType(Me.NewRow,PartObrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PartObrRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PartObrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PartObrRowChangedEvent) Is Nothing) Then
                RaiseEvent PartObrRowChanged(Me, New PartObrRowChangeEvent(CType(e.Row,PartObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PartObrRowChangingEvent) Is Nothing) Then
                RaiseEvent PartObrRowChanging(Me, New PartObrRowChangeEvent(CType(e.Row,PartObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PartObrRowDeletedEvent) Is Nothing) Then
                RaiseEvent PartObrRowDeleted(Me, New PartObrRowChangeEvent(CType(e.Row,PartObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PartObrRowDeletingEvent) Is Nothing) Then
                RaiseEvent PartObrRowDeleting(Me, New PartObrRowChangeEvent(CType(e.Row,PartObrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePartObrRow(ByVal row As PartObrRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet = New MasterAPVDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PartObrDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class APUObrRow
        Inherits Global.System.Data.DataRow
        
        Private tableAPUObr As APUObrDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAPUObr = CType(Me.Table,APUObrDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_obr_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cod_obr_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-obr-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cod_obr_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _rec_typ_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._rec_typ_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rec-typ-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._rec_typ_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _num_par_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._num_par_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'num-par-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._num_par_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_par_m() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cod_par_mColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-par-m' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cod_par_mColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartidaTexto() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr.PartidaTextoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartidaTexto' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr.PartidaTextoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_mat_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cod_mat_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-mat-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cod_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _id_mat_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._id_mat_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'id-mat-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._id_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_eqp_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cod_eqp_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-eqp-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cod_eqp_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _id_eqp_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._id_eqp_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'id-eqp-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._id_eqp_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_mob_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cod_mob_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-mob-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cod_mob_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _id_mob_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._id_mob_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'id-mob-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._id_mob_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_trn_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cod_trn_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-trn-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cod_trn_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _id_trn_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._id_trn_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'id-trn-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._id_trn_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _can_ana_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._can_ana_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'can-ana-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._can_ana_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ren_par_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._ren_par_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ren-par-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._ren_par_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _can_apr_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._can_apr_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'can-apr-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._can_apr_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _und_par_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._und_par_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'und-par-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._und_par_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _iva_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._iva_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'iva-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._iva_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _prc_adm_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._prc_adm_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prc-adm-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._prc_adm_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _prc_utl_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._prc_utl_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prc-utl-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._prc_utl_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _fcas_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._fcas_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fcas-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._fcas_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _fin_obr_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._fin_obr_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fin-obr-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._fin_obr_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _pun_par_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._pun_par_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pun-par-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._pun_par_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _pun_ana_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._pun_ana_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pun-ana-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._pun_ana_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _pun_adp_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._pun_adp_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pun-adp-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._pun_adp_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _hor_hmb_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._hor_hmb_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'hor-hmb-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._hor_hmb_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dias() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr.DiasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dias' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr.DiasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroControl() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr.NumeroControlColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroControl' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr.NumeroControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ptot_pr_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._ptot_pr_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ptot-pr-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._ptot_pr_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _tot_gen_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._tot_gen_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot-gen-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._tot_gen_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _tit_is_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._tit_is_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tit-is-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._tit_is_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _und_mat_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._und_mat_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'und-mat-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._und_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cnt_mat_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cnt_mat_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cnt-mat-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cnt_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cst_mat_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cst_mat_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cst-mat-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cst_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _tot_mat_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._tot_mat_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot-mat-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._tot_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cnt_eqp_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cnt_eqp_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cnt-eqp-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cnt_eqp_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cst_eqp_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cst_eqp_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cst-eqp-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cst_eqp_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _dep_eqp_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._dep_eqp_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dep-eqp-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._dep_eqp_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ceq_apu_tot() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._ceq_apu_totColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ceq-apu-tot' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._ceq_apu_totColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cnt_mob_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cnt_mob_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cnt-mob-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cnt_mob_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _jrn_mob_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._jrn_mob_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jrn-mob-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._jrn_mob_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _bno_mob_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._bno_mob_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bno-mob-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._bno_mob_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _tot_jrn_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._tot_jrn_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot-jrn-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._tot_jrn_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _tot_bno_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._tot_bno_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot-bno-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._tot_bno_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _und_trn_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._und_trn_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'und-trn-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._und_trn_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cnt_trn_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cnt_trn_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cnt-trn-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cnt_trn_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cst_trn_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._cst_trn_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cst-trn-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._cst_trn_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _tot_trn_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableAPUObr._tot_trn_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot-trn-apu' in table 'APUObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAPUObr._tot_trn_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_obr_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cod_obr_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_obr_apuNull()
            Me(Me.tableAPUObr._cod_obr_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_rec_typ_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._rec_typ_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_rec_typ_apuNull()
            Me(Me.tableAPUObr._rec_typ_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_num_par_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._num_par_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_num_par_apuNull()
            Me(Me.tableAPUObr._num_par_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_par_mNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cod_par_mColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_par_mNull()
            Me(Me.tableAPUObr._cod_par_mColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartidaTextoNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr.PartidaTextoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartidaTextoNull()
            Me(Me.tableAPUObr.PartidaTextoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cod_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_mat_apuNull()
            Me(Me.tableAPUObr._cod_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_id_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._id_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_id_mat_apuNull()
            Me(Me.tableAPUObr._id_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_eqp_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cod_eqp_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_eqp_apuNull()
            Me(Me.tableAPUObr._cod_eqp_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_id_eqp_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._id_eqp_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_id_eqp_apuNull()
            Me(Me.tableAPUObr._id_eqp_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_mob_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cod_mob_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_mob_apuNull()
            Me(Me.tableAPUObr._cod_mob_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_id_mob_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._id_mob_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_id_mob_apuNull()
            Me(Me.tableAPUObr._id_mob_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_trn_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cod_trn_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_trn_apuNull()
            Me(Me.tableAPUObr._cod_trn_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_id_trn_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._id_trn_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_id_trn_apuNull()
            Me(Me.tableAPUObr._id_trn_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_can_ana_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._can_ana_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_can_ana_apuNull()
            Me(Me.tableAPUObr._can_ana_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ren_par_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._ren_par_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ren_par_apuNull()
            Me(Me.tableAPUObr._ren_par_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_can_apr_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._can_apr_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_can_apr_apuNull()
            Me(Me.tableAPUObr._can_apr_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_und_par_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._und_par_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_und_par_apuNull()
            Me(Me.tableAPUObr._und_par_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_iva_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._iva_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_iva_apuNull()
            Me(Me.tableAPUObr._iva_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_prc_adm_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._prc_adm_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_prc_adm_apuNull()
            Me(Me.tableAPUObr._prc_adm_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_prc_utl_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._prc_utl_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_prc_utl_apuNull()
            Me(Me.tableAPUObr._prc_utl_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_fcas_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._fcas_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_fcas_apuNull()
            Me(Me.tableAPUObr._fcas_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_fin_obr_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._fin_obr_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_fin_obr_apuNull()
            Me(Me.tableAPUObr._fin_obr_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_pun_par_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._pun_par_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_pun_par_apuNull()
            Me(Me.tableAPUObr._pun_par_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_pun_ana_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._pun_ana_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_pun_ana_apuNull()
            Me(Me.tableAPUObr._pun_ana_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_pun_adp_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._pun_adp_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_pun_adp_apuNull()
            Me(Me.tableAPUObr._pun_adp_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_hor_hmb_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._hor_hmb_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_hor_hmb_apuNull()
            Me(Me.tableAPUObr._hor_hmb_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr.DiasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasNull()
            Me(Me.tableAPUObr.DiasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroControlNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr.NumeroControlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroControlNull()
            Me(Me.tableAPUObr.NumeroControlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ptot_pr_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._ptot_pr_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ptot_pr_apuNull()
            Me(Me.tableAPUObr._ptot_pr_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_tot_gen_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._tot_gen_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_tot_gen_apuNull()
            Me(Me.tableAPUObr._tot_gen_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_tit_is_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._tit_is_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_tit_is_apuNull()
            Me(Me.tableAPUObr._tit_is_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_und_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._und_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_und_mat_apuNull()
            Me(Me.tableAPUObr._und_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cnt_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cnt_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cnt_mat_apuNull()
            Me(Me.tableAPUObr._cnt_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cst_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cst_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cst_mat_apuNull()
            Me(Me.tableAPUObr._cst_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_tot_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._tot_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_tot_mat_apuNull()
            Me(Me.tableAPUObr._tot_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cnt_eqp_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cnt_eqp_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cnt_eqp_apuNull()
            Me(Me.tableAPUObr._cnt_eqp_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cst_eqp_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cst_eqp_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cst_eqp_apuNull()
            Me(Me.tableAPUObr._cst_eqp_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_dep_eqp_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._dep_eqp_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_dep_eqp_apuNull()
            Me(Me.tableAPUObr._dep_eqp_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ceq_apu_totNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._ceq_apu_totColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ceq_apu_totNull()
            Me(Me.tableAPUObr._ceq_apu_totColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cnt_mob_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cnt_mob_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cnt_mob_apuNull()
            Me(Me.tableAPUObr._cnt_mob_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_jrn_mob_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._jrn_mob_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_jrn_mob_apuNull()
            Me(Me.tableAPUObr._jrn_mob_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_bno_mob_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._bno_mob_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_bno_mob_apuNull()
            Me(Me.tableAPUObr._bno_mob_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_tot_jrn_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._tot_jrn_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_tot_jrn_apuNull()
            Me(Me.tableAPUObr._tot_jrn_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_tot_bno_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._tot_bno_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_tot_bno_apuNull()
            Me(Me.tableAPUObr._tot_bno_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_und_trn_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._und_trn_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_und_trn_apuNull()
            Me(Me.tableAPUObr._und_trn_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cnt_trn_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cnt_trn_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cnt_trn_apuNull()
            Me(Me.tableAPUObr._cnt_trn_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cst_trn_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._cst_trn_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cst_trn_apuNull()
            Me(Me.tableAPUObr._cst_trn_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_tot_trn_apuNull() As Boolean
            Return Me.IsNull(Me.tableAPUObr._tot_trn_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_tot_trn_apuNull()
            Me(Me.tableAPUObr._tot_trn_apuColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ConfGenAPVRow
        Inherits Global.System.Data.DataRow
        
        Private tableConfGenAPV As ConfGenAPVDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConfGenAPV = CType(Me.Table,ConfGenAPVDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Obra() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.ObraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Obra' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.ObraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCAS() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.FCASColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FCAS' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.FCASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Administracion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.AdministracionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Administracion' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.AdministracionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Utilidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.UtilidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Utilidad' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.UtilidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rendimiento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.RendimientoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rendimiento' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.RendimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dig_Rend() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.Dig_RendColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dig_Rend' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.Dig_RendColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.IVAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IVA' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.IVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cant_Part() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.Cant_PartColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cant_Part' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.Cant_PartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cant_Analisis() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.Cant_AnalisisColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cant_Analisis' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.Cant_AnalisisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Div_Mat() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.Div_MatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Div_Mat' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.Div_MatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Base_MAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.Base_MATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Base_MAT' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.Base_MATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Base_EQP() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.Base_EQPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Base_EQP' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.Base_EQPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Base_MO() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.Base_MOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Base_MO' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.Base_MOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Base_Partidas() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.Base_PartidasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Base_Partidas' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.Base_PartidasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaB_MAT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.FechaB_MATColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaB_MAT' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.FechaB_MATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaB_EQP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.FechaB_EQPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaB_EQP' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.FechaB_EQPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaB_MO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.FechaB_MOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaB_MO' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.FechaB_MOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaB_PART() As Date
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.FechaB_PARTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaB_PART' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.FechaB_PARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda_P() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.Moneda_PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moneda_P' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.Moneda_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda_S() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.Moneda_SColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moneda_S' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.Moneda_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Propietario() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.PropietarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Propietario' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.PropietarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IngFirma() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.IngFirmaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IngFirma' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.IngFirmaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IngRevisa() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.IngRevisaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IngRevisa' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.IngRevisaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIV_Revisa() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.CIV_RevisaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CIV_Revisa' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.CIV_RevisaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIV_Firma() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfGenAPV.CIV_FirmaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CIV_Firma' in table 'ConfGenAPV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfGenAPV.CIV_FirmaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.ObraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraNull()
            Me(Me.tableConfGenAPV.ObraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCASNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.FCASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCASNull()
            Me(Me.tableConfGenAPV.FCASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdministracionNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.AdministracionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdministracionNull()
            Me(Me.tableConfGenAPV.AdministracionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUtilidadNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.UtilidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUtilidadNull()
            Me(Me.tableConfGenAPV.UtilidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRendimientoNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.RendimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRendimientoNull()
            Me(Me.tableConfGenAPV.RendimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDig_RendNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.Dig_RendColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDig_RendNull()
            Me(Me.tableConfGenAPV.Dig_RendColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVANull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.IVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVANull()
            Me(Me.tableConfGenAPV.IVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCant_PartNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.Cant_PartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCant_PartNull()
            Me(Me.tableConfGenAPV.Cant_PartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCant_AnalisisNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.Cant_AnalisisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCant_AnalisisNull()
            Me(Me.tableConfGenAPV.Cant_AnalisisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiv_MatNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.Div_MatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiv_MatNull()
            Me(Me.tableConfGenAPV.Div_MatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBase_MATNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.Base_MATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBase_MATNull()
            Me(Me.tableConfGenAPV.Base_MATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBase_EQPNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.Base_EQPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBase_EQPNull()
            Me(Me.tableConfGenAPV.Base_EQPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBase_MONull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.Base_MOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBase_MONull()
            Me(Me.tableConfGenAPV.Base_MOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBase_PartidasNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.Base_PartidasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBase_PartidasNull()
            Me(Me.tableConfGenAPV.Base_PartidasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaB_MATNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.FechaB_MATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaB_MATNull()
            Me(Me.tableConfGenAPV.FechaB_MATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaB_EQPNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.FechaB_EQPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaB_EQPNull()
            Me(Me.tableConfGenAPV.FechaB_EQPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaB_MONull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.FechaB_MOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaB_MONull()
            Me(Me.tableConfGenAPV.FechaB_MOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaB_PARTNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.FechaB_PARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaB_PARTNull()
            Me(Me.tableConfGenAPV.FechaB_PARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoneda_PNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.Moneda_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoneda_PNull()
            Me(Me.tableConfGenAPV.Moneda_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoneda_SNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.Moneda_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoneda_SNull()
            Me(Me.tableConfGenAPV.Moneda_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPropietarioNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.PropietarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPropietarioNull()
            Me(Me.tableConfGenAPV.PropietarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngFirmaNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.IngFirmaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngFirmaNull()
            Me(Me.tableConfGenAPV.IngFirmaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngRevisaNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.IngRevisaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngRevisaNull()
            Me(Me.tableConfGenAPV.IngRevisaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIV_RevisaNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.CIV_RevisaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIV_RevisaNull()
            Me(Me.tableConfGenAPV.CIV_RevisaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIV_FirmaNull() As Boolean
            Return Me.IsNull(Me.tableConfGenAPV.CIV_FirmaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIV_FirmaNull()
            Me(Me.tableConfGenAPV.CIV_FirmaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ConfiguracionRow
        Inherits Global.System.Data.DataRow
        
        Private tableConfiguracion As ConfiguracionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConfiguracion = CType(Me.Table,ConfiguracionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Obra() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ObraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Obra' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ObraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LeydelTrabajo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.LeydelTrabajoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeydelTrabajo' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.LeydelTrabajoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Administracion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.AdministracionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Administracion' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.AdministracionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DigitosRendimiento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.DigitosRendimientoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DigitosRendimiento' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.DigitosRendimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rendimiento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.RendimientoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rendimiento' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.RendimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Utilidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.UtilidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Utilidad' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.UtilidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoVentas() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpuestoVentasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpuestoVentas' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpuestoVentasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadDePartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.CantidadDePartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadDePartida' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.CantidadDePartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadDelAnalisis() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.CantidadDelAnalisisColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadDelAnalisis' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.CantidadDelAnalisisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoImpuestoCargado() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.TipoImpuestoCargadoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoImpuestoCargado' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.TipoImpuestoCargadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DividirMateriales() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.DividirMaterialesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DividirMateriales' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.DividirMaterialesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AfectanPrestaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.AfectanPrestacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AfectanPrestaciones' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.AfectanPrestacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseMaterialesUsar() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.BaseMaterialesUsarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseMaterialesUsar' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.BaseMaterialesUsarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MesMaterialesUsar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.MesMaterialesUsarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MesMaterialesUsar' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.MesMaterialesUsarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseEquiposUsar() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.BaseEquiposUsarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseEquiposUsar' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.BaseEquiposUsarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MesEquiposUsar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.MesEquiposUsarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MesEquiposUsar' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.MesEquiposUsarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseManoObraUsar() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.BaseManoObraUsarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseManoObraUsar' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.BaseManoObraUsarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MesManoObraUsar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.MesManoObraUsarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MesManoObraUsar' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.MesManoObraUsarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoRendimiento() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.TipoRendimientoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoRendimiento' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.TipoRendimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HorasJornadaDiaria() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.HorasJornadaDiariaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HorasJornadaDiaria' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.HorasJornadaDiariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoImpresora() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.TipoImpresoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoImpresora' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.TipoImpresoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreciosDistintosACalculados() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.PreciosDistintosACalculadosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PreciosDistintosACalculados' in table 'Configuracion' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.PreciosDistintosACalculadosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeEnAnalisis() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.PorcentajeEnAnalisisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeEnAnalisis' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.PorcentajeEnAnalisisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInsumosEnAnalisis() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.CodigoInsumosEnAnalisisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoInsumosEnAnalisis' in table 'Configuracion' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.CodigoInsumosEnAnalisisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MonedaUtilizar() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.MonedaUtilizarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MonedaUtilizar' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.MonedaUtilizarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UltimaObra1() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.UltimaObra1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UltimaObra1' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.UltimaObra1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UltimaObra2() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.UltimaObra2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UltimaObra2' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.UltimaObra2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UltimaObra3() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.UltimaObra3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UltimaObra3' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.UltimaObra3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpEstructura1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpEstructura1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpEstructura1' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpEstructura1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpEstructura2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpEstructura2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpEstructura2' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpEstructura2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpEstructura3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpEstructura3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpEstructura3' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpEstructura3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpEstructura4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpEstructura4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpEstructura4' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpEstructura4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpEstructura5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpEstructura5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpEstructura5' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpEstructura5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpGenerales1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpGenerales1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpGenerales1' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpGenerales1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpGenerales2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpGenerales2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpGenerales2' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpGenerales2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpGenerales3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpGenerales3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpGenerales3' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpGenerales3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpGenerales4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpGenerales4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpGenerales4' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpGenerales4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpGenerales5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpGenerales5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpGenerales5' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpGenerales5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpGenerales6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpGenerales6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpGenerales6' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpGenerales6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpCopiaInsumos() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpCopiaInsumosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpCopiaInsumos' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpCopiaInsumosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpProceso() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpProcesoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpProceso' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpProcesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpBuscarEnArchivo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpBuscarEnArchivoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpBuscarEnArchivo' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpBuscarEnArchivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpFijarArchivo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpFijarArchivoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpFijarArchivo' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpFijarArchivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpArchivo() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpArchivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpArchivo' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpArchivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObraReciente1() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ObraReciente1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObraReciente1' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ObraReciente1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObraReciente2() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ObraReciente2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObraReciente2' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ObraReciente2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObraReciente3() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ObraReciente3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObraReciente3' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ObraReciente3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObraReciente4() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ObraReciente4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObraReciente4' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ObraReciente4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObraReciente5() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ObraReciente5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObraReciente5' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ObraReciente5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObraReciente6() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ObraReciente6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObraReciente6' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ObraReciente6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObraReciente7() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ObraReciente7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObraReciente7' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ObraReciente7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObraReciente8() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ObraReciente8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObraReciente8' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ObraReciente8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObraReciente9() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ObraReciente9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObraReciente9' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ObraReciente9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObraReciente10() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ObraReciente10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObraReciente10' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ObraReciente10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpresionAPV() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.ImpresionAPVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpresionAPV' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.ImpresionAPVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LetraEnc() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.LetraEncColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LetraEnc' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.LetraEncColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LetraDet() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.LetraDetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LetraDet' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.LetraDetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstiloEnc() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.EstiloEncColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EstiloEnc' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.EstiloEncColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstiloDet() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.EstiloDetColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EstiloDet' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.EstiloDetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TamañoEnc() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.TamañoEncColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TamañoEnc' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.TamañoEncColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TamañoDet() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.TamañoDetColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TamañoDet' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.TamañoDetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MargenSup() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.MargenSupColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MargenSup' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.MargenSupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MargenInf() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.MargenInfColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MargenInf' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.MargenInfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTTrabajo() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.TxTTrabajoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTTrabajo' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.TxTTrabajoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTAdministracion() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.TxTAdministracionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTAdministracion' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.TxTAdministracionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTUtilidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.TxTUtilidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTUtilidad' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.TxTUtilidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTIVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.TxTIVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTIVA' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.TxTIVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TxTJornadaDiaria() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.TxTJornadaDiariaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TxTJornadaDiaria' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.TxTJornadaDiariaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCAS() As Double
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.FCASColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FCAS' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.FCASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda_P() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.Moneda_PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moneda_P' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.Moneda_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda_S() As String
            Get
                Try 
                    Return CType(Me(Me.tableConfiguracion.Moneda_SColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moneda_S' in table 'Configuracion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConfiguracion.Moneda_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ObraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraNull()
            Me(Me.tableConfiguracion.ObraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLeydelTrabajoNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.LeydelTrabajoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLeydelTrabajoNull()
            Me(Me.tableConfiguracion.LeydelTrabajoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdministracionNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.AdministracionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdministracionNull()
            Me(Me.tableConfiguracion.AdministracionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDigitosRendimientoNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.DigitosRendimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDigitosRendimientoNull()
            Me(Me.tableConfiguracion.DigitosRendimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRendimientoNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.RendimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRendimientoNull()
            Me(Me.tableConfiguracion.RendimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUtilidadNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.UtilidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUtilidadNull()
            Me(Me.tableConfiguracion.UtilidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoVentasNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpuestoVentasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoVentasNull()
            Me(Me.tableConfiguracion.ImpuestoVentasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadDePartidaNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.CantidadDePartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadDePartidaNull()
            Me(Me.tableConfiguracion.CantidadDePartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadDelAnalisisNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.CantidadDelAnalisisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadDelAnalisisNull()
            Me(Me.tableConfiguracion.CantidadDelAnalisisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoImpuestoCargadoNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.TipoImpuestoCargadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoImpuestoCargadoNull()
            Me(Me.tableConfiguracion.TipoImpuestoCargadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDividirMaterialesNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.DividirMaterialesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDividirMaterialesNull()
            Me(Me.tableConfiguracion.DividirMaterialesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAfectanPrestacionesNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.AfectanPrestacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAfectanPrestacionesNull()
            Me(Me.tableConfiguracion.AfectanPrestacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseMaterialesUsarNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.BaseMaterialesUsarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseMaterialesUsarNull()
            Me(Me.tableConfiguracion.BaseMaterialesUsarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesMaterialesUsarNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.MesMaterialesUsarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesMaterialesUsarNull()
            Me(Me.tableConfiguracion.MesMaterialesUsarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseEquiposUsarNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.BaseEquiposUsarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseEquiposUsarNull()
            Me(Me.tableConfiguracion.BaseEquiposUsarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesEquiposUsarNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.MesEquiposUsarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesEquiposUsarNull()
            Me(Me.tableConfiguracion.MesEquiposUsarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseManoObraUsarNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.BaseManoObraUsarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseManoObraUsarNull()
            Me(Me.tableConfiguracion.BaseManoObraUsarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesManoObraUsarNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.MesManoObraUsarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesManoObraUsarNull()
            Me(Me.tableConfiguracion.MesManoObraUsarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoRendimientoNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.TipoRendimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoRendimientoNull()
            Me(Me.tableConfiguracion.TipoRendimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHorasJornadaDiariaNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.HorasJornadaDiariaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHorasJornadaDiariaNull()
            Me(Me.tableConfiguracion.HorasJornadaDiariaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoImpresoraNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.TipoImpresoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoImpresoraNull()
            Me(Me.tableConfiguracion.TipoImpresoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreciosDistintosACalculadosNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.PreciosDistintosACalculadosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreciosDistintosACalculadosNull()
            Me(Me.tableConfiguracion.PreciosDistintosACalculadosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeEnAnalisisNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.PorcentajeEnAnalisisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeEnAnalisisNull()
            Me(Me.tableConfiguracion.PorcentajeEnAnalisisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoInsumosEnAnalisisNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.CodigoInsumosEnAnalisisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoInsumosEnAnalisisNull()
            Me(Me.tableConfiguracion.CodigoInsumosEnAnalisisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonedaUtilizarNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.MonedaUtilizarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonedaUtilizarNull()
            Me(Me.tableConfiguracion.MonedaUtilizarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUltimaObra1Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.UltimaObra1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUltimaObra1Null()
            Me(Me.tableConfiguracion.UltimaObra1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUltimaObra2Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.UltimaObra2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUltimaObra2Null()
            Me(Me.tableConfiguracion.UltimaObra2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUltimaObra3Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.UltimaObra3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUltimaObra3Null()
            Me(Me.tableConfiguracion.UltimaObra3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpEstructura1Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpEstructura1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpEstructura1Null()
            Me(Me.tableConfiguracion.ImpEstructura1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpEstructura2Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpEstructura2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpEstructura2Null()
            Me(Me.tableConfiguracion.ImpEstructura2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpEstructura3Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpEstructura3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpEstructura3Null()
            Me(Me.tableConfiguracion.ImpEstructura3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpEstructura4Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpEstructura4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpEstructura4Null()
            Me(Me.tableConfiguracion.ImpEstructura4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpEstructura5Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpEstructura5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpEstructura5Null()
            Me(Me.tableConfiguracion.ImpEstructura5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpGenerales1Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpGenerales1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpGenerales1Null()
            Me(Me.tableConfiguracion.ImpGenerales1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpGenerales2Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpGenerales2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpGenerales2Null()
            Me(Me.tableConfiguracion.ImpGenerales2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpGenerales3Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpGenerales3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpGenerales3Null()
            Me(Me.tableConfiguracion.ImpGenerales3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpGenerales4Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpGenerales4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpGenerales4Null()
            Me(Me.tableConfiguracion.ImpGenerales4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpGenerales5Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpGenerales5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpGenerales5Null()
            Me(Me.tableConfiguracion.ImpGenerales5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpGenerales6Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpGenerales6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpGenerales6Null()
            Me(Me.tableConfiguracion.ImpGenerales6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpCopiaInsumosNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpCopiaInsumosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpCopiaInsumosNull()
            Me(Me.tableConfiguracion.ImpCopiaInsumosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpProcesoNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpProcesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpProcesoNull()
            Me(Me.tableConfiguracion.ImpProcesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpBuscarEnArchivoNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpBuscarEnArchivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpBuscarEnArchivoNull()
            Me(Me.tableConfiguracion.ImpBuscarEnArchivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpFijarArchivoNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpFijarArchivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpFijarArchivoNull()
            Me(Me.tableConfiguracion.ImpFijarArchivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpArchivoNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpArchivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpArchivoNull()
            Me(Me.tableConfiguracion.ImpArchivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraReciente1Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ObraReciente1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraReciente1Null()
            Me(Me.tableConfiguracion.ObraReciente1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraReciente2Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ObraReciente2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraReciente2Null()
            Me(Me.tableConfiguracion.ObraReciente2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraReciente3Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ObraReciente3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraReciente3Null()
            Me(Me.tableConfiguracion.ObraReciente3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraReciente4Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ObraReciente4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraReciente4Null()
            Me(Me.tableConfiguracion.ObraReciente4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraReciente5Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ObraReciente5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraReciente5Null()
            Me(Me.tableConfiguracion.ObraReciente5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraReciente6Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ObraReciente6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraReciente6Null()
            Me(Me.tableConfiguracion.ObraReciente6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraReciente7Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ObraReciente7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraReciente7Null()
            Me(Me.tableConfiguracion.ObraReciente7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraReciente8Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ObraReciente8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraReciente8Null()
            Me(Me.tableConfiguracion.ObraReciente8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraReciente9Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ObraReciente9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraReciente9Null()
            Me(Me.tableConfiguracion.ObraReciente9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraReciente10Null() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ObraReciente10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraReciente10Null()
            Me(Me.tableConfiguracion.ObraReciente10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpresionAPVNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.ImpresionAPVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpresionAPVNull()
            Me(Me.tableConfiguracion.ImpresionAPVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLetraEncNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.LetraEncColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLetraEncNull()
            Me(Me.tableConfiguracion.LetraEncColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLetraDetNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.LetraDetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLetraDetNull()
            Me(Me.tableConfiguracion.LetraDetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstiloEncNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.EstiloEncColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstiloEncNull()
            Me(Me.tableConfiguracion.EstiloEncColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstiloDetNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.EstiloDetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstiloDetNull()
            Me(Me.tableConfiguracion.EstiloDetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTamañoEncNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.TamañoEncColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTamañoEncNull()
            Me(Me.tableConfiguracion.TamañoEncColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTamañoDetNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.TamañoDetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTamañoDetNull()
            Me(Me.tableConfiguracion.TamañoDetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMargenSupNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.MargenSupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMargenSupNull()
            Me(Me.tableConfiguracion.MargenSupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMargenInfNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.MargenInfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMargenInfNull()
            Me(Me.tableConfiguracion.MargenInfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTTrabajoNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.TxTTrabajoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTTrabajoNull()
            Me(Me.tableConfiguracion.TxTTrabajoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTAdministracionNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.TxTAdministracionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTAdministracionNull()
            Me(Me.tableConfiguracion.TxTAdministracionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTUtilidadNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.TxTUtilidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTUtilidadNull()
            Me(Me.tableConfiguracion.TxTUtilidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTIVANull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.TxTIVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTIVANull()
            Me(Me.tableConfiguracion.TxTIVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTxTJornadaDiariaNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.TxTJornadaDiariaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTxTJornadaDiariaNull()
            Me(Me.tableConfiguracion.TxTJornadaDiariaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCASNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.FCASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCASNull()
            Me(Me.tableConfiguracion.FCASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoneda_PNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.Moneda_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoneda_PNull()
            Me(Me.tableConfiguracion.Moneda_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoneda_SNull() As Boolean
            Return Me.IsNull(Me.tableConfiguracion.Moneda_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoneda_SNull()
            Me(Me.tableConfiguracion.Moneda_SColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CostosRow
        Inherits Global.System.Data.DataRow
        
        Private tableCostos As CostosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCostos = CType(Me.Table,CostosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo_CAT_P() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Codigo_CAT_PColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo_CAT_P' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Codigo_CAT_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion_CAT_P() As String
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Descripcion_CAT_PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion_CAT_P' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Descripcion_CAT_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo_SCAT_P() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Codigo_SCAT_PColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo_SCAT_P' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Codigo_SCAT_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion_SCAT_P() As String
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Descripcion_SCAT_PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion_SCAT_P' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Descripcion_SCAT_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo_Renglon_P() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Codigo_Renglon_PColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo_Renglon_P' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Codigo_Renglon_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion_Renglon_P() As String
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Descripcion_Renglon_PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion_Renglon_P' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Descripcion_Renglon_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo_CAT_SEC() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Codigo_CAT_SECColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo_CAT_SEC' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Codigo_CAT_SECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion_CAT_SEC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Descripcion_CAT_SECColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion_CAT_SEC' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Descripcion_CAT_SECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo_CAT_SEC1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Codigo_CAT_SEC1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo_CAT_SEC1' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Codigo_CAT_SEC1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion_CAT_SEC1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Descripcion_CAT_SEC1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion_CAT_SEC1' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Descripcion_CAT_SEC1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo_SCAT_SEC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Codigo_SCAT_SECColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo_SCAT_SEC' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Codigo_SCAT_SECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion_SCAT_SEC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Descripcion_SCAT_SECColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion_SCAT_SEC' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Descripcion_SCAT_SECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo_Renglon_S() As String
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Codigo_Renglon_SColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo_Renglon_S' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Codigo_Renglon_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion_Renglon_S() As String
            Get
                Try 
                    Return CType(Me(Me.tableCostos.Descripcion_Renglon_SColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion_Renglon_S' in table 'Costos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCostos.Descripcion_Renglon_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigo_CAT_PNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Codigo_CAT_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigo_CAT_PNull()
            Me(Me.tableCostos.Codigo_CAT_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion_CAT_PNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Descripcion_CAT_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion_CAT_PNull()
            Me(Me.tableCostos.Descripcion_CAT_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigo_SCAT_PNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Codigo_SCAT_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigo_SCAT_PNull()
            Me(Me.tableCostos.Codigo_SCAT_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion_SCAT_PNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Descripcion_SCAT_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion_SCAT_PNull()
            Me(Me.tableCostos.Descripcion_SCAT_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigo_Renglon_PNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Codigo_Renglon_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigo_Renglon_PNull()
            Me(Me.tableCostos.Codigo_Renglon_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion_Renglon_PNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Descripcion_Renglon_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion_Renglon_PNull()
            Me(Me.tableCostos.Descripcion_Renglon_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigo_CAT_SECNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Codigo_CAT_SECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigo_CAT_SECNull()
            Me(Me.tableCostos.Codigo_CAT_SECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion_CAT_SECNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Descripcion_CAT_SECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion_CAT_SECNull()
            Me(Me.tableCostos.Descripcion_CAT_SECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigo_CAT_SEC1Null() As Boolean
            Return Me.IsNull(Me.tableCostos.Codigo_CAT_SEC1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigo_CAT_SEC1Null()
            Me(Me.tableCostos.Codigo_CAT_SEC1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion_CAT_SEC1Null() As Boolean
            Return Me.IsNull(Me.tableCostos.Descripcion_CAT_SEC1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion_CAT_SEC1Null()
            Me(Me.tableCostos.Descripcion_CAT_SEC1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigo_SCAT_SECNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Codigo_SCAT_SECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigo_SCAT_SECNull()
            Me(Me.tableCostos.Codigo_SCAT_SECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion_SCAT_SECNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Descripcion_SCAT_SECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion_SCAT_SECNull()
            Me(Me.tableCostos.Descripcion_SCAT_SECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigo_Renglon_SNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Codigo_Renglon_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigo_Renglon_SNull()
            Me(Me.tableCostos.Codigo_Renglon_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion_Renglon_SNull() As Boolean
            Return Me.IsNull(Me.tableCostos.Descripcion_Renglon_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion_Renglon_SNull()
            Me(Me.tableCostos.Descripcion_Renglon_SColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EqpImpLRow
        Inherits Global.System.Data.DataRow
        
        Private tableEqpImpL As EqpImpLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEqpImpL = CType(Me.Table,EqpImpLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodEqpLULO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.CodEqpLULOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodEqpLULO' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.CodEqpLULOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Suplidor() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.SuplidorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suplidor' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.SuplidorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioEqp() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioEqpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioEqp' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioEqpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioDia() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioDiaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioDia' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioDiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depreciacion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DepreciacionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depreciacion' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DepreciacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes1' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes2' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes3' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes4' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes5' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes6' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes7' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes8' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes9' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes10' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes11' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes1' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes2' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes3' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes4' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes5' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes6' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes7' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes8' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes9' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes10' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes11' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DeprecMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes12' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DeprecMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioUnitario2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario2daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioUnitario2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes22daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes32daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes42daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes52daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes62daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes72daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes82daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes92daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes102daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes112daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PrecioMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes122daMoneda' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PrecioMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaPrecio() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DiferenciaPrecioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaPrecio' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DiferenciaPrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaDepreciacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.DiferenciaDepreciacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaDepreciacion' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.DiferenciaDepreciacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDiferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PorcentajeDiferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeDiferencia' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PorcentajeDiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDepreciacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpL.PorcentajeDepreciacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeDepreciacion' in table 'EqpImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpL.PorcentajeDepreciacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableEqpImpL.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableEqpImpL.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableEqpImpL.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodEqpLULONull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.CodEqpLULOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodEqpLULONull()
            Me(Me.tableEqpImpL.CodEqpLULOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableEqpImpL.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableEqpImpL.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableEqpImpL.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuplidorNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.SuplidorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuplidorNull()
            Me(Me.tableEqpImpL.SuplidorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioEqpNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioEqpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioEqpNull()
            Me(Me.tableEqpImpL.PrecioEqpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioDiaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioDiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioDiaNull()
            Me(Me.tableEqpImpL.PrecioDiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepreciacionNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DepreciacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepreciacionNull()
            Me(Me.tableEqpImpL.DepreciacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes1Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes1Null()
            Me(Me.tableEqpImpL.PrecioMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes2Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes2Null()
            Me(Me.tableEqpImpL.PrecioMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes3Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes3Null()
            Me(Me.tableEqpImpL.PrecioMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes4Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes4Null()
            Me(Me.tableEqpImpL.PrecioMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes5Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes5Null()
            Me(Me.tableEqpImpL.PrecioMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes6Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes6Null()
            Me(Me.tableEqpImpL.PrecioMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes7Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes7Null()
            Me(Me.tableEqpImpL.PrecioMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes8Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes8Null()
            Me(Me.tableEqpImpL.PrecioMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes9Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes9Null()
            Me(Me.tableEqpImpL.PrecioMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes10Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes10Null()
            Me(Me.tableEqpImpL.PrecioMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes11Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes11Null()
            Me(Me.tableEqpImpL.PrecioMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12Null()
            Me(Me.tableEqpImpL.PrecioMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes1Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes1Null()
            Me(Me.tableEqpImpL.DeprecMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes2Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes2Null()
            Me(Me.tableEqpImpL.DeprecMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes3Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes3Null()
            Me(Me.tableEqpImpL.DeprecMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes4Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes4Null()
            Me(Me.tableEqpImpL.DeprecMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes5Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes5Null()
            Me(Me.tableEqpImpL.DeprecMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes6Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes6Null()
            Me(Me.tableEqpImpL.DeprecMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes7Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes7Null()
            Me(Me.tableEqpImpL.DeprecMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes8Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes8Null()
            Me(Me.tableEqpImpL.DeprecMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes9Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes9Null()
            Me(Me.tableEqpImpL.DeprecMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes10Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes10Null()
            Me(Me.tableEqpImpL.DeprecMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes11Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes11Null()
            Me(Me.tableEqpImpL.DeprecMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes12Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DeprecMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes12Null()
            Me(Me.tableEqpImpL.DeprecMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitario2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioUnitario2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitario2daMonedaNull()
            Me(Me.tableEqpImpL.PrecioUnitario2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes22daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes32daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes42daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes52daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes62daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes72daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes82daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes92daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes102daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes112daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PrecioMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes122daMonedaNull()
            Me(Me.tableEqpImpL.PrecioMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaPrecioNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DiferenciaPrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaPrecioNull()
            Me(Me.tableEqpImpL.DiferenciaPrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaDepreciacionNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.DiferenciaDepreciacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaDepreciacionNull()
            Me(Me.tableEqpImpL.DiferenciaDepreciacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PorcentajeDiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeDiferenciaNull()
            Me(Me.tableEqpImpL.PorcentajeDiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeDepreciacionNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpL.PorcentajeDepreciacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeDepreciacionNull()
            Me(Me.tableEqpImpL.PorcentajeDepreciacionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EqpImpLBsSRow
        Inherits Global.System.Data.DataRow
        
        Private tableEqpImpLBsS As EqpImpLBsSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEqpImpLBsS = CType(Me.Table,EqpImpLBsSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodEqpLULO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.CodEqpLULOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodEqpLULO' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.CodEqpLULOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Suplidor() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.SuplidorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suplidor' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.SuplidorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioEqp() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioEqpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioEqp' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioEqpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioDia() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioDiaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioDia' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioDiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depreciacion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DepreciacionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depreciacion' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DepreciacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes1' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes2' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes3' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes4' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes5' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes6' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes7' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes8' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes9' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes10' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes11' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes1' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes2' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes3' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes4' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes5' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes6' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes7' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes8' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes9' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes10' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes11' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DeprecMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes12' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DeprecMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioUnitario2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario2daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioUnitario2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes22daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes32daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes42daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes52daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes62daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes72daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes82daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes92daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes102daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes112daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PrecioMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes122daMoneda' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PrecioMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaPrecio() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DiferenciaPrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaPrecio' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DiferenciaPrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaDepreciacion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.DiferenciaDepreciacionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaDepreciacion' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.DiferenciaDepreciacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDiferencia() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PorcentajeDiferenciaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeDiferencia' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PorcentajeDiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDepreciacion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpImpLBsS.PorcentajeDepreciacionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeDepreciacion' in table 'EqpImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpImpLBsS.PorcentajeDepreciacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableEqpImpLBsS.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableEqpImpLBsS.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableEqpImpLBsS.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodEqpLULONull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.CodEqpLULOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodEqpLULONull()
            Me(Me.tableEqpImpLBsS.CodEqpLULOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableEqpImpLBsS.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableEqpImpLBsS.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableEqpImpLBsS.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuplidorNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.SuplidorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuplidorNull()
            Me(Me.tableEqpImpLBsS.SuplidorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioEqpNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioEqpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioEqpNull()
            Me(Me.tableEqpImpLBsS.PrecioEqpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioDiaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioDiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioDiaNull()
            Me(Me.tableEqpImpLBsS.PrecioDiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepreciacionNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DepreciacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepreciacionNull()
            Me(Me.tableEqpImpLBsS.DepreciacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes1Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes1Null()
            Me(Me.tableEqpImpLBsS.PrecioMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes2Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes2Null()
            Me(Me.tableEqpImpLBsS.PrecioMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes3Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes3Null()
            Me(Me.tableEqpImpLBsS.PrecioMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes4Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes4Null()
            Me(Me.tableEqpImpLBsS.PrecioMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes5Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes5Null()
            Me(Me.tableEqpImpLBsS.PrecioMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes6Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes6Null()
            Me(Me.tableEqpImpLBsS.PrecioMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes7Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes7Null()
            Me(Me.tableEqpImpLBsS.PrecioMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes8Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes8Null()
            Me(Me.tableEqpImpLBsS.PrecioMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes9Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes9Null()
            Me(Me.tableEqpImpLBsS.PrecioMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes10Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes10Null()
            Me(Me.tableEqpImpLBsS.PrecioMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes11Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes11Null()
            Me(Me.tableEqpImpLBsS.PrecioMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12Null()
            Me(Me.tableEqpImpLBsS.PrecioMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes1Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes1Null()
            Me(Me.tableEqpImpLBsS.DeprecMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes2Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes2Null()
            Me(Me.tableEqpImpLBsS.DeprecMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes3Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes3Null()
            Me(Me.tableEqpImpLBsS.DeprecMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes4Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes4Null()
            Me(Me.tableEqpImpLBsS.DeprecMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes5Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes5Null()
            Me(Me.tableEqpImpLBsS.DeprecMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes6Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes6Null()
            Me(Me.tableEqpImpLBsS.DeprecMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes7Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes7Null()
            Me(Me.tableEqpImpLBsS.DeprecMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes8Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes8Null()
            Me(Me.tableEqpImpLBsS.DeprecMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes9Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes9Null()
            Me(Me.tableEqpImpLBsS.DeprecMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes10Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes10Null()
            Me(Me.tableEqpImpLBsS.DeprecMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes11Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes11Null()
            Me(Me.tableEqpImpLBsS.DeprecMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes12Null() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DeprecMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes12Null()
            Me(Me.tableEqpImpLBsS.DeprecMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitario2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioUnitario2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitario2daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioUnitario2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes22daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes32daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes42daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes52daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes62daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes72daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes82daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes92daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes102daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes112daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PrecioMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes122daMonedaNull()
            Me(Me.tableEqpImpLBsS.PrecioMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaPrecioNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DiferenciaPrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaPrecioNull()
            Me(Me.tableEqpImpLBsS.DiferenciaPrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaDepreciacionNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.DiferenciaDepreciacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaDepreciacionNull()
            Me(Me.tableEqpImpLBsS.DiferenciaDepreciacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PorcentajeDiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeDiferenciaNull()
            Me(Me.tableEqpImpLBsS.PorcentajeDiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeDepreciacionNull() As Boolean
            Return Me.IsNull(Me.tableEqpImpLBsS.PorcentajeDepreciacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeDepreciacionNull()
            Me(Me.tableEqpImpLBsS.PorcentajeDepreciacionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EquipoCompRow
        Inherits Global.System.Data.DataRow
        
        Private tableEquipoComp As EquipoCompDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEquipoComp = CType(Me.Table,EquipoCompDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodInterno() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEquipoComp.CodInternoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodInterno' in table 'EquipoComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipoComp.CodInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lista() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEquipoComp.ListaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Lista' in table 'EquipoComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipoComp.ListaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEquipoComp.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'EquipoComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipoComp.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEquipoComp.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'EquipoComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipoComp.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableEquipoComp.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'EquipoComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipoComp.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableEquipoComp.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'EquipoComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipoComp.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEquipoComp.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'EquipoComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipoComp.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEquipoComp.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Precio' in table 'EquipoComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipoComp.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depreciacion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEquipoComp.DepreciacionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depreciacion' in table 'EquipoComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipoComp.DepreciacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodInternoNull() As Boolean
            Return Me.IsNull(Me.tableEquipoComp.CodInternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodInternoNull()
            Me(Me.tableEquipoComp.CodInternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListaNull() As Boolean
            Return Me.IsNull(Me.tableEquipoComp.ListaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListaNull()
            Me(Me.tableEquipoComp.ListaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableEquipoComp.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableEquipoComp.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableEquipoComp.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableEquipoComp.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableEquipoComp.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableEquipoComp.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableEquipoComp.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableEquipoComp.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableEquipoComp.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableEquipoComp.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tableEquipoComp.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tableEquipoComp.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepreciacionNull() As Boolean
            Return Me.IsNull(Me.tableEquipoComp.DepreciacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepreciacionNull()
            Me(Me.tableEquipoComp.DepreciacionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IndicesPACRow
        Inherits Global.System.Data.DataRow
        
        Private tableIndicesPAC As IndicesPACDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIndicesPAC = CType(Me.Table,IndicesPACDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GRUPO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.GRUPOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRUPO' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGRUPACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.AGRUPACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AGRUPACION' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.AGRUPACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AÑO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.AÑOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AÑO' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.AÑOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDENTIFICACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.IDENTIFICACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDENTIFICACION' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.IDENTIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDEN() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.ORDENColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDEN' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.ORDENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES1' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES2' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES3' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES4' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES5' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES6' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES7' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES8' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES9' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES10' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES11' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndicesPAC.MES12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES12' in table 'IndicesPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndicesPAC.MES12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGRUPONull() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.GRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGRUPONull()
            Me(Me.tableIndicesPAC.GRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGRUPACIONNull() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.AGRUPACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGRUPACIONNull()
            Me(Me.tableIndicesPAC.AGRUPACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAÑONull() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.AÑOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAÑONull()
            Me(Me.tableIndicesPAC.AÑOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDENTIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.IDENTIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDENTIFICACIONNull()
            Me(Me.tableIndicesPAC.IDENTIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDENNull() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.ORDENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDENNull()
            Me(Me.tableIndicesPAC.ORDENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES1Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES1Null()
            Me(Me.tableIndicesPAC.MES1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES2Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES2Null()
            Me(Me.tableIndicesPAC.MES2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES3Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES3Null()
            Me(Me.tableIndicesPAC.MES3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES4Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES4Null()
            Me(Me.tableIndicesPAC.MES4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES5Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES5Null()
            Me(Me.tableIndicesPAC.MES5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES6Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES6Null()
            Me(Me.tableIndicesPAC.MES6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES7Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES7Null()
            Me(Me.tableIndicesPAC.MES7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES8Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES8Null()
            Me(Me.tableIndicesPAC.MES8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES9Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES9Null()
            Me(Me.tableIndicesPAC.MES9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES10Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES10Null()
            Me(Me.tableIndicesPAC.MES10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES11Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES11Null()
            Me(Me.tableIndicesPAC.MES11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES12Null() As Boolean
            Return Me.IsNull(Me.tableIndicesPAC.MES12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES12Null()
            Me(Me.tableIndicesPAC.MES12Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ListaEqpRow
        Inherits Global.System.Data.DataRow
        
        Private tableListaEqp As ListaEqpDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableListaEqp = CType(Me.Table,ListaEqpDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListName() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaEqp.ListNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListName' in table 'ListaEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaEqp.ListNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableListaEqp.ListDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListDate' in table 'ListaEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaEqp.ListDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaEqp.ListDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListDes' in table 'ListaEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaEqp.ListDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBName() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaEqp.DBNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBName' in table 'ListaEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaEqp.DBNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaEqp.DBPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBPath' in table 'ListaEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaEqp.DBPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TableN() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaEqp.TableNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TableN' in table 'ListaEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaEqp.TableNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListNameNull() As Boolean
            Return Me.IsNull(Me.tableListaEqp.ListNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListNameNull()
            Me(Me.tableListaEqp.ListNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListDateNull() As Boolean
            Return Me.IsNull(Me.tableListaEqp.ListDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListDateNull()
            Me(Me.tableListaEqp.ListDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListDesNull() As Boolean
            Return Me.IsNull(Me.tableListaEqp.ListDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListDesNull()
            Me(Me.tableListaEqp.ListDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBNameNull() As Boolean
            Return Me.IsNull(Me.tableListaEqp.DBNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBNameNull()
            Me(Me.tableListaEqp.DBNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBPathNull() As Boolean
            Return Me.IsNull(Me.tableListaEqp.DBPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBPathNull()
            Me(Me.tableListaEqp.DBPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTableNNull() As Boolean
            Return Me.IsNull(Me.tableListaEqp.TableNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTableNNull()
            Me(Me.tableListaEqp.TableNColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ListaMatRow
        Inherits Global.System.Data.DataRow
        
        Private tableListaMat As ListaMatDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableListaMat = CType(Me.Table,ListaMatDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListName() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaMat.ListNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListName' in table 'ListaMat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMat.ListNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableListaMat.ListDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListDate' in table 'ListaMat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMat.ListDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaMat.ListDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListDes' in table 'ListaMat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMat.ListDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBName() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaMat.DBNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBName' in table 'ListaMat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMat.DBNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaMat.DBPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBPath' in table 'ListaMat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMat.DBPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TableN() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaMat.TableNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TableN' in table 'ListaMat' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMat.TableNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListNameNull() As Boolean
            Return Me.IsNull(Me.tableListaMat.ListNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListNameNull()
            Me(Me.tableListaMat.ListNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListDateNull() As Boolean
            Return Me.IsNull(Me.tableListaMat.ListDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListDateNull()
            Me(Me.tableListaMat.ListDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListDesNull() As Boolean
            Return Me.IsNull(Me.tableListaMat.ListDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListDesNull()
            Me(Me.tableListaMat.ListDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBNameNull() As Boolean
            Return Me.IsNull(Me.tableListaMat.DBNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBNameNull()
            Me(Me.tableListaMat.DBNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBPathNull() As Boolean
            Return Me.IsNull(Me.tableListaMat.DBPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBPathNull()
            Me(Me.tableListaMat.DBPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTableNNull() As Boolean
            Return Me.IsNull(Me.tableListaMat.TableNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTableNNull()
            Me(Me.tableListaMat.TableNColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ListaMdORow
        Inherits Global.System.Data.DataRow
        
        Private tableListaMdO As ListaMdODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableListaMdO = CType(Me.Table,ListaMdODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListName() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaMdO.ListNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListName' in table 'ListaMdO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMdO.ListNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableListaMdO.ListDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListDate' in table 'ListaMdO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMdO.ListDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaMdO.ListDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListDes' in table 'ListaMdO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMdO.ListDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBName() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaMdO.DBNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBName' in table 'ListaMdO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMdO.DBNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaMdO.DBPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBPath' in table 'ListaMdO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMdO.DBPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TableN() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaMdO.TableNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TableN' in table 'ListaMdO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaMdO.TableNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListNameNull() As Boolean
            Return Me.IsNull(Me.tableListaMdO.ListNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListNameNull()
            Me(Me.tableListaMdO.ListNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListDateNull() As Boolean
            Return Me.IsNull(Me.tableListaMdO.ListDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListDateNull()
            Me(Me.tableListaMdO.ListDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListDesNull() As Boolean
            Return Me.IsNull(Me.tableListaMdO.ListDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListDesNull()
            Me(Me.tableListaMdO.ListDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBNameNull() As Boolean
            Return Me.IsNull(Me.tableListaMdO.DBNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBNameNull()
            Me(Me.tableListaMdO.DBNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBPathNull() As Boolean
            Return Me.IsNull(Me.tableListaMdO.DBPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBPathNull()
            Me(Me.tableListaMdO.DBPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTableNNull() As Boolean
            Return Me.IsNull(Me.tableListaMdO.TableNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTableNNull()
            Me(Me.tableListaMdO.TableNColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ListaTranRow
        Inherits Global.System.Data.DataRow
        
        Private tableListaTran As ListaTranDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableListaTran = CType(Me.Table,ListaTranDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListName() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaTran.ListNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListName' in table 'ListaTran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaTran.ListNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableListaTran.ListDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListDate' in table 'ListaTran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaTran.ListDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaTran.ListDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListDes' in table 'ListaTran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaTran.ListDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBName() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaTran.DBNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBName' in table 'ListaTran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaTran.DBNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaTran.DBPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBPath' in table 'ListaTran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaTran.DBPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TableN() As String
            Get
                Try 
                    Return CType(Me(Me.tableListaTran.TableNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TableN' in table 'ListaTran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListaTran.TableNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListNameNull() As Boolean
            Return Me.IsNull(Me.tableListaTran.ListNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListNameNull()
            Me(Me.tableListaTran.ListNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListDateNull() As Boolean
            Return Me.IsNull(Me.tableListaTran.ListDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListDateNull()
            Me(Me.tableListaTran.ListDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListDesNull() As Boolean
            Return Me.IsNull(Me.tableListaTran.ListDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListDesNull()
            Me(Me.tableListaTran.ListDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBNameNull() As Boolean
            Return Me.IsNull(Me.tableListaTran.DBNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBNameNull()
            Me(Me.tableListaTran.DBNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBPathNull() As Boolean
            Return Me.IsNull(Me.tableListaTran.DBPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBPathNull()
            Me(Me.tableListaTran.DBPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTableNNull() As Boolean
            Return Me.IsNull(Me.tableListaTran.TableNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTableNNull()
            Me(Me.tableListaTran.TableNColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MasterEqpRow
        Inherits Global.System.Data.DataRow
        
        Private tableMasterEqp As MasterEqpDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMasterEqp = CType(Me.Table,MasterEqpDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lista() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.ListaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Lista' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.ListaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Precio' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depreciacion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DepreciacionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depreciacion' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DepreciacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Suplidor() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.SuplidorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suplidor' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.SuplidorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes1' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes2' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes3' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes4' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes5' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes6' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes7' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes8' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes9' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes10' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes11' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.PrecioMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.PrecioMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes1' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes2' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes3' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes4' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes5' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes6' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes7' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes8' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes9' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes10' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes11' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeprecMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterEqp.DeprecMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeprecMes12' in table 'MasterEqp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterEqp.DeprecMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMasterEqp.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListaNull() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.ListaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListaNull()
            Me(Me.tableMasterEqp.ListaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMasterEqp.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMasterEqp.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMasterEqp.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tableMasterEqp.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepreciacionNull() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DepreciacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepreciacionNull()
            Me(Me.tableMasterEqp.DepreciacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMasterEqp.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuplidorNull() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.SuplidorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuplidorNull()
            Me(Me.tableMasterEqp.SuplidorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMasterEqp.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes1Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes1Null()
            Me(Me.tableMasterEqp.PrecioMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes2Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes2Null()
            Me(Me.tableMasterEqp.PrecioMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes3Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes3Null()
            Me(Me.tableMasterEqp.PrecioMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes4Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes4Null()
            Me(Me.tableMasterEqp.PrecioMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes5Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes5Null()
            Me(Me.tableMasterEqp.PrecioMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes6Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes6Null()
            Me(Me.tableMasterEqp.PrecioMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes7Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes7Null()
            Me(Me.tableMasterEqp.PrecioMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes8Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes8Null()
            Me(Me.tableMasterEqp.PrecioMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes9Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes9Null()
            Me(Me.tableMasterEqp.PrecioMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes10Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes10Null()
            Me(Me.tableMasterEqp.PrecioMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes11Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes11Null()
            Me(Me.tableMasterEqp.PrecioMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.PrecioMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12Null()
            Me(Me.tableMasterEqp.PrecioMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes1Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes1Null()
            Me(Me.tableMasterEqp.DeprecMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes2Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes2Null()
            Me(Me.tableMasterEqp.DeprecMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes3Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes3Null()
            Me(Me.tableMasterEqp.DeprecMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes4Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes4Null()
            Me(Me.tableMasterEqp.DeprecMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes5Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes5Null()
            Me(Me.tableMasterEqp.DeprecMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes6Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes6Null()
            Me(Me.tableMasterEqp.DeprecMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes7Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes7Null()
            Me(Me.tableMasterEqp.DeprecMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes8Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes8Null()
            Me(Me.tableMasterEqp.DeprecMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes9Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes9Null()
            Me(Me.tableMasterEqp.DeprecMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes10Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes10Null()
            Me(Me.tableMasterEqp.DeprecMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes11Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes11Null()
            Me(Me.tableMasterEqp.DeprecMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeprecMes12Null() As Boolean
            Return Me.IsNull(Me.tableMasterEqp.DeprecMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeprecMes12Null()
            Me(Me.tableMasterEqp.DeprecMes12Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MasterManoObraRow
        Inherits Global.System.Data.DataRow
        
        Private tableMasterManoObra As MasterManoObraDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMasterManoObra = CType(Me.Table,MasterManoObraDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes1' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes2' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes3' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes4' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes5' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes6' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes7' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes8' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes9' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes10' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes11' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes12' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes1' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes2' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes3' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes4' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes5' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes6' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes7' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes8' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes9' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes10' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes11' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes12' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.Jornal2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal2daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.Jornal2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.Bono2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono2daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.Bono2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes12daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes22daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes32daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes42daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes52daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes62daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes72daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes82daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes92daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes102daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes112daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.JornalMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes122daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.JornalMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes12daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes22daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes32daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes42daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes52daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes62daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes72daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes82daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes92daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes102daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes112daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.BonoMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes122daMoneda' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.BonoMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaJornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.DiferenciaJornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaJornal' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.DiferenciaJornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.DiferenciaBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaBono' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.DiferenciaBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeJornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.PorcentajeJornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeJornal' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.PorcentajeJornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterManoObra.PorcentajeBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeBono' in table 'MasterManoObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterManoObra.PorcentajeBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMasterManoObra.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMasterManoObra.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMasterManoObra.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMasterManoObra.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMasterManoObra.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalNull()
            Me(Me.tableMasterManoObra.JornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoNull()
            Me(Me.tableMasterManoObra.BonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMasterManoObra.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes1Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes1Null()
            Me(Me.tableMasterManoObra.JornalMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes2Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes2Null()
            Me(Me.tableMasterManoObra.JornalMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes3Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes3Null()
            Me(Me.tableMasterManoObra.JornalMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes4Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes4Null()
            Me(Me.tableMasterManoObra.JornalMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes5Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes5Null()
            Me(Me.tableMasterManoObra.JornalMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes6Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes6Null()
            Me(Me.tableMasterManoObra.JornalMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes7Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes7Null()
            Me(Me.tableMasterManoObra.JornalMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes8Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes8Null()
            Me(Me.tableMasterManoObra.JornalMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes9Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes9Null()
            Me(Me.tableMasterManoObra.JornalMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes10Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes10Null()
            Me(Me.tableMasterManoObra.JornalMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes11Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes11Null()
            Me(Me.tableMasterManoObra.JornalMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes12Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes12Null()
            Me(Me.tableMasterManoObra.JornalMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes1Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes1Null()
            Me(Me.tableMasterManoObra.BonoMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes2Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes2Null()
            Me(Me.tableMasterManoObra.BonoMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes3Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes3Null()
            Me(Me.tableMasterManoObra.BonoMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes4Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes4Null()
            Me(Me.tableMasterManoObra.BonoMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes5Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes5Null()
            Me(Me.tableMasterManoObra.BonoMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes6Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes6Null()
            Me(Me.tableMasterManoObra.BonoMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes7Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes7Null()
            Me(Me.tableMasterManoObra.BonoMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes8Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes8Null()
            Me(Me.tableMasterManoObra.BonoMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes9Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes9Null()
            Me(Me.tableMasterManoObra.BonoMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes10Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes10Null()
            Me(Me.tableMasterManoObra.BonoMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes11Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes11Null()
            Me(Me.tableMasterManoObra.BonoMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes12Null() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes12Null()
            Me(Me.tableMasterManoObra.BonoMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornal2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.Jornal2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornal2daMonedaNull()
            Me(Me.tableMasterManoObra.Jornal2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBono2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.Bono2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBono2daMonedaNull()
            Me(Me.tableMasterManoObra.Bono2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes12daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes22daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes32daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes42daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes52daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes62daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes72daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes82daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes92daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes102daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes112daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.JornalMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes122daMonedaNull()
            Me(Me.tableMasterManoObra.JornalMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes12daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes22daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes32daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes42daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes52daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes62daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes72daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes82daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes92daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes102daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes112daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.BonoMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes122daMonedaNull()
            Me(Me.tableMasterManoObra.BonoMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaJornalNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.DiferenciaJornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaJornalNull()
            Me(Me.tableMasterManoObra.DiferenciaJornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaBonoNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.DiferenciaBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaBonoNull()
            Me(Me.tableMasterManoObra.DiferenciaBonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeJornalNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.PorcentajeJornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeJornalNull()
            Me(Me.tableMasterManoObra.PorcentajeJornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeBonoNull() As Boolean
            Return Me.IsNull(Me.tableMasterManoObra.PorcentajeBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeBonoNull()
            Me(Me.tableMasterManoObra.PorcentajeBonoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MasterMaterialRow
        Inherits Global.System.Data.DataRow
        
        Private tableMasterMaterial As MasterMaterialDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMasterMaterial = CType(Me.Table,MasterMaterialDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diferencia() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.DiferenciaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diferencia' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.DiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrupoBCV() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.GrupoBCVColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrupoBCV' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.GrupoBCVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Suplidor() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.SuplidorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suplidor' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.SuplidorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes1' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes2' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes3' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes4' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes5' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes6' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes7' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes8' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes9' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes10' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes11' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDiferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PorcentajeDiferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeDiferencia' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PorcentajeDiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes22daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes32daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes42daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes52daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes62daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes72daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes82daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes92daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes102daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes112daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes122daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioUnitario2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario2daMoneda' in table 'MasterMaterial' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioUnitario2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMasterMaterial.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMasterMaterial.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.DiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaNull()
            Me(Me.tableMasterMaterial.DiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMasterMaterial.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrupoBCVNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.GrupoBCVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrupoBCVNull()
            Me(Me.tableMasterMaterial.GrupoBCVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMasterMaterial.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuplidorNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.SuplidorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuplidorNull()
            Me(Me.tableMasterMaterial.SuplidorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMasterMaterial.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMasterMaterial.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes1Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes1Null()
            Me(Me.tableMasterMaterial.PrecioMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes2Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes2Null()
            Me(Me.tableMasterMaterial.PrecioMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes3Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes3Null()
            Me(Me.tableMasterMaterial.PrecioMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes4Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes4Null()
            Me(Me.tableMasterMaterial.PrecioMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes5Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes5Null()
            Me(Me.tableMasterMaterial.PrecioMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes6Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes6Null()
            Me(Me.tableMasterMaterial.PrecioMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes7Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes7Null()
            Me(Me.tableMasterMaterial.PrecioMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes8Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes8Null()
            Me(Me.tableMasterMaterial.PrecioMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes9Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes9Null()
            Me(Me.tableMasterMaterial.PrecioMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes10Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes10Null()
            Me(Me.tableMasterMaterial.PrecioMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes11Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes11Null()
            Me(Me.tableMasterMaterial.PrecioMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12Null()
            Me(Me.tableMasterMaterial.PrecioMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitarioNull()
            Me(Me.tableMasterMaterial.PrecioUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PorcentajeDiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeDiferenciaNull()
            Me(Me.tableMasterMaterial.PorcentajeDiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes22daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes32daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes42daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes52daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes62daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes72daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes82daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes92daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes102daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes112daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes122daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitario2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioUnitario2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitario2daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioUnitario2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MasterPartBsSRow
        Inherits Global.System.Data.DataRow
        
        Private tableMasterPartBsS As MasterPartBsSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMasterPartBsS = CType(Me.Table,MasterPartBsSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodParL() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.CodParLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodParL' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.CodParLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.Descripcion1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion1' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.Descripcion1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.Descripcion2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion2' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.Descripcion2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.Descripcion3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion3' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.Descripcion3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCovenin() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.CodigoCoveninColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCovenin' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.CodigoCoveninColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiniDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.MiniDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiniDescripcion' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.MiniDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantridadPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.CantridadPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantridadPartida' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.CantridadPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rendimiento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.RendimientoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rendimiento' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.RendimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.PrecioUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioAdoptado() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.PrecioAdoptadoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioAdoptado' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.PrecioAdoptadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario2Mon() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.PrecioUnitario2MonColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario2Mon' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.PrecioUnitario2MonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioAdoptado2Mon() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartBsS.PrecioAdoptado2MonColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioAdoptado2Mon' in table 'MasterPartBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartBsS.PrecioAdoptado2MonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMasterPartBsS.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodParLNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.CodParLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodParLNull()
            Me(Me.tableMasterPartBsS.CodParLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMasterPartBsS.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion1Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.Descripcion1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion1Null()
            Me(Me.tableMasterPartBsS.Descripcion1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion2Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.Descripcion2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion2Null()
            Me(Me.tableMasterPartBsS.Descripcion2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion3Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.Descripcion3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion3Null()
            Me(Me.tableMasterPartBsS.Descripcion3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoCoveninNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.CodigoCoveninColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoCoveninNull()
            Me(Me.tableMasterPartBsS.CodigoCoveninColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiniDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.MiniDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiniDescripcionNull()
            Me(Me.tableMasterPartBsS.MiniDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMasterPartBsS.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantridadPartidaNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.CantridadPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantridadPartidaNull()
            Me(Me.tableMasterPartBsS.CantridadPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRendimientoNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.RendimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRendimientoNull()
            Me(Me.tableMasterPartBsS.RendimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMasterPartBsS.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.PrecioUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitarioNull()
            Me(Me.tableMasterPartBsS.PrecioUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioAdoptadoNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.PrecioAdoptadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioAdoptadoNull()
            Me(Me.tableMasterPartBsS.PrecioAdoptadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitario2MonNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.PrecioUnitario2MonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitario2MonNull()
            Me(Me.tableMasterPartBsS.PrecioUnitario2MonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioAdoptado2MonNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartBsS.PrecioAdoptado2MonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioAdoptado2MonNull()
            Me(Me.tableMasterPartBsS.PrecioAdoptado2MonColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MasterPartidasRow
        Inherits Global.System.Data.DataRow
        
        Private tableMasterPartidas As MasterPartidasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMasterPartidas = CType(Me.Table,MasterPartidasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodParL() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.CodParLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodParL' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.CodParLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.Descripcion1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion1' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.Descripcion1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.Descripcion2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion2' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.Descripcion2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.Descripcion3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion3' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.Descripcion3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCovenin() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.CodigoCoveninColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCovenin' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.CodigoCoveninColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiniDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.MiniDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiniDescripcion' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.MiniDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantridadPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.CantridadPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantridadPartida' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.CantridadPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rendimiento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.RendimientoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rendimiento' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.RendimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.PrecioUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioAdoptado() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.PrecioAdoptadoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioAdoptado' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.PrecioAdoptadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario2Mon() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.PrecioUnitario2MonColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario2Mon' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.PrecioUnitario2MonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioAdoptado2Mon() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.PrecioAdoptado2MonColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioAdoptado2Mon' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.PrecioAdoptado2MonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F17() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.F17Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F17' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.F17Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F18() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.F18Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F18' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.F18Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F19() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.F19Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F19' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.F19Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F20() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.F20Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F20' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.F20Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F21() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.F21Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F21' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.F21Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F22() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.F22Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F22' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.F22Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F23() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.F23Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F23' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.F23Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F24() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.F24Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F24' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.F24Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F25() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.F25Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F25' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.F25Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F26() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterPartidas.F26Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F26' in table 'MasterPartidas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterPartidas.F26Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMasterPartidas.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodParLNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.CodParLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodParLNull()
            Me(Me.tableMasterPartidas.CodParLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMasterPartidas.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion1Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.Descripcion1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion1Null()
            Me(Me.tableMasterPartidas.Descripcion1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion2Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.Descripcion2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion2Null()
            Me(Me.tableMasterPartidas.Descripcion2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion3Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.Descripcion3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion3Null()
            Me(Me.tableMasterPartidas.Descripcion3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoCoveninNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.CodigoCoveninColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoCoveninNull()
            Me(Me.tableMasterPartidas.CodigoCoveninColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiniDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.MiniDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiniDescripcionNull()
            Me(Me.tableMasterPartidas.MiniDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMasterPartidas.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantridadPartidaNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.CantridadPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantridadPartidaNull()
            Me(Me.tableMasterPartidas.CantridadPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRendimientoNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.RendimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRendimientoNull()
            Me(Me.tableMasterPartidas.RendimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMasterPartidas.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.PrecioUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitarioNull()
            Me(Me.tableMasterPartidas.PrecioUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioAdoptadoNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.PrecioAdoptadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioAdoptadoNull()
            Me(Me.tableMasterPartidas.PrecioAdoptadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitario2MonNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.PrecioUnitario2MonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitario2MonNull()
            Me(Me.tableMasterPartidas.PrecioUnitario2MonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioAdoptado2MonNull() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.PrecioAdoptado2MonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioAdoptado2MonNull()
            Me(Me.tableMasterPartidas.PrecioAdoptado2MonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF17Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.F17Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF17Null()
            Me(Me.tableMasterPartidas.F17Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF18Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.F18Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF18Null()
            Me(Me.tableMasterPartidas.F18Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF19Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.F19Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF19Null()
            Me(Me.tableMasterPartidas.F19Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF20Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.F20Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF20Null()
            Me(Me.tableMasterPartidas.F20Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF21Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.F21Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF21Null()
            Me(Me.tableMasterPartidas.F21Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF22Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.F22Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF22Null()
            Me(Me.tableMasterPartidas.F22Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF23Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.F23Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF23Null()
            Me(Me.tableMasterPartidas.F23Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF24Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.F24Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF24Null()
            Me(Me.tableMasterPartidas.F24Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF25Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.F25Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF25Null()
            Me(Me.tableMasterPartidas.F25Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF26Null() As Boolean
            Return Me.IsNull(Me.tableMasterPartidas.F26Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF26Null()
            Me(Me.tableMasterPartidas.F26Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class materialCompRow
        Inherits Global.System.Data.DataRow
        
        Private tablematerialComp As materialCompDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablematerialComp = CType(Me.Table,materialCompDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablematerialComp.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'materialComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematerialComp.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lista() As Double
            Get
                Try 
                    Return CType(Me(Me.tablematerialComp.ListaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Lista' in table 'materialComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematerialComp.ListaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tablematerialComp.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'materialComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematerialComp.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodInterno() As Double
            Get
                Try 
                    Return CType(Me(Me.tablematerialComp.CodInternoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodInterno' in table 'materialComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematerialComp.CodInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablematerialComp.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'materialComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematerialComp.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablematerialComp.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'materialComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematerialComp.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablematerialComp.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'materialComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematerialComp.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablematerialComp.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Precio' in table 'materialComp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematerialComp.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tablematerialComp.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tablematerialComp.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListaNull() As Boolean
            Return Me.IsNull(Me.tablematerialComp.ListaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListaNull()
            Me(Me.tablematerialComp.ListaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tablematerialComp.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tablematerialComp.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodInternoNull() As Boolean
            Return Me.IsNull(Me.tablematerialComp.CodInternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodInternoNull()
            Me(Me.tablematerialComp.CodInternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tablematerialComp.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tablematerialComp.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tablematerialComp.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tablematerialComp.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablematerialComp.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablematerialComp.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tablematerialComp.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tablematerialComp.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MatImpLRow
        Inherits Global.System.Data.DataRow
        
        Private tableMatImpL As MatImpLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMatImpL = CType(Me.Table,MatImpLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMatL() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.CodMatLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodMatL' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.CodMatLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.DiferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diferencia' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.DiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrupoBCV() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.GrupoBCVColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrupoBCV' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.GrupoBCVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Suplidor() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.SuplidorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suplidor' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.SuplidorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes1' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes2' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes3' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes4' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes5' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes6' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes7' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes8' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes9' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes10' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes11' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDiferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PorcentajeDiferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeDiferencia' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PorcentajeDiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioUnitario2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario2daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioUnitario2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes22daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes32daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes42daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes52daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes62daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes72daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes82daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes92daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes102daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes112daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpL.PrecioMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes122daMoneda' in table 'MatImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpL.PrecioMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMatImpL.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMatLNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.CodMatLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMatLNull()
            Me(Me.tableMatImpL.CodMatLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMatImpL.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.DiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaNull()
            Me(Me.tableMatImpL.DiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMatImpL.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrupoBCVNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.GrupoBCVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrupoBCVNull()
            Me(Me.tableMatImpL.GrupoBCVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMatImpL.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuplidorNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.SuplidorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuplidorNull()
            Me(Me.tableMatImpL.SuplidorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMatImpL.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMatImpL.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitarioNull()
            Me(Me.tableMatImpL.PrecioUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes1Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes1Null()
            Me(Me.tableMatImpL.PrecioMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes2Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes2Null()
            Me(Me.tableMatImpL.PrecioMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes3Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes3Null()
            Me(Me.tableMatImpL.PrecioMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes4Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes4Null()
            Me(Me.tableMatImpL.PrecioMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes5Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes5Null()
            Me(Me.tableMatImpL.PrecioMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes6Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes6Null()
            Me(Me.tableMatImpL.PrecioMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes7Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes7Null()
            Me(Me.tableMatImpL.PrecioMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes8Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes8Null()
            Me(Me.tableMatImpL.PrecioMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes9Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes9Null()
            Me(Me.tableMatImpL.PrecioMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes10Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes10Null()
            Me(Me.tableMatImpL.PrecioMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes11Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes11Null()
            Me(Me.tableMatImpL.PrecioMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12Null() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12Null()
            Me(Me.tableMatImpL.PrecioMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PorcentajeDiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeDiferenciaNull()
            Me(Me.tableMatImpL.PorcentajeDiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitario2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioUnitario2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitario2daMonedaNull()
            Me(Me.tableMatImpL.PrecioUnitario2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes22daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes32daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes42daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes52daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes62daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes72daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes82daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes92daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes102daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes112daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpL.PrecioMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes122daMonedaNull()
            Me(Me.tableMatImpL.PrecioMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MatImpLBsSRow
        Inherits Global.System.Data.DataRow
        
        Private tableMatImpLBsS As MatImpLBsSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMatImpLBsS = CType(Me.Table,MatImpLBsSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMatLULO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.CodMatLULOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodMatLULO' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.CodMatLULOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diferencia() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.DiferenciaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diferencia' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.DiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrupoBCV() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.GrupoBCVColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrupoBCV' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.GrupoBCVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Suplidor() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.SuplidorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suplidor' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.SuplidorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes1' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes2' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes3' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes4' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes5' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes6' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes7' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes8' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes9' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes10' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes11' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDiferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PorcentajeDiferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeDiferencia' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PorcentajeDiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes22daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes32daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes42daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes52daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes62daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes72daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes82daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes92daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes102daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes112daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes122daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatImpLBsS.PrecioUnitario2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario2daMoneda' in table 'MatImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatImpLBsS.PrecioUnitario2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMatImpLBsS.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMatImpLBsS.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMatLULONull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.CodMatLULOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMatLULONull()
            Me(Me.tableMatImpLBsS.CodMatLULOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.DiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaNull()
            Me(Me.tableMatImpLBsS.DiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMatImpLBsS.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrupoBCVNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.GrupoBCVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrupoBCVNull()
            Me(Me.tableMatImpLBsS.GrupoBCVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMatImpLBsS.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuplidorNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.SuplidorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuplidorNull()
            Me(Me.tableMatImpLBsS.SuplidorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMatImpLBsS.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMatImpLBsS.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes1Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes1Null()
            Me(Me.tableMatImpLBsS.PrecioMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes2Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes2Null()
            Me(Me.tableMatImpLBsS.PrecioMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes3Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes3Null()
            Me(Me.tableMatImpLBsS.PrecioMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes4Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes4Null()
            Me(Me.tableMatImpLBsS.PrecioMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes5Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes5Null()
            Me(Me.tableMatImpLBsS.PrecioMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes6Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes6Null()
            Me(Me.tableMatImpLBsS.PrecioMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes7Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes7Null()
            Me(Me.tableMatImpLBsS.PrecioMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes8Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes8Null()
            Me(Me.tableMatImpLBsS.PrecioMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes9Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes9Null()
            Me(Me.tableMatImpLBsS.PrecioMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes10Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes10Null()
            Me(Me.tableMatImpLBsS.PrecioMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes11Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes11Null()
            Me(Me.tableMatImpLBsS.PrecioMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12Null() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12Null()
            Me(Me.tableMatImpLBsS.PrecioMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitarioNull()
            Me(Me.tableMatImpLBsS.PrecioUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PorcentajeDiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeDiferenciaNull()
            Me(Me.tableMatImpLBsS.PorcentajeDiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes22daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes32daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes42daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes52daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes62daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes72daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes82daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes92daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes102daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes112daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes122daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitario2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMatImpLBsS.PrecioUnitario2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitario2daMonedaNull()
            Me(Me.tableMatImpLBsS.PrecioUnitario2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MOcompRow
        Inherits Global.System.Data.DataRow
        
        Private tableMOcomp As MOcompDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMOcomp = CType(Me.Table,MOcompDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoSimple() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.CodigoSimpleColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoSimple' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.CodigoSimpleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionSimple() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.DescripcionSimpleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescripcionSimple' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.DescripcionSimpleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.JornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.JornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.BonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.BonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalJornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.TotalJornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalJornal' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.TotalJornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.TotalBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalBono' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.TotalBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.Jornal2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal2daMoneda' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.Jornal2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.Bono2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono2daMoneda' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.Bono2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalJornal2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.TotalJornal2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalJornal2daMoneda' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.TotalJornal2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalBono2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOcomp.TotalBono2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalBono2daMoneda' in table 'MOcomp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOcomp.TotalBono2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMOcomp.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMOcomp.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMOcomp.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoSimpleNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.CodigoSimpleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoSimpleNull()
            Me(Me.tableMOcomp.CodigoSimpleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionSimpleNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.DescripcionSimpleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionSimpleNull()
            Me(Me.tableMOcomp.DescripcionSimpleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableMOcomp.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.JornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalNull()
            Me(Me.tableMOcomp.JornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.BonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoNull()
            Me(Me.tableMOcomp.BonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalJornalNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.TotalJornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalJornalNull()
            Me(Me.tableMOcomp.TotalJornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalBonoNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.TotalBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalBonoNull()
            Me(Me.tableMOcomp.TotalBonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornal2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.Jornal2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornal2daMonedaNull()
            Me(Me.tableMOcomp.Jornal2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBono2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.Bono2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBono2daMonedaNull()
            Me(Me.tableMOcomp.Bono2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalJornal2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.TotalJornal2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalJornal2daMonedaNull()
            Me(Me.tableMOcomp.TotalJornal2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalBono2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOcomp.TotalBono2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalBono2daMonedaNull()
            Me(Me.tableMOcomp.TotalBono2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MOImpLRow
        Inherits Global.System.Data.DataRow
        
        Private tableMOImpL As MOImpLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMOImpL = CType(Me.Table,MOImpLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMOLULO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.CodMOLULOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodMOLULO' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.CodMOLULOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes1' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes2' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes3' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes4' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes5' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes6' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes7' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes8' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes9' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes10' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes11' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes12' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.Jornal2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal2daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.Jornal2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes12daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes22daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes32daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes42daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes52daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes62daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes72daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes82daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes92daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes102daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes112daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.JornalMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes122daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.JornalMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeJornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.PorcentajeJornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeJornal' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.PorcentajeJornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaJornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.DiferenciaJornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaJornal' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.DiferenciaJornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes1' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes2' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes3' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes4' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes5' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes6' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes7' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes8' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes9' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes10' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes11' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes12' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.Bono2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono2daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.Bono2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes12daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes22daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes32daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes42daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes52daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes62daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes72daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes82daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes92daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes102daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes112daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.BonoMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes122daMoneda' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.BonoMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.PorcentajeBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeBono' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.PorcentajeBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpL.DiferenciaBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaBono' in table 'MOImpL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpL.DiferenciaBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMOImpL.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMOLULONull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.CodMOLULOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMOLULONull()
            Me(Me.tableMOImpL.CodMOLULOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMOImpL.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMOImpL.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMOImpL.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMOImpL.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMOImpL.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalNull()
            Me(Me.tableMOImpL.JornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes1Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes1Null()
            Me(Me.tableMOImpL.JornalMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes2Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes2Null()
            Me(Me.tableMOImpL.JornalMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes3Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes3Null()
            Me(Me.tableMOImpL.JornalMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes4Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes4Null()
            Me(Me.tableMOImpL.JornalMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes5Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes5Null()
            Me(Me.tableMOImpL.JornalMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes6Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes6Null()
            Me(Me.tableMOImpL.JornalMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes7Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes7Null()
            Me(Me.tableMOImpL.JornalMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes8Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes8Null()
            Me(Me.tableMOImpL.JornalMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes9Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes9Null()
            Me(Me.tableMOImpL.JornalMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes10Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes10Null()
            Me(Me.tableMOImpL.JornalMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes11Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes11Null()
            Me(Me.tableMOImpL.JornalMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes12Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes12Null()
            Me(Me.tableMOImpL.JornalMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornal2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.Jornal2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornal2daMonedaNull()
            Me(Me.tableMOImpL.Jornal2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes12daMonedaNull()
            Me(Me.tableMOImpL.JornalMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes22daMonedaNull()
            Me(Me.tableMOImpL.JornalMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes32daMonedaNull()
            Me(Me.tableMOImpL.JornalMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes42daMonedaNull()
            Me(Me.tableMOImpL.JornalMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes52daMonedaNull()
            Me(Me.tableMOImpL.JornalMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes62daMonedaNull()
            Me(Me.tableMOImpL.JornalMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes72daMonedaNull()
            Me(Me.tableMOImpL.JornalMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes82daMonedaNull()
            Me(Me.tableMOImpL.JornalMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes92daMonedaNull()
            Me(Me.tableMOImpL.JornalMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes102daMonedaNull()
            Me(Me.tableMOImpL.JornalMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes112daMonedaNull()
            Me(Me.tableMOImpL.JornalMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.JornalMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes122daMonedaNull()
            Me(Me.tableMOImpL.JornalMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeJornalNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.PorcentajeJornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeJornalNull()
            Me(Me.tableMOImpL.PorcentajeJornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaJornalNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.DiferenciaJornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaJornalNull()
            Me(Me.tableMOImpL.DiferenciaJornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoNull()
            Me(Me.tableMOImpL.BonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes1Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes1Null()
            Me(Me.tableMOImpL.BonoMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes2Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes2Null()
            Me(Me.tableMOImpL.BonoMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes3Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes3Null()
            Me(Me.tableMOImpL.BonoMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes4Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes4Null()
            Me(Me.tableMOImpL.BonoMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes5Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes5Null()
            Me(Me.tableMOImpL.BonoMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes6Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes6Null()
            Me(Me.tableMOImpL.BonoMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes7Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes7Null()
            Me(Me.tableMOImpL.BonoMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes8Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes8Null()
            Me(Me.tableMOImpL.BonoMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes9Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes9Null()
            Me(Me.tableMOImpL.BonoMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes10Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes10Null()
            Me(Me.tableMOImpL.BonoMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes11Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes11Null()
            Me(Me.tableMOImpL.BonoMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes12Null() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes12Null()
            Me(Me.tableMOImpL.BonoMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBono2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.Bono2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBono2daMonedaNull()
            Me(Me.tableMOImpL.Bono2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes12daMonedaNull()
            Me(Me.tableMOImpL.BonoMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes22daMonedaNull()
            Me(Me.tableMOImpL.BonoMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes32daMonedaNull()
            Me(Me.tableMOImpL.BonoMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes42daMonedaNull()
            Me(Me.tableMOImpL.BonoMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes52daMonedaNull()
            Me(Me.tableMOImpL.BonoMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes62daMonedaNull()
            Me(Me.tableMOImpL.BonoMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes72daMonedaNull()
            Me(Me.tableMOImpL.BonoMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes82daMonedaNull()
            Me(Me.tableMOImpL.BonoMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes92daMonedaNull()
            Me(Me.tableMOImpL.BonoMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes102daMonedaNull()
            Me(Me.tableMOImpL.BonoMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes112daMonedaNull()
            Me(Me.tableMOImpL.BonoMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.BonoMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes122daMonedaNull()
            Me(Me.tableMOImpL.BonoMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeBonoNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.PorcentajeBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeBonoNull()
            Me(Me.tableMOImpL.PorcentajeBonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaBonoNull() As Boolean
            Return Me.IsNull(Me.tableMOImpL.DiferenciaBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaBonoNull()
            Me(Me.tableMOImpL.DiferenciaBonoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MOImpLBsSRow
        Inherits Global.System.Data.DataRow
        
        Private tableMOImpLBsS As MOImpLBsSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMOImpLBsS = CType(Me.Table,MOImpLBsSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMOLULO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.CodMOLULOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodMOLULO' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.CodMOLULOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes1' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes2' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes3' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes4' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes5' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes6' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes7' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes8' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes9' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes10' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes11' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes12' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.Jornal2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal2daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.Jornal2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes12daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes22daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes32daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes42daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes52daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes62daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes72daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes82daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes92daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes102daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes112daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.JornalMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes122daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.JornalMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeJornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.PorcentajeJornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeJornal' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.PorcentajeJornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaJornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.DiferenciaJornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaJornal' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.DiferenciaJornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes1' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes2' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes3' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes4' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes5' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes6' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes7' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes8' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes9' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes10' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes11' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes12' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.Bono2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono2daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.Bono2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes12daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes22daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes32daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes42daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes52daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes62daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes72daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes82daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes92daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes102daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes112daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.BonoMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes122daMoneda' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.BonoMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.PorcentajeBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeBono' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.PorcentajeBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMOImpLBsS.DiferenciaBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaBono' in table 'MOImpLBsS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMOImpLBsS.DiferenciaBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMOImpLBsS.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMOLULONull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.CodMOLULOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMOLULONull()
            Me(Me.tableMOImpLBsS.CodMOLULOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMOImpLBsS.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMOImpLBsS.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMOImpLBsS.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMOImpLBsS.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMOImpLBsS.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalNull()
            Me(Me.tableMOImpLBsS.JornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes1Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes1Null()
            Me(Me.tableMOImpLBsS.JornalMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes2Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes2Null()
            Me(Me.tableMOImpLBsS.JornalMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes3Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes3Null()
            Me(Me.tableMOImpLBsS.JornalMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes4Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes4Null()
            Me(Me.tableMOImpLBsS.JornalMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes5Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes5Null()
            Me(Me.tableMOImpLBsS.JornalMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes6Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes6Null()
            Me(Me.tableMOImpLBsS.JornalMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes7Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes7Null()
            Me(Me.tableMOImpLBsS.JornalMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes8Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes8Null()
            Me(Me.tableMOImpLBsS.JornalMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes9Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes9Null()
            Me(Me.tableMOImpLBsS.JornalMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes10Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes10Null()
            Me(Me.tableMOImpLBsS.JornalMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes11Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes11Null()
            Me(Me.tableMOImpLBsS.JornalMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes12Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes12Null()
            Me(Me.tableMOImpLBsS.JornalMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornal2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.Jornal2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornal2daMonedaNull()
            Me(Me.tableMOImpLBsS.Jornal2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes12daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes22daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes32daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes42daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes52daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes62daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes72daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes82daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes92daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes102daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes112daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.JornalMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes122daMonedaNull()
            Me(Me.tableMOImpLBsS.JornalMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeJornalNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.PorcentajeJornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeJornalNull()
            Me(Me.tableMOImpLBsS.PorcentajeJornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaJornalNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.DiferenciaJornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaJornalNull()
            Me(Me.tableMOImpLBsS.DiferenciaJornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoNull()
            Me(Me.tableMOImpLBsS.BonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes1Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes1Null()
            Me(Me.tableMOImpLBsS.BonoMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes2Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes2Null()
            Me(Me.tableMOImpLBsS.BonoMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes3Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes3Null()
            Me(Me.tableMOImpLBsS.BonoMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes4Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes4Null()
            Me(Me.tableMOImpLBsS.BonoMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes5Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes5Null()
            Me(Me.tableMOImpLBsS.BonoMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes6Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes6Null()
            Me(Me.tableMOImpLBsS.BonoMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes7Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes7Null()
            Me(Me.tableMOImpLBsS.BonoMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes8Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes8Null()
            Me(Me.tableMOImpLBsS.BonoMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes9Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes9Null()
            Me(Me.tableMOImpLBsS.BonoMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes10Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes10Null()
            Me(Me.tableMOImpLBsS.BonoMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes11Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes11Null()
            Me(Me.tableMOImpLBsS.BonoMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes12Null() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes12Null()
            Me(Me.tableMOImpLBsS.BonoMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBono2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.Bono2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBono2daMonedaNull()
            Me(Me.tableMOImpLBsS.Bono2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes12daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes22daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes32daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes42daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes52daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes62daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes72daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes82daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes92daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes102daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes112daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.BonoMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes122daMonedaNull()
            Me(Me.tableMOImpLBsS.BonoMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeBonoNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.PorcentajeBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeBonoNull()
            Me(Me.tableMOImpLBsS.PorcentajeBonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaBonoNull() As Boolean
            Return Me.IsNull(Me.tableMOImpLBsS.DiferenciaBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaBonoNull()
            Me(Me.tableMOImpLBsS.DiferenciaBonoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class obrasRow
        Inherits Global.System.Data.DataRow
        
        Private tableobras As obrasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableobras = CType(Me.Table,obrasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_obr() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras._cod_obrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-obr' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras._cod_obrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _desc_obr() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras._desc_obrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'desc-obr' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras._desc_obrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Obra() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.ObraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Obra' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.ObraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCAS() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.FCASColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FCAS' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FCASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Administracion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.AdministracionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Administracion' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.AdministracionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Utilidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.UtilidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Utilidad' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.UtilidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rendimiento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.RendimientoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rendimiento' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.RendimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dig_Rend() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.Dig_RendColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dig_Rend' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Dig_RendColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.IVAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IVA' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.IVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cant_Part() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.Cant_PartColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cant_Part' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Cant_PartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cant_Analisis() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.Cant_AnalisisColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cant_Analisis' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Cant_AnalisisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Div_Mat() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.Div_MatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Div_Mat' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Div_MatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Base_MAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.Base_MATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Base_MAT' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Base_MATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Base_EQP() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.Base_EQPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Base_EQP' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Base_EQPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Base_MO() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.Base_MOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Base_MO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Base_MOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Base_Partidas() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.Base_PartidasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Base_Partidas' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Base_PartidasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaB_MAT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FechaB_MATColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaB_MAT' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FechaB_MATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaB_EQP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FechaB_EQPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaB_EQP' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FechaB_EQPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaB_MO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FechaB_MOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaB_MO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FechaB_MOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaB_PART() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FechaB_PARTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaB_PART' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FechaB_PARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda_P() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.Moneda_PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moneda_P' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Moneda_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda_S() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.Moneda_SColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moneda_S' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Moneda_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Propietario() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.PropietarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Propietario' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.PropietarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IngFirma() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.IngFirmaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IngFirma' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.IngFirmaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIV_Firma() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.CIV_FirmaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CIV_Firma' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.CIV_FirmaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IngRevisa() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.IngRevisaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IngRevisa' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.IngRevisaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIV_Revisa() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.CIV_RevisaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CIV_Revisa' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.CIV_RevisaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_obrNull() As Boolean
            Return Me.IsNull(Me.tableobras._cod_obrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_obrNull()
            Me(Me.tableobras._cod_obrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_desc_obrNull() As Boolean
            Return Me.IsNull(Me.tableobras._desc_obrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_desc_obrNull()
            Me(Me.tableobras._desc_obrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraNull() As Boolean
            Return Me.IsNull(Me.tableobras.ObraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraNull()
            Me(Me.tableobras.ObraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCASNull() As Boolean
            Return Me.IsNull(Me.tableobras.FCASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCASNull()
            Me(Me.tableobras.FCASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdministracionNull() As Boolean
            Return Me.IsNull(Me.tableobras.AdministracionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdministracionNull()
            Me(Me.tableobras.AdministracionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUtilidadNull() As Boolean
            Return Me.IsNull(Me.tableobras.UtilidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUtilidadNull()
            Me(Me.tableobras.UtilidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRendimientoNull() As Boolean
            Return Me.IsNull(Me.tableobras.RendimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRendimientoNull()
            Me(Me.tableobras.RendimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDig_RendNull() As Boolean
            Return Me.IsNull(Me.tableobras.Dig_RendColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDig_RendNull()
            Me(Me.tableobras.Dig_RendColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVANull() As Boolean
            Return Me.IsNull(Me.tableobras.IVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVANull()
            Me(Me.tableobras.IVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCant_PartNull() As Boolean
            Return Me.IsNull(Me.tableobras.Cant_PartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCant_PartNull()
            Me(Me.tableobras.Cant_PartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCant_AnalisisNull() As Boolean
            Return Me.IsNull(Me.tableobras.Cant_AnalisisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCant_AnalisisNull()
            Me(Me.tableobras.Cant_AnalisisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiv_MatNull() As Boolean
            Return Me.IsNull(Me.tableobras.Div_MatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiv_MatNull()
            Me(Me.tableobras.Div_MatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBase_MATNull() As Boolean
            Return Me.IsNull(Me.tableobras.Base_MATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBase_MATNull()
            Me(Me.tableobras.Base_MATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBase_EQPNull() As Boolean
            Return Me.IsNull(Me.tableobras.Base_EQPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBase_EQPNull()
            Me(Me.tableobras.Base_EQPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBase_MONull() As Boolean
            Return Me.IsNull(Me.tableobras.Base_MOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBase_MONull()
            Me(Me.tableobras.Base_MOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBase_PartidasNull() As Boolean
            Return Me.IsNull(Me.tableobras.Base_PartidasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBase_PartidasNull()
            Me(Me.tableobras.Base_PartidasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaB_MATNull() As Boolean
            Return Me.IsNull(Me.tableobras.FechaB_MATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaB_MATNull()
            Me(Me.tableobras.FechaB_MATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaB_EQPNull() As Boolean
            Return Me.IsNull(Me.tableobras.FechaB_EQPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaB_EQPNull()
            Me(Me.tableobras.FechaB_EQPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaB_MONull() As Boolean
            Return Me.IsNull(Me.tableobras.FechaB_MOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaB_MONull()
            Me(Me.tableobras.FechaB_MOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaB_PARTNull() As Boolean
            Return Me.IsNull(Me.tableobras.FechaB_PARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaB_PARTNull()
            Me(Me.tableobras.FechaB_PARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoneda_PNull() As Boolean
            Return Me.IsNull(Me.tableobras.Moneda_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoneda_PNull()
            Me(Me.tableobras.Moneda_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoneda_SNull() As Boolean
            Return Me.IsNull(Me.tableobras.Moneda_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoneda_SNull()
            Me(Me.tableobras.Moneda_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPropietarioNull() As Boolean
            Return Me.IsNull(Me.tableobras.PropietarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPropietarioNull()
            Me(Me.tableobras.PropietarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngFirmaNull() As Boolean
            Return Me.IsNull(Me.tableobras.IngFirmaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngFirmaNull()
            Me(Me.tableobras.IngFirmaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIV_FirmaNull() As Boolean
            Return Me.IsNull(Me.tableobras.CIV_FirmaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIV_FirmaNull()
            Me(Me.tableobras.CIV_FirmaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngRevisaNull() As Boolean
            Return Me.IsNull(Me.tableobras.IngRevisaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngRevisaNull()
            Me(Me.tableobras.IngRevisaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIV_RevisaNull() As Boolean
            Return Me.IsNull(Me.tableobras.CIV_RevisaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIV_RevisaNull()
            Me(Me.tableobras.CIV_RevisaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PartEqCRow
        Inherits Global.System.Data.DataRow
        
        Private tablePartEqC As PartEqCDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePartEqC = CType(Me.Table,PartEqCDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodInterno() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartEqC.CodInternoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodInterno' in table 'PartEqC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartEqC.CodInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lista() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartEqC.ListaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Lista' in table 'PartEqC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartEqC.ListaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartEqC.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'PartEqC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartEqC.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartEqC.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'PartEqC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartEqC.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartEqC.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'PartEqC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartEqC.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartEqC.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'PartEqC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartEqC.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartEqC.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'PartEqC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartEqC.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartEqC.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Precio' in table 'PartEqC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartEqC.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depreciacion() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartEqC.DepreciacionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depreciacion' in table 'PartEqC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartEqC.DepreciacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodInternoNull() As Boolean
            Return Me.IsNull(Me.tablePartEqC.CodInternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodInternoNull()
            Me(Me.tablePartEqC.CodInternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListaNull() As Boolean
            Return Me.IsNull(Me.tablePartEqC.ListaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListaNull()
            Me(Me.tablePartEqC.ListaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tablePartEqC.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tablePartEqC.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tablePartEqC.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tablePartEqC.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tablePartEqC.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tablePartEqC.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tablePartEqC.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tablePartEqC.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablePartEqC.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablePartEqC.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tablePartEqC.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tablePartEqC.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepreciacionNull() As Boolean
            Return Me.IsNull(Me.tablePartEqC.DepreciacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepreciacionNull()
            Me(Me.tablePartEqC.DepreciacionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EqpCompuestoRow
        Inherits Global.System.Data.DataRow
        
        Private tableEqpCompuesto As EqpCompuestoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEqpCompuesto = CType(Me.Table,EqpCompuestoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodInterno() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpCompuesto.CodInternoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodInterno' in table 'EqpCompuesto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpCompuesto.CodInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lista() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpCompuesto.ListaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Lista' in table 'EqpCompuesto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpCompuesto.ListaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpCompuesto.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'EqpCompuesto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpCompuesto.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpCompuesto.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'EqpCompuesto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpCompuesto.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EquipoComp_Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpCompuesto.EquipoComp_DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EquipoComp_Descripcion' in table 'EqpCompuesto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpCompuesto.EquipoComp_DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpCompuesto.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'EqpCompuesto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpCompuesto.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpCompuesto.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'EqpCompuesto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpCompuesto.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpCompuesto.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Precio' in table 'EqpCompuesto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpCompuesto.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depreciacion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEqpCompuesto.DepreciacionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depreciacion' in table 'EqpCompuesto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpCompuesto.DepreciacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MasterEqp_Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableEqpCompuesto.MasterEqp_DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MasterEqp_Descripcion' in table 'EqpCompuesto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEqpCompuesto.MasterEqp_DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodInternoNull() As Boolean
            Return Me.IsNull(Me.tableEqpCompuesto.CodInternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodInternoNull()
            Me(Me.tableEqpCompuesto.CodInternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListaNull() As Boolean
            Return Me.IsNull(Me.tableEqpCompuesto.ListaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListaNull()
            Me(Me.tableEqpCompuesto.ListaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableEqpCompuesto.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableEqpCompuesto.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableEqpCompuesto.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableEqpCompuesto.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEquipoComp_DescripcionNull() As Boolean
            Return Me.IsNull(Me.tableEqpCompuesto.EquipoComp_DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEquipoComp_DescripcionNull()
            Me(Me.tableEqpCompuesto.EquipoComp_DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableEqpCompuesto.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableEqpCompuesto.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableEqpCompuesto.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableEqpCompuesto.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tableEqpCompuesto.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tableEqpCompuesto.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepreciacionNull() As Boolean
            Return Me.IsNull(Me.tableEqpCompuesto.DepreciacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepreciacionNull()
            Me(Me.tableEqpCompuesto.DepreciacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMasterEqp_DescripcionNull() As Boolean
            Return Me.IsNull(Me.tableEqpCompuesto.MasterEqp_DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMasterEqp_DescripcionNull()
            Me(Me.tableEqpCompuesto.MasterEqp_DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MMaterialRow
        Inherits Global.System.Data.DataRow
        
        Private tableMMaterial As MMaterialDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMMaterial = CType(Me.Table,MMaterialDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diferencia() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.DiferenciaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diferencia' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.DiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrupoBCV() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.GrupoBCVColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrupoBCV' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.GrupoBCVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Suplidor() As String
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.SuplidorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suplidor' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.SuplidorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes1' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes2' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes3' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes4' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes5' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes6' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes7' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes8' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes9' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes10' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes11' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDiferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PorcentajeDiferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeDiferencia' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PorcentajeDiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes22daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes32daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes42daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes52daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes62daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes72daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes82daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes92daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes102daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes112daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes122daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMMaterial.PrecioUnitario2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario2daMoneda' in table 'MMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMMaterial.PrecioUnitario2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMMaterial.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMMaterial.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.DiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaNull()
            Me(Me.tableMMaterial.DiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMMaterial.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrupoBCVNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.GrupoBCVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrupoBCVNull()
            Me(Me.tableMMaterial.GrupoBCVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMMaterial.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuplidorNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.SuplidorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuplidorNull()
            Me(Me.tableMMaterial.SuplidorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMMaterial.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMMaterial.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes1Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes1Null()
            Me(Me.tableMMaterial.PrecioMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes2Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes2Null()
            Me(Me.tableMMaterial.PrecioMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes3Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes3Null()
            Me(Me.tableMMaterial.PrecioMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes4Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes4Null()
            Me(Me.tableMMaterial.PrecioMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes5Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes5Null()
            Me(Me.tableMMaterial.PrecioMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes6Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes6Null()
            Me(Me.tableMMaterial.PrecioMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes7Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes7Null()
            Me(Me.tableMMaterial.PrecioMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes8Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes8Null()
            Me(Me.tableMMaterial.PrecioMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes9Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes9Null()
            Me(Me.tableMMaterial.PrecioMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes10Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes10Null()
            Me(Me.tableMMaterial.PrecioMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes11Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes11Null()
            Me(Me.tableMMaterial.PrecioMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12Null() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12Null()
            Me(Me.tableMMaterial.PrecioMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitarioNull()
            Me(Me.tableMMaterial.PrecioUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PorcentajeDiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeDiferenciaNull()
            Me(Me.tableMMaterial.PorcentajeDiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes22daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes32daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes42daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes52daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes62daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes72daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes82daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes92daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes102daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes112daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes122daMonedaNull()
            Me(Me.tableMMaterial.PrecioMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitario2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMMaterial.PrecioUnitario2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitario2daMonedaNull()
            Me(Me.tableMMaterial.PrecioUnitario2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MObraRow
        Inherits Global.System.Data.DataRow
        
        Private tableMObra As MObraDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMObra = CType(Me.Table,MObraDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMObra.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMObra.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMObra.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes1' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes2' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes3' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes4' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes5' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes6' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes7' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes8' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes9' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes10' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes11' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes12' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes1' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes2' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes3' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes4' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes5' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes6' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes7' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes8' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes9' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes10' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes11' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes12' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.Jornal2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal2daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.Jornal2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.Bono2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono2daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.Bono2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes12daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes22daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes32daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes42daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes52daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes62daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes72daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes82daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes92daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes102daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes112daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.JornalMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalMes122daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.JornalMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes12daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes22daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes32daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes42daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes52daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes62daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes72daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes82daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes92daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes102daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes112daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BonoMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.BonoMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonoMes122daMoneda' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.BonoMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaJornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.DiferenciaJornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaJornal' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.DiferenciaJornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiferenciaBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.DiferenciaBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiferenciaBono' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.DiferenciaBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeJornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.PorcentajeJornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeJornal' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.PorcentajeJornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObra.PorcentajeBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeBono' in table 'MObra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObra.PorcentajeBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMObra.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMObra.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMObra.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMObra.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMObra.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMObra.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMObra.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMObra.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMObra.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalNull()
            Me(Me.tableMObra.JornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoNull()
            Me(Me.tableMObra.BonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMObra.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMObra.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes1Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes1Null()
            Me(Me.tableMObra.JornalMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes2Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes2Null()
            Me(Me.tableMObra.JornalMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes3Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes3Null()
            Me(Me.tableMObra.JornalMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes4Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes4Null()
            Me(Me.tableMObra.JornalMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes5Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes5Null()
            Me(Me.tableMObra.JornalMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes6Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes6Null()
            Me(Me.tableMObra.JornalMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes7Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes7Null()
            Me(Me.tableMObra.JornalMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes8Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes8Null()
            Me(Me.tableMObra.JornalMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes9Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes9Null()
            Me(Me.tableMObra.JornalMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes10Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes10Null()
            Me(Me.tableMObra.JornalMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes11Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes11Null()
            Me(Me.tableMObra.JornalMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes12Null() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes12Null()
            Me(Me.tableMObra.JornalMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes1Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes1Null()
            Me(Me.tableMObra.BonoMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes2Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes2Null()
            Me(Me.tableMObra.BonoMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes3Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes3Null()
            Me(Me.tableMObra.BonoMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes4Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes4Null()
            Me(Me.tableMObra.BonoMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes5Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes5Null()
            Me(Me.tableMObra.BonoMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes6Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes6Null()
            Me(Me.tableMObra.BonoMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes7Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes7Null()
            Me(Me.tableMObra.BonoMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes8Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes8Null()
            Me(Me.tableMObra.BonoMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes9Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes9Null()
            Me(Me.tableMObra.BonoMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes10Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes10Null()
            Me(Me.tableMObra.BonoMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes11Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes11Null()
            Me(Me.tableMObra.BonoMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes12Null() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes12Null()
            Me(Me.tableMObra.BonoMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornal2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.Jornal2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornal2daMonedaNull()
            Me(Me.tableMObra.Jornal2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBono2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.Bono2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBono2daMonedaNull()
            Me(Me.tableMObra.Bono2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes12daMonedaNull()
            Me(Me.tableMObra.JornalMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes22daMonedaNull()
            Me(Me.tableMObra.JornalMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes32daMonedaNull()
            Me(Me.tableMObra.JornalMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes42daMonedaNull()
            Me(Me.tableMObra.JornalMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes52daMonedaNull()
            Me(Me.tableMObra.JornalMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes62daMonedaNull()
            Me(Me.tableMObra.JornalMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes72daMonedaNull()
            Me(Me.tableMObra.JornalMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes82daMonedaNull()
            Me(Me.tableMObra.JornalMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes92daMonedaNull()
            Me(Me.tableMObra.JornalMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes102daMonedaNull()
            Me(Me.tableMObra.JornalMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes112daMonedaNull()
            Me(Me.tableMObra.JornalMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.JornalMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalMes122daMonedaNull()
            Me(Me.tableMObra.JornalMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes12daMonedaNull()
            Me(Me.tableMObra.BonoMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes22daMonedaNull()
            Me(Me.tableMObra.BonoMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes32daMonedaNull()
            Me(Me.tableMObra.BonoMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes42daMonedaNull()
            Me(Me.tableMObra.BonoMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes52daMonedaNull()
            Me(Me.tableMObra.BonoMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes62daMonedaNull()
            Me(Me.tableMObra.BonoMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes72daMonedaNull()
            Me(Me.tableMObra.BonoMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes82daMonedaNull()
            Me(Me.tableMObra.BonoMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes92daMonedaNull()
            Me(Me.tableMObra.BonoMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes102daMonedaNull()
            Me(Me.tableMObra.BonoMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes112daMonedaNull()
            Me(Me.tableMObra.BonoMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObra.BonoMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoMes122daMonedaNull()
            Me(Me.tableMObra.BonoMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaJornalNull() As Boolean
            Return Me.IsNull(Me.tableMObra.DiferenciaJornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaJornalNull()
            Me(Me.tableMObra.DiferenciaJornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaBonoNull() As Boolean
            Return Me.IsNull(Me.tableMObra.DiferenciaBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaBonoNull()
            Me(Me.tableMObra.DiferenciaBonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeJornalNull() As Boolean
            Return Me.IsNull(Me.tableMObra.PorcentajeJornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeJornalNull()
            Me(Me.tableMObra.PorcentajeJornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeBonoNull() As Boolean
            Return Me.IsNull(Me.tableMObra.PorcentajeBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeBonoNull()
            Me(Me.tableMObra.PorcentajeBonoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MObraCRow
        Inherits Global.System.Data.DataRow
        
        Private tableMObraC As MObraCDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMObraC = CType(Me.Table,MObraCDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoSimple() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.CodigoSimpleColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoSimple' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.CodigoSimpleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionSimple() As String
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.DescripcionSimpleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescripcionSimple' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.DescripcionSimpleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.JornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.JornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.BonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.BonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalJornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.TotalJornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalJornal' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.TotalJornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.TotalBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalBono' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.TotalBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.Jornal2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal2daMoneda' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.Jornal2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.Bono2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono2daMoneda' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.Bono2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalJornal2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.TotalJornal2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalJornal2daMoneda' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.TotalJornal2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalBono2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.TotalBono2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalBono2daMoneda' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.TotalBono2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMObraC.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MObraC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMObraC.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMObraC.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMObraC.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMObraC.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoSimpleNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.CodigoSimpleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoSimpleNull()
            Me(Me.tableMObraC.CodigoSimpleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionSimpleNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.DescripcionSimpleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionSimpleNull()
            Me(Me.tableMObraC.DescripcionSimpleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableMObraC.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.JornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalNull()
            Me(Me.tableMObraC.JornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.BonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoNull()
            Me(Me.tableMObraC.BonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalJornalNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.TotalJornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalJornalNull()
            Me(Me.tableMObraC.TotalJornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalBonoNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.TotalBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalBonoNull()
            Me(Me.tableMObraC.TotalBonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornal2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.Jornal2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornal2daMonedaNull()
            Me(Me.tableMObraC.Jornal2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBono2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.Bono2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBono2daMonedaNull()
            Me(Me.tableMObraC.Bono2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalJornal2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.TotalJornal2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalJornal2daMonedaNull()
            Me(Me.tableMObraC.TotalJornal2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalBono2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.TotalBono2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalBono2daMonedaNull()
            Me(Me.tableMObraC.TotalBono2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMObraC.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMObraC.FechaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ValuacionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableValuaciones As ValuacionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableValuaciones = CType(Me.Table,ValuacionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodObr() As String
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.CodObrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodObr' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.CodObrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As String
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.PeriodoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Periodo' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.NumeroPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroPartida' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.NumeroPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.IdColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Id' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCovenin() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.CodigoCoveninColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCovenin' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.CodigoCoveninColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartidaTexto() As String
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.PartidaTextoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartidaTexto' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.PartidaTextoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion1() As String
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.Descripcion1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion1' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.Descripcion1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion2() As String
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.Descripcion2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion2' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.Descripcion2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion3() As String
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.Descripcion3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion3' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.Descripcion3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiniDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.MiniDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiniDescripcion' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.MiniDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadDePartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.CantidadDePartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadDePartida' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.CantidadDePartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.PrecioUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioTotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.PrecioTotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioTotal' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.PrecioTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalGeneral() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.TotalGeneralColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalGeneral' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.TotalGeneralColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadPeriodo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.CantidadPeriodoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadPeriodo' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.CantidadPeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPeriodo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.TotalPeriodoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalPeriodo' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.TotalPeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadAcumulada() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.CantidadAcumuladaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadAcumulada' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.CantidadAcumuladaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalAcumulado() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.TotalAcumuladoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalAcumulado' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.TotalAcumuladoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadAnterior() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.CantidadAnteriorColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadAnterior' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.CantidadAnteriorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalAnterior() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.TotalAnteriorColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalAnterior' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.TotalAnteriorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadAumentoAcumulado() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.CantidadAumentoAcumuladoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadAumentoAcumulado' in table 'Valuaciones' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.CantidadAumentoAcumuladoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalAumentoAcumulado() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.TotalAumentoAcumuladoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalAumentoAcumulado' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.TotalAumentoAcumuladoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AumentoEnPeriodo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableValuaciones.AumentoEnPeriodoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AumentoEnPeriodo' in table 'Valuaciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValuaciones.AumentoEnPeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodObrNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.CodObrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodObrNull()
            Me(Me.tableValuaciones.CodObrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tableValuaciones.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroPartidaNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.NumeroPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroPartidaNull()
            Me(Me.tableValuaciones.NumeroPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdNull()
            Me(Me.tableValuaciones.IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoCoveninNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.CodigoCoveninColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoCoveninNull()
            Me(Me.tableValuaciones.CodigoCoveninColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartidaTextoNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.PartidaTextoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartidaTextoNull()
            Me(Me.tableValuaciones.PartidaTextoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion1Null() As Boolean
            Return Me.IsNull(Me.tableValuaciones.Descripcion1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion1Null()
            Me(Me.tableValuaciones.Descripcion1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion2Null() As Boolean
            Return Me.IsNull(Me.tableValuaciones.Descripcion2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion2Null()
            Me(Me.tableValuaciones.Descripcion2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion3Null() As Boolean
            Return Me.IsNull(Me.tableValuaciones.Descripcion3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion3Null()
            Me(Me.tableValuaciones.Descripcion3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiniDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.MiniDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiniDescripcionNull()
            Me(Me.tableValuaciones.MiniDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadDePartidaNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.CantidadDePartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadDePartidaNull()
            Me(Me.tableValuaciones.CantidadDePartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableValuaciones.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.PrecioUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitarioNull()
            Me(Me.tableValuaciones.PrecioUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioTotalNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.PrecioTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioTotalNull()
            Me(Me.tableValuaciones.PrecioTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalGeneralNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.TotalGeneralColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalGeneralNull()
            Me(Me.tableValuaciones.TotalGeneralColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadPeriodoNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.CantidadPeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadPeriodoNull()
            Me(Me.tableValuaciones.CantidadPeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPeriodoNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.TotalPeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPeriodoNull()
            Me(Me.tableValuaciones.TotalPeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadAcumuladaNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.CantidadAcumuladaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadAcumuladaNull()
            Me(Me.tableValuaciones.CantidadAcumuladaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalAcumuladoNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.TotalAcumuladoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalAcumuladoNull()
            Me(Me.tableValuaciones.TotalAcumuladoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadAnteriorNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.CantidadAnteriorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadAnteriorNull()
            Me(Me.tableValuaciones.CantidadAnteriorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalAnteriorNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.TotalAnteriorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalAnteriorNull()
            Me(Me.tableValuaciones.TotalAnteriorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadAumentoAcumuladoNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.CantidadAumentoAcumuladoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadAumentoAcumuladoNull()
            Me(Me.tableValuaciones.CantidadAumentoAcumuladoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalAumentoAcumuladoNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.TotalAumentoAcumuladoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalAumentoAcumuladoNull()
            Me(Me.tableValuaciones.TotalAumentoAcumuladoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAumentoEnPeriodoNull() As Boolean
            Return Me.IsNull(Me.tableValuaciones.AumentoEnPeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAumentoEnPeriodoNull()
            Me(Me.tableValuaciones.AumentoEnPeriodoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ComputoEQRow
        Inherits Global.System.Data.DataRow
        
        Private tableComputoEQ As ComputoEQDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableComputoEQ = CType(Me.Table,ComputoEQDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodObr() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.CodObrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodObr' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.CodObrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.NumeroPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroPartida' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.NumeroPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadDePartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.CantidadDePartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadDePartida' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.CantidadDePartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Costo' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depreciacion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.DepreciacionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Depreciacion' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.DepreciacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CanTotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.CanTotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CanTotal' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.CanTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BsTotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.BsTotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BsTotal' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.BsTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CanUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.CanUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CanUnitario' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.CanUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BsUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.BsUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BsUnitario' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.BsUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porcentaje() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.PorcentajeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Porcentaje' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.PorcentajeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecType() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.RecTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecType' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.RecTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dias() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoEQ.DiasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dias' in table 'ComputoEQ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoEQ.DiasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodObrNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.CodObrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodObrNull()
            Me(Me.tableComputoEQ.CodObrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroPartidaNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.NumeroPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroPartidaNull()
            Me(Me.tableComputoEQ.NumeroPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadDePartidaNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.CantidadDePartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadDePartidaNull()
            Me(Me.tableComputoEQ.CantidadDePartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableComputoEQ.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableComputoEQ.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableComputoEQ.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableComputoEQ.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tableComputoEQ.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepreciacionNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.DepreciacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepreciacionNull()
            Me(Me.tableComputoEQ.DepreciacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCanTotalNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.CanTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCanTotalNull()
            Me(Me.tableComputoEQ.CanTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBsTotalNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.BsTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBsTotalNull()
            Me(Me.tableComputoEQ.BsTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCanUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.CanUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCanUnitarioNull()
            Me(Me.tableComputoEQ.CanUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBsUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.BsUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBsUnitarioNull()
            Me(Me.tableComputoEQ.BsUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.PorcentajeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeNull()
            Me(Me.tableComputoEQ.PorcentajeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecTypeNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.RecTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecTypeNull()
            Me(Me.tableComputoEQ.RecTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasNull() As Boolean
            Return Me.IsNull(Me.tableComputoEQ.DiasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasNull()
            Me(Me.tableComputoEQ.DiasColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ComputoMORow
        Inherits Global.System.Data.DataRow
        
        Private tableComputoMO As ComputoMODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableComputoMO = CType(Me.Table,ComputoMODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodObr() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.CodObrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodObr' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.CodObrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.NumeroPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroPartida' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.NumeroPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadDePartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.CantidadDePartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadDePartida' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.CantidadDePartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadPersonas() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.CantidadPersonasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadPersonas' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.CantidadPersonasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantTotPersonas() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.CantTotPersonasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantTotPersonas' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.CantTotPersonasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HorasHombre() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.HorasHombreColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HorasHombre' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.HorasHombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.JornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jornal' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.JornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.BonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bono' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.BonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JornalBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.JornalBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JornalBono' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.JornalBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalJornal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.TotalJornalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalJornal' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.TotalJornalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalBono() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.TotalBonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalBono' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.TotalBonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalSalario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.TotalSalarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalSalario' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.TotalSalarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalarioUnidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.SalarioUnidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SalarioUnidad' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.SalarioUnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PresSoc() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.PresSocColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PresSoc' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.PresSocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecType() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoMO.RecTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecType' in table 'ComputoMO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMO.RecTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodObrNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.CodObrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodObrNull()
            Me(Me.tableComputoMO.CodObrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroPartidaNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.NumeroPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroPartidaNull()
            Me(Me.tableComputoMO.NumeroPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadDePartidaNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.CantidadDePartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadDePartidaNull()
            Me(Me.tableComputoMO.CantidadDePartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableComputoMO.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableComputoMO.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadPersonasNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.CantidadPersonasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadPersonasNull()
            Me(Me.tableComputoMO.CantidadPersonasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantTotPersonasNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.CantTotPersonasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantTotPersonasNull()
            Me(Me.tableComputoMO.CantTotPersonasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHorasHombreNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.HorasHombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHorasHombreNull()
            Me(Me.tableComputoMO.HorasHombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.JornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalNull()
            Me(Me.tableComputoMO.JornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBonoNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.BonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBonoNull()
            Me(Me.tableComputoMO.BonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJornalBonoNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.JornalBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJornalBonoNull()
            Me(Me.tableComputoMO.JornalBonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalJornalNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.TotalJornalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalJornalNull()
            Me(Me.tableComputoMO.TotalJornalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalBonoNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.TotalBonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalBonoNull()
            Me(Me.tableComputoMO.TotalBonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalSalarioNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.TotalSalarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalSalarioNull()
            Me(Me.tableComputoMO.TotalSalarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalarioUnidadNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.SalarioUnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalarioUnidadNull()
            Me(Me.tableComputoMO.SalarioUnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPresSocNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.PresSocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPresSocNull()
            Me(Me.tableComputoMO.PresSocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecTypeNull() As Boolean
            Return Me.IsNull(Me.tableComputoMO.RecTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecTypeNull()
            Me(Me.tableComputoMO.RecTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ComputoMTRow
        Inherits Global.System.Data.DataRow
        
        Private tableComputoMT As ComputoMTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableComputoMT = CType(Me.Table,ComputoMTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodObr() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.CodObrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodObr' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.CodObrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.NumeroPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroPartida' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.NumeroPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadDePartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.CantidadDePartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadDePartida' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.CantidadDePartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Costo' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CanTotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.CanTotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CanTotal' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.CanTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BsTotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.BsTotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BsTotal' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.BsTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CanUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.CanUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CanUnitario' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.CanUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BsUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.BsUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BsUnitario' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.BsUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porcentaje() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.PorcentajeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Porcentaje' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.PorcentajeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecType() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoMT.RecTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecType' in table 'ComputoMT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoMT.RecTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodObrNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.CodObrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodObrNull()
            Me(Me.tableComputoMT.CodObrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroPartidaNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.NumeroPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroPartidaNull()
            Me(Me.tableComputoMT.NumeroPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadDePartidaNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.CantidadDePartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadDePartidaNull()
            Me(Me.tableComputoMT.CantidadDePartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableComputoMT.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableComputoMT.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableComputoMT.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tableComputoMT.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableComputoMT.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCanTotalNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.CanTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCanTotalNull()
            Me(Me.tableComputoMT.CanTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBsTotalNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.BsTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBsTotalNull()
            Me(Me.tableComputoMT.BsTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCanUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.CanUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCanUnitarioNull()
            Me(Me.tableComputoMT.CanUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBsUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.BsUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBsUnitarioNull()
            Me(Me.tableComputoMT.BsUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.PorcentajeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeNull()
            Me(Me.tableComputoMT.PorcentajeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecTypeNull() As Boolean
            Return Me.IsNull(Me.tableComputoMT.RecTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecTypeNull()
            Me(Me.tableComputoMT.RecTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ComputoTRRow
        Inherits Global.System.Data.DataRow
        
        Private tableComputoTR As ComputoTRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableComputoTR = CType(Me.Table,ComputoTRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodObr() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.CodObrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodObr' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.CodObrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.NumeroPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroPartida' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.NumeroPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadDePartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.CantidadDePartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadDePartida' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.CantidadDePartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Costo' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CanTotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.CanTotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CanTotal' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.CanTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BsTotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.BsTotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BsTotal' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.BsTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CanUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.CanUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CanUnitario' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.CanUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BsUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.BsUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BsUnitario' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.BsUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porcentaje() As Double
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.PorcentajeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Porcentaje' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.PorcentajeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecType() As String
            Get
                Try 
                    Return CType(Me(Me.tableComputoTR.RecTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecType' in table 'ComputoTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableComputoTR.RecTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodObrNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.CodObrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodObrNull()
            Me(Me.tableComputoTR.CodObrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroPartidaNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.NumeroPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroPartidaNull()
            Me(Me.tableComputoTR.NumeroPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadDePartidaNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.CantidadDePartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadDePartidaNull()
            Me(Me.tableComputoTR.CantidadDePartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableComputoTR.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableComputoTR.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableComputoTR.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tableComputoTR.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableComputoTR.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCanTotalNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.CanTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCanTotalNull()
            Me(Me.tableComputoTR.CanTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBsTotalNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.BsTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBsTotalNull()
            Me(Me.tableComputoTR.BsTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCanUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.CanUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCanUnitarioNull()
            Me(Me.tableComputoTR.CanUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBsUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.BsUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBsUnitarioNull()
            Me(Me.tableComputoTR.BsUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.PorcentajeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeNull()
            Me(Me.tableComputoTR.PorcentajeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecTypeNull() As Boolean
            Return Me.IsNull(Me.tableComputoTR.RecTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecTypeNull()
            Me(Me.tableComputoTR.RecTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IndPACRow
        Inherits Global.System.Data.DataRow
        
        Private tableIndPAC As IndPACDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIndPAC = CType(Me.Table,IndPACDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GRUPO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.GRUPOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRUPO' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGRUPACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.AGRUPACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AGRUPACION' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.AGRUPACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AÑO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.AÑOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AÑO' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.AÑOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDENTIFICACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.IDENTIFICACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDENTIFICACION' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.IDENTIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES1' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES2' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES3' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES4' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES5' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES6' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES7' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES8' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES9' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES10' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES11' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MES12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIndPAC.MES12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MES12' in table 'IndPAC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndPAC.MES12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGRUPONull() As Boolean
            Return Me.IsNull(Me.tableIndPAC.GRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGRUPONull()
            Me(Me.tableIndPAC.GRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGRUPACIONNull() As Boolean
            Return Me.IsNull(Me.tableIndPAC.AGRUPACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGRUPACIONNull()
            Me(Me.tableIndPAC.AGRUPACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAÑONull() As Boolean
            Return Me.IsNull(Me.tableIndPAC.AÑOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAÑONull()
            Me(Me.tableIndPAC.AÑOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDENTIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableIndPAC.IDENTIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDENTIFICACIONNull()
            Me(Me.tableIndPAC.IDENTIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES1Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES1Null()
            Me(Me.tableIndPAC.MES1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES2Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES2Null()
            Me(Me.tableIndPAC.MES2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES3Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES3Null()
            Me(Me.tableIndPAC.MES3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES4Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES4Null()
            Me(Me.tableIndPAC.MES4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES5Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES5Null()
            Me(Me.tableIndPAC.MES5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES6Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES6Null()
            Me(Me.tableIndPAC.MES6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES7Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES7Null()
            Me(Me.tableIndPAC.MES7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES8Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES8Null()
            Me(Me.tableIndPAC.MES8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES9Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES9Null()
            Me(Me.tableIndPAC.MES9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES10Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES10Null()
            Me(Me.tableIndPAC.MES10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES11Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES11Null()
            Me(Me.tableIndPAC.MES11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMES12Null() As Boolean
            Return Me.IsNull(Me.tableIndPAC.MES12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMES12Null()
            Me(Me.tableIndPAC.MES12Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MatCompDDRow
        Inherits Global.System.Data.DataRow
        
        Private tableMatCompDD As MatCompDDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMatCompDD = CType(Me.Table,MatCompDDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMatC() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatCompDD.CodigoMatCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoMatC' in table 'MatCompDD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatCompDD.CodigoMatCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescMMat() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatCompDD.DescMMatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescMMat' in table 'MatCompDD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatCompDD.DescMMatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescMatC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatCompDD.DescMatCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescMatC' in table 'MatCompDD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatCompDD.DescMatCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatCompDD.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MatCompDD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatCompDD.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatCompDD.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'MatCompDD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatCompDD.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatCompDD.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Precio' in table 'MatCompDD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatCompDD.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGRUPACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatCompDD.AGRUPACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AGRUPACION' in table 'MatCompDD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatCompDD.AGRUPACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoMatCNull() As Boolean
            Return Me.IsNull(Me.tableMatCompDD.CodigoMatCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoMatCNull()
            Me(Me.tableMatCompDD.CodigoMatCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescMMatNull() As Boolean
            Return Me.IsNull(Me.tableMatCompDD.DescMMatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescMMatNull()
            Me(Me.tableMatCompDD.DescMMatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescMatCNull() As Boolean
            Return Me.IsNull(Me.tableMatCompDD.DescMatCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescMatCNull()
            Me(Me.tableMatCompDD.DescMatCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMatCompDD.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMatCompDD.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableMatCompDD.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableMatCompDD.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tableMatCompDD.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tableMatCompDD.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGRUPACIONNull() As Boolean
            Return Me.IsNull(Me.tableMatCompDD.AGRUPACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGRUPACIONNull()
            Me(Me.tableMatCompDD.AGRUPACIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MaterialBCVRow
        Inherits Global.System.Data.DataRow
        
        Private tableMaterialBCV As MaterialBCVDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMaterialBCV = CType(Me.Table,MaterialBCVDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrupoBCV() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.GrupoBCVColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrupoBCV' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.GrupoBCVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGRUPACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.AGRUPACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AGRUPACION' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.AGRUPACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Suplidor() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.SuplidorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suplidor' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.SuplidorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.PrecioUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDiferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaterialBCV.PorcentajeDiferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeDiferencia' in table 'MaterialBCV' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaterialBCV.PorcentajeDiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMaterialBCV.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMaterialBCV.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMaterialBCV.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrupoBCVNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.GrupoBCVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrupoBCVNull()
            Me(Me.tableMaterialBCV.GrupoBCVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGRUPACIONNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.AGRUPACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGRUPACIONNull()
            Me(Me.tableMaterialBCV.AGRUPACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMaterialBCV.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuplidorNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.SuplidorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuplidorNull()
            Me(Me.tableMaterialBCV.SuplidorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.PrecioUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitarioNull()
            Me(Me.tableMaterialBCV.PrecioUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableMaterialBCV.PorcentajeDiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeDiferenciaNull()
            Me(Me.tableMaterialBCV.PorcentajeDiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MatObrRow
        Inherits Global.System.Data.DataRow
        
        Private tableMatObr As MatObrDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMatObr = CType(Me.Table,MatObrDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_obr_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatObr._cod_obr_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-obr-apu' in table 'MatObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatObr._cod_obr_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _rec_typ_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatObr._rec_typ_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rec-typ-apu' in table 'MatObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatObr._rec_typ_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _num_par_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatObr._num_par_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'num-par-apu' in table 'MatObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatObr._num_par_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_mat_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatObr._cod_mat_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-mat-apu' in table 'MatObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatObr._cod_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatObr.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MatObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatObr.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _id_mat_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatObr._id_mat_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'id-mat-apu' in table 'MatObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatObr._id_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _und_mat_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatObr._und_mat_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'und-mat-apu' in table 'MatObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatObr._und_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cnt_mat_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatObr._cnt_mat_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cnt-mat-apu' in table 'MatObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatObr._cnt_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cst_mat_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatObr._cst_mat_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cst-mat-apu' in table 'MatObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatObr._cst_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _tot_mat_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMatObr._tot_mat_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot-mat-apu' in table 'MatObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatObr._tot_mat_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_obr_apuNull() As Boolean
            Return Me.IsNull(Me.tableMatObr._cod_obr_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_obr_apuNull()
            Me(Me.tableMatObr._cod_obr_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_rec_typ_apuNull() As Boolean
            Return Me.IsNull(Me.tableMatObr._rec_typ_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_rec_typ_apuNull()
            Me(Me.tableMatObr._rec_typ_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_num_par_apuNull() As Boolean
            Return Me.IsNull(Me.tableMatObr._num_par_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_num_par_apuNull()
            Me(Me.tableMatObr._num_par_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableMatObr._cod_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_mat_apuNull()
            Me(Me.tableMatObr._cod_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMatObr.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMatObr.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_id_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableMatObr._id_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_id_mat_apuNull()
            Me(Me.tableMatObr._id_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_und_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableMatObr._und_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_und_mat_apuNull()
            Me(Me.tableMatObr._und_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cnt_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableMatObr._cnt_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cnt_mat_apuNull()
            Me(Me.tableMatObr._cnt_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cst_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableMatObr._cst_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cst_mat_apuNull()
            Me(Me.tableMatObr._cst_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_tot_mat_apuNull() As Boolean
            Return Me.IsNull(Me.tableMatObr._tot_mat_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_tot_mat_apuNull()
            Me(Me.tableMatObr._tot_mat_apuColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PartObrRow
        Inherits Global.System.Data.DataRow
        
        Private tablePartObr As PartObrDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePartObr = CType(Me.Table,PartObrDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_obr_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._cod_obr_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-obr-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._cod_obr_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _desc_obr() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._desc_obrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'desc-obr' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._desc_obrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _rec_typ_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._rec_typ_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rec-typ-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._rec_typ_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _num_par_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._num_par_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'num-par-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._num_par_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_par_m() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._cod_par_mColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-par-m' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._cod_par_mColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr.Descripcion1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion1' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr.Descripcion1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr.Descripcion2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion2' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr.Descripcion2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion3() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr.Descripcion3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion3' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr.Descripcion3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiniDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr.MiniDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiniDescripcion' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr.MiniDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCovenin() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr.CodigoCoveninColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCovenin' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr.CodigoCoveninColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartidaTexto() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr.PartidaTextoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartidaTexto' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr.PartidaTextoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _can_ana_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._can_ana_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'can-ana-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._can_ana_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ren_par_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._ren_par_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ren-par-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._ren_par_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _can_apr_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._can_apr_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'can-apr-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._can_apr_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _und_par_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._und_par_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'und-par-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._und_par_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _pun_par_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._pun_par_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pun-par-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._pun_par_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _pun_ana_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._pun_ana_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pun-ana-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._pun_ana_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _pun_adp_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._pun_adp_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pun-adp-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._pun_adp_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _ptot_pr_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._ptot_pr_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ptot-pr-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._ptot_pr_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _tot_gen_apu() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._tot_gen_apuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tot-gen-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._tot_gen_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _tit_is_apu() As String
            Get
                Try 
                    Return CType(Me(Me.tablePartObr._tit_is_apuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tit-is-apu' in table 'PartObr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePartObr._tit_is_apuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_obr_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._cod_obr_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_obr_apuNull()
            Me(Me.tablePartObr._cod_obr_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_desc_obrNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._desc_obrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_desc_obrNull()
            Me(Me.tablePartObr._desc_obrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_rec_typ_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._rec_typ_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_rec_typ_apuNull()
            Me(Me.tablePartObr._rec_typ_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_num_par_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._num_par_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_num_par_apuNull()
            Me(Me.tablePartObr._num_par_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_par_mNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._cod_par_mColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_par_mNull()
            Me(Me.tablePartObr._cod_par_mColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion1Null() As Boolean
            Return Me.IsNull(Me.tablePartObr.Descripcion1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion1Null()
            Me(Me.tablePartObr.Descripcion1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion2Null() As Boolean
            Return Me.IsNull(Me.tablePartObr.Descripcion2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion2Null()
            Me(Me.tablePartObr.Descripcion2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcion3Null() As Boolean
            Return Me.IsNull(Me.tablePartObr.Descripcion3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcion3Null()
            Me(Me.tablePartObr.Descripcion3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiniDescripcionNull() As Boolean
            Return Me.IsNull(Me.tablePartObr.MiniDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiniDescripcionNull()
            Me(Me.tablePartObr.MiniDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoCoveninNull() As Boolean
            Return Me.IsNull(Me.tablePartObr.CodigoCoveninColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoCoveninNull()
            Me(Me.tablePartObr.CodigoCoveninColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartidaTextoNull() As Boolean
            Return Me.IsNull(Me.tablePartObr.PartidaTextoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartidaTextoNull()
            Me(Me.tablePartObr.PartidaTextoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_can_ana_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._can_ana_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_can_ana_apuNull()
            Me(Me.tablePartObr._can_ana_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ren_par_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._ren_par_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ren_par_apuNull()
            Me(Me.tablePartObr._ren_par_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_can_apr_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._can_apr_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_can_apr_apuNull()
            Me(Me.tablePartObr._can_apr_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_und_par_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._und_par_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_und_par_apuNull()
            Me(Me.tablePartObr._und_par_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_pun_par_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._pun_par_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_pun_par_apuNull()
            Me(Me.tablePartObr._pun_par_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_pun_ana_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._pun_ana_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_pun_ana_apuNull()
            Me(Me.tablePartObr._pun_ana_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_pun_adp_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._pun_adp_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_pun_adp_apuNull()
            Me(Me.tablePartObr._pun_adp_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_ptot_pr_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._ptot_pr_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_ptot_pr_apuNull()
            Me(Me.tablePartObr._ptot_pr_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_tot_gen_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._tot_gen_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_tot_gen_apuNull()
            Me(Me.tablePartObr._tot_gen_apuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_tit_is_apuNull() As Boolean
            Return Me.IsNull(Me.tablePartObr._tit_is_apuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_tit_is_apuNull()
            Me(Me.tablePartObr._tit_is_apuColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class APUObrRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As APUObrRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As APUObrRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As APUObrRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ConfGenAPVRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ConfGenAPVRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ConfGenAPVRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ConfGenAPVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ConfiguracionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ConfiguracionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ConfiguracionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ConfiguracionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CostosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CostosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CostosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CostosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EqpImpLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EqpImpLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EqpImpLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EqpImpLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EqpImpLBsSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EqpImpLBsSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EqpImpLBsSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EqpImpLBsSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EquipoCompRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EquipoCompRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EquipoCompRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EquipoCompRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IndicesPACRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IndicesPACRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IndicesPACRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IndicesPACRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ListaEqpRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ListaEqpRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ListaEqpRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ListaEqpRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ListaMatRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ListaMatRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ListaMatRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ListaMatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ListaMdORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ListaMdORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ListaMdORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ListaMdORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ListaTranRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ListaTranRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ListaTranRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ListaTranRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MasterEqpRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MasterEqpRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MasterEqpRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MasterEqpRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MasterManoObraRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MasterManoObraRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MasterManoObraRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MasterManoObraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MasterMaterialRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MasterMaterialRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MasterMaterialRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MasterMaterialRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MasterPartBsSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MasterPartBsSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MasterPartBsSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MasterPartBsSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MasterPartidasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MasterPartidasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MasterPartidasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MasterPartidasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class materialCompRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As materialCompRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As materialCompRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As materialCompRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MatImpLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MatImpLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MatImpLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MatImpLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MatImpLBsSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MatImpLBsSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MatImpLBsSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MatImpLBsSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MOcompRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MOcompRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MOcompRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MOcompRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MOImpLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MOImpLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MOImpLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MOImpLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MOImpLBsSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MOImpLBsSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MOImpLBsSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MOImpLBsSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class obrasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As obrasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As obrasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As obrasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PartEqCRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PartEqCRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PartEqCRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PartEqCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EqpCompuestoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EqpCompuestoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EqpCompuestoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EqpCompuestoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MMaterialRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MMaterialRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MMaterialRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MMaterialRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MObraRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MObraRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MObraRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MObraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MObraCRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MObraCRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MObraCRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MObraCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ValuacionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ValuacionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ValuacionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ValuacionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ComputoEQRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ComputoEQRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ComputoEQRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ComputoEQRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ComputoMORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ComputoMORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ComputoMORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ComputoMORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ComputoMTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ComputoMTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ComputoMTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ComputoMTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ComputoTRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ComputoTRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ComputoTRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ComputoTRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IndPACRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IndPACRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IndPACRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IndPACRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MatCompDDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MatCompDDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MatCompDDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MatCompDDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MaterialBCVRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MaterialBCVRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MaterialBCVRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MaterialBCVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MatObrRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MatObrRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MatObrRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MatObrRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PartObrRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PartObrRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PartObrRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PartObrRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace MasterAPVDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class APUObrTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "APUObr"
            tableMapping.ColumnMappings.Add("cod-obr-apu", "cod-obr-apu")
            tableMapping.ColumnMappings.Add("rec-typ-apu", "rec-typ-apu")
            tableMapping.ColumnMappings.Add("num-par-apu", "num-par-apu")
            tableMapping.ColumnMappings.Add("cod-par-m", "cod-par-m")
            tableMapping.ColumnMappings.Add("PartidaTexto", "PartidaTexto")
            tableMapping.ColumnMappings.Add("cod-mat-apu", "cod-mat-apu")
            tableMapping.ColumnMappings.Add("id-mat-apu", "id-mat-apu")
            tableMapping.ColumnMappings.Add("cod-eqp-apu", "cod-eqp-apu")
            tableMapping.ColumnMappings.Add("id-eqp-apu", "id-eqp-apu")
            tableMapping.ColumnMappings.Add("cod-mob-apu", "cod-mob-apu")
            tableMapping.ColumnMappings.Add("id-mob-apu", "id-mob-apu")
            tableMapping.ColumnMappings.Add("cod-trn-apu", "cod-trn-apu")
            tableMapping.ColumnMappings.Add("id-trn-apu", "id-trn-apu")
            tableMapping.ColumnMappings.Add("can-ana-apu", "can-ana-apu")
            tableMapping.ColumnMappings.Add("ren-par-apu", "ren-par-apu")
            tableMapping.ColumnMappings.Add("can-apr-apu", "can-apr-apu")
            tableMapping.ColumnMappings.Add("und-par-apu", "und-par-apu")
            tableMapping.ColumnMappings.Add("iva-apu", "iva-apu")
            tableMapping.ColumnMappings.Add("prc-adm-apu", "prc-adm-apu")
            tableMapping.ColumnMappings.Add("prc-utl-apu", "prc-utl-apu")
            tableMapping.ColumnMappings.Add("fcas-apu", "fcas-apu")
            tableMapping.ColumnMappings.Add("fin-obr-apu", "fin-obr-apu")
            tableMapping.ColumnMappings.Add("pun-par-apu", "pun-par-apu")
            tableMapping.ColumnMappings.Add("pun-ana-apu", "pun-ana-apu")
            tableMapping.ColumnMappings.Add("pun-adp-apu", "pun-adp-apu")
            tableMapping.ColumnMappings.Add("hor-hmb-apu", "hor-hmb-apu")
            tableMapping.ColumnMappings.Add("Dias", "Dias")
            tableMapping.ColumnMappings.Add("NumeroControl", "NumeroControl")
            tableMapping.ColumnMappings.Add("ptot-pr-apu", "ptot-pr-apu")
            tableMapping.ColumnMappings.Add("tot-gen-apu", "tot-gen-apu")
            tableMapping.ColumnMappings.Add("tit-is-apu", "tit-is-apu")
            tableMapping.ColumnMappings.Add("und-mat-apu", "und-mat-apu")
            tableMapping.ColumnMappings.Add("cnt-mat-apu", "cnt-mat-apu")
            tableMapping.ColumnMappings.Add("cst-mat-apu", "cst-mat-apu")
            tableMapping.ColumnMappings.Add("tot-mat-apu", "tot-mat-apu")
            tableMapping.ColumnMappings.Add("cnt-eqp-apu", "cnt-eqp-apu")
            tableMapping.ColumnMappings.Add("cst-eqp-apu", "cst-eqp-apu")
            tableMapping.ColumnMappings.Add("dep-eqp-apu", "dep-eqp-apu")
            tableMapping.ColumnMappings.Add("ceq-apu-tot", "ceq-apu-tot")
            tableMapping.ColumnMappings.Add("cnt-mob-apu", "cnt-mob-apu")
            tableMapping.ColumnMappings.Add("jrn-mob-apu", "jrn-mob-apu")
            tableMapping.ColumnMappings.Add("bno-mob-apu", "bno-mob-apu")
            tableMapping.ColumnMappings.Add("tot-jrn-apu", "tot-jrn-apu")
            tableMapping.ColumnMappings.Add("tot-bno-apu", "tot-bno-apu")
            tableMapping.ColumnMappings.Add("und-trn-apu", "und-trn-apu")
            tableMapping.ColumnMappings.Add("cnt-trn-apu", "cnt-trn-apu")
            tableMapping.ColumnMappings.Add("cst-trn-apu", "cst-trn-apu")
            tableMapping.ColumnMappings.Add("tot-trn-apu", "tot-trn-apu")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `APUObr` (`cod-obr-apu`, `rec-typ-apu`, `num-par-apu`, `cod-par-m`, `"& _ 
                "PartidaTexto`, `cod-mat-apu`, `id-mat-apu`, `cod-eqp-apu`, `id-eqp-apu`, `cod-mo"& _ 
                "b-apu`, `id-mob-apu`, `cod-trn-apu`, `id-trn-apu`, `can-ana-apu`, `ren-par-apu`,"& _ 
                " `can-apr-apu`, `und-par-apu`, `iva-apu`, `prc-adm-apu`, `prc-utl-apu`, `fcas-ap"& _ 
                "u`, `fin-obr-apu`, `pun-par-apu`, `pun-ana-apu`, `pun-adp-apu`, `hor-hmb-apu`, `"& _ 
                "Dias`, `NumeroControl`, `ptot-pr-apu`, `tot-gen-apu`, `tit-is-apu`, `und-mat-apu"& _ 
                "`, `cnt-mat-apu`, `cst-mat-apu`, `tot-mat-apu`, `cnt-eqp-apu`, `cst-eqp-apu`, `d"& _ 
                "ep-eqp-apu`, `ceq-apu-tot`, `cnt-mob-apu`, `jrn-mob-apu`, `bno-mob-apu`, `tot-jr"& _ 
                "n-apu`, `tot-bno-apu`, `und-trn-apu`, `cnt-trn-apu`, `cst-trn-apu`, `tot-trn-apu"& _ 
                "`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cod-obr-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cod-obr-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("rec-typ-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "rec-typ-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("num-par-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "num-par-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cod-par-m", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cod-par-m", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PartidaTexto", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartidaTexto", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cod-mat-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cod-mat-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("id-mat-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "id-mat-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cod-eqp-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cod-eqp-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("id-eqp-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "id-eqp-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cod-mob-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cod-mob-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("id-mob-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "id-mob-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cod-trn-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cod-trn-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("id-trn-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "id-trn-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("can-ana-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "can-ana-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ren-par-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ren-par-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("can-apr-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "can-apr-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("und-par-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "und-par-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("iva-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "iva-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("prc-adm-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "prc-adm-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("prc-utl-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "prc-utl-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("fcas-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "fcas-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("fin-obr-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "fin-obr-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("pun-par-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "pun-par-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("pun-ana-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "pun-ana-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("pun-adp-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "pun-adp-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("hor-hmb-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "hor-hmb-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Dias", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Dias", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumeroControl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumeroControl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ptot-pr-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ptot-pr-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("tot-gen-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tot-gen-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("tit-is-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tit-is-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("und-mat-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "und-mat-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cnt-mat-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cnt-mat-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cst-mat-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cst-mat-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("tot-mat-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tot-mat-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cnt-eqp-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cnt-eqp-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cst-eqp-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cst-eqp-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("dep-eqp-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dep-eqp-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ceq-apu-tot", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ceq-apu-tot", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cnt-mob-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cnt-mob-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("jrn-mob-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "jrn-mob-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("bno-mob-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bno-mob-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("tot-jrn-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tot-jrn-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("tot-bno-apu", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tot-bno-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("und-trn-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "und-trn-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cnt-trn-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cnt-trn-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cst-trn-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cst-trn-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("tot-trn-apu", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tot-trn-apu", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [cod-obr-apu], [rec-typ-apu], [num-par-apu], [cod-par-m], PartidaTexto, [c"& _ 
                "od-mat-apu], [id-mat-apu], [cod-eqp-apu], [id-eqp-apu], [cod-mob-apu], [id-mob-a"& _ 
                "pu], [cod-trn-apu], [id-trn-apu], [can-ana-apu], [ren-par-apu], [can-apr-apu], ["& _ 
                "und-par-apu], [iva-apu], [prc-adm-apu], [prc-utl-apu], [fcas-apu], [fin-obr-apu]"& _ 
                ", [pun-par-apu], [pun-ana-apu], [pun-adp-apu], [hor-hmb-apu], Dias, NumeroContro"& _ 
                "l, [ptot-pr-apu], [tot-gen-apu], [tit-is-apu], [und-mat-apu], [cnt-mat-apu], [cs"& _ 
                "t-mat-apu], [tot-mat-apu], [cnt-eqp-apu], [cst-eqp-apu], [dep-eqp-apu], [ceq-apu"& _ 
                "-tot], [cnt-mob-apu], [jrn-mob-apu], [bno-mob-apu], [tot-jrn-apu], [tot-bno-apu]"& _ 
                ", [und-trn-apu], [cnt-trn-apu], [cst-trn-apu], [tot-trn-apu] FROM APUObr"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.APUObrDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.APUObrDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.APUObrDataTable = New MasterAPVDataSet.APUObrDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.APUObrDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "APUObr")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal _cod_obr_apu As String,  _
                    ByVal _rec_typ_apu As String,  _
                    ByVal _num_par_apu As Global.System.Nullable(Of Double),  _
                    ByVal _cod_par_m As String,  _
                    ByVal PartidaTexto As String,  _
                    ByVal _cod_mat_apu As String,  _
                    ByVal _id_mat_apu As String,  _
                    ByVal _cod_eqp_apu As Global.System.Nullable(Of Double),  _
                    ByVal _id_eqp_apu As Global.System.Nullable(Of Double),  _
                    ByVal _cod_mob_apu As Global.System.Nullable(Of Double),  _
                    ByVal _id_mob_apu As Global.System.Nullable(Of Double),  _
                    ByVal _cod_trn_apu As String,  _
                    ByVal _id_trn_apu As String,  _
                    ByVal _can_ana_apu As Global.System.Nullable(Of Double),  _
                    ByVal _ren_par_apu As Global.System.Nullable(Of Double),  _
                    ByVal _can_apr_apu As Global.System.Nullable(Of Double),  _
                    ByVal _und_par_apu As String,  _
                    ByVal _iva_apu As Global.System.Nullable(Of Double),  _
                    ByVal _prc_adm_apu As Global.System.Nullable(Of Double),  _
                    ByVal _prc_utl_apu As Global.System.Nullable(Of Double),  _
                    ByVal _fcas_apu As Global.System.Nullable(Of Double),  _
                    ByVal _fin_obr_apu As Global.System.Nullable(Of Double),  _
                    ByVal _pun_par_apu As Global.System.Nullable(Of Double),  _
                    ByVal _pun_ana_apu As Global.System.Nullable(Of Double),  _
                    ByVal _pun_adp_apu As Global.System.Nullable(Of Double),  _
                    ByVal _hor_hmb_apu As Global.System.Nullable(Of Double),  _
                    ByVal Dias As Global.System.Nullable(Of Double),  _
                    ByVal NumeroControl As Global.System.Nullable(Of Double),  _
                    ByVal _ptot_pr_apu As Global.System.Nullable(Of Double),  _
                    ByVal _tot_gen_apu As Global.System.Nullable(Of Double),  _
                    ByVal _tit_is_apu As String,  _
                    ByVal _und_mat_apu As String,  _
                    ByVal _cnt_mat_apu As Global.System.Nullable(Of Double),  _
                    ByVal _cst_mat_apu As Global.System.Nullable(Of Double),  _
                    ByVal _tot_mat_apu As Global.System.Nullable(Of Double),  _
                    ByVal _cnt_eqp_apu As Global.System.Nullable(Of Double),  _
                    ByVal _cst_eqp_apu As Global.System.Nullable(Of Double),  _
                    ByVal _dep_eqp_apu As Global.System.Nullable(Of Double),  _
                    ByVal _ceq_apu_tot As Global.System.Nullable(Of Double),  _
                    ByVal _cnt_mob_apu As Global.System.Nullable(Of Double),  _
                    ByVal _jrn_mob_apu As Global.System.Nullable(Of Double),  _
                    ByVal _bno_mob_apu As Global.System.Nullable(Of Double),  _
                    ByVal _tot_jrn_apu As Global.System.Nullable(Of Double),  _
                    ByVal _tot_bno_apu As Global.System.Nullable(Of Double),  _
                    ByVal _und_trn_apu As String,  _
                    ByVal _cnt_trn_apu As String,  _
                    ByVal _cst_trn_apu As String,  _
                    ByVal _tot_trn_apu As String) As Integer
            If (_cod_obr_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(_cod_obr_apu,String)
            End If
            If (_rec_typ_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(_rec_typ_apu,String)
            End If
            If (_num_par_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(_num_par_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (_cod_par_m Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_cod_par_m,String)
            End If
            If (PartidaTexto Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PartidaTexto,String)
            End If
            If (_cod_mat_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_cod_mat_apu,String)
            End If
            If (_id_mat_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(_id_mat_apu,String)
            End If
            If (_cod_eqp_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(_cod_eqp_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (_id_eqp_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(_id_eqp_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_cod_mob_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_cod_mob_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (_id_mob_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_id_mob_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (_cod_trn_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(_cod_trn_apu,String)
            End If
            If (_id_trn_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_id_trn_apu,String)
            End If
            If (_can_ana_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_can_ana_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (_ren_par_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(_ren_par_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (_can_apr_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(_can_apr_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (_und_par_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(_und_par_apu,String)
            End If
            If (_iva_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(_iva_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (_prc_adm_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(_prc_adm_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (_prc_utl_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(_prc_utl_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (_fcas_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(_fcas_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (_fin_obr_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(_fin_obr_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (_pun_par_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(_pun_par_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (_pun_ana_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(_pun_ana_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (_pun_adp_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(_pun_adp_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (_hor_hmb_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(_hor_hmb_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Dias.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Dias.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (NumeroControl.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(NumeroControl.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (_ptot_pr_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(_ptot_pr_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (_tot_gen_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(_tot_gen_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (_tit_is_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(_tit_is_apu,String)
            End If
            If (_und_mat_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(_und_mat_apu,String)
            End If
            If (_cnt_mat_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(_cnt_mat_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (_cst_mat_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(_cst_mat_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (_tot_mat_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(_tot_mat_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (_cnt_eqp_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(_cnt_eqp_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (_cst_eqp_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(_cst_eqp_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (_dep_eqp_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(_dep_eqp_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (_ceq_apu_tot.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(_ceq_apu_tot.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (_cnt_mob_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(_cnt_mob_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (_jrn_mob_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(_jrn_mob_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (_bno_mob_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(_bno_mob_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (_tot_jrn_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(_tot_jrn_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (_tot_bno_apu.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(_tot_bno_apu.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (_und_trn_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(_und_trn_apu,String)
            End If
            If (_cnt_trn_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(_cnt_trn_apu,String)
            End If
            If (_cst_trn_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(_cst_trn_apu,String)
            End If
            If (_tot_trn_apu Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(_tot_trn_apu,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ConfGenAPVTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ConfGenAPV"
            tableMapping.ColumnMappings.Add("Obra", "Obra")
            tableMapping.ColumnMappings.Add("FCAS", "FCAS")
            tableMapping.ColumnMappings.Add("Administracion", "Administracion")
            tableMapping.ColumnMappings.Add("Utilidad", "Utilidad")
            tableMapping.ColumnMappings.Add("Rendimiento", "Rendimiento")
            tableMapping.ColumnMappings.Add("Dig_Rend", "Dig_Rend")
            tableMapping.ColumnMappings.Add("IVA", "IVA")
            tableMapping.ColumnMappings.Add("Cant_Part", "Cant_Part")
            tableMapping.ColumnMappings.Add("Cant_Analisis", "Cant_Analisis")
            tableMapping.ColumnMappings.Add("Div_Mat", "Div_Mat")
            tableMapping.ColumnMappings.Add("Base_MAT", "Base_MAT")
            tableMapping.ColumnMappings.Add("Base_EQP", "Base_EQP")
            tableMapping.ColumnMappings.Add("Base_MO", "Base_MO")
            tableMapping.ColumnMappings.Add("Base_Partidas", "Base_Partidas")
            tableMapping.ColumnMappings.Add("FechaB_MAT", "FechaB_MAT")
            tableMapping.ColumnMappings.Add("FechaB_EQP", "FechaB_EQP")
            tableMapping.ColumnMappings.Add("FechaB_MO", "FechaB_MO")
            tableMapping.ColumnMappings.Add("FechaB_PART", "FechaB_PART")
            tableMapping.ColumnMappings.Add("Moneda_P", "Moneda_P")
            tableMapping.ColumnMappings.Add("Moneda_S", "Moneda_S")
            tableMapping.ColumnMappings.Add("Propietario", "Propietario")
            tableMapping.ColumnMappings.Add("IngFirma", "IngFirma")
            tableMapping.ColumnMappings.Add("IngRevisa", "IngRevisa")
            tableMapping.ColumnMappings.Add("CIV_Revisa", "CIV_Revisa")
            tableMapping.ColumnMappings.Add("CIV_Firma", "CIV_Firma")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ConfGenAPV` (`Obra`, `FCAS`, `Administracion`, `Utilidad`, `Rendimie"& _ 
                "nto`, `Dig_Rend`, `IVA`, `Cant_Part`, `Cant_Analisis`, `Div_Mat`, `Base_MAT`, `B"& _ 
                "ase_EQP`, `Base_MO`, `Base_Partidas`, `FechaB_MAT`, `FechaB_EQP`, `FechaB_MO`, `"& _ 
                "FechaB_PART`, `Moneda_P`, `Moneda_S`, `Propietario`, `IngFirma`, `IngRevisa`, `C"& _ 
                "IV_Revisa`, `CIV_Firma`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Obra", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Obra", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FCAS", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FCAS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Administracion", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Administracion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Utilidad", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Utilidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Rendimiento", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Rendimiento", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Dig_Rend", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Dig_Rend", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IVA", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IVA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cant_Part", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cant_Part", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cant_Analisis", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cant_Analisis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Div_Mat", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Div_Mat", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Base_MAT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Base_MAT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Base_EQP", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Base_EQP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Base_MO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Base_MO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Base_Partidas", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Base_Partidas", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FechaB_MAT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FechaB_MAT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FechaB_EQP", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FechaB_EQP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FechaB_MO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FechaB_MO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FechaB_PART", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FechaB_PART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Moneda_P", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Moneda_P", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Moneda_S", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Moneda_S", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Propietario", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Propietario", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IngFirma", Global.System.Data.OleDb.OleDbType.WChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IngFirma", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IngRevisa", Global.System.Data.OleDb.OleDbType.WChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IngRevisa", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CIV_Revisa", Global.System.Data.OleDb.OleDbType.WChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CIV_Revisa", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CIV_Firma", Global.System.Data.OleDb.OleDbType.WChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CIV_Firma", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Obra, FCAS, Administracion, Utilidad, Rendimiento, Dig_Rend, IVA, Cant_Par"& _ 
                "t, Cant_Analisis, Div_Mat, Base_MAT, Base_EQP, Base_MO, Base_Partidas, FechaB_MA"& _ 
                "T, FechaB_EQP, FechaB_MO, FechaB_PART, Moneda_P, Moneda_S, Propietario, IngFirma"& _ 
                ", IngRevisa, CIV_Revisa, CIV_Firma FROM ConfGenAPV"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.ConfGenAPVDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.ConfGenAPVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.ConfGenAPVDataTable = New MasterAPVDataSet.ConfGenAPVDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.ConfGenAPVDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ConfGenAPV")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Obra As String,  _
                    ByVal FCAS As Global.System.Nullable(Of Double),  _
                    ByVal Administracion As Global.System.Nullable(Of Double),  _
                    ByVal Utilidad As Global.System.Nullable(Of Double),  _
                    ByVal Rendimiento As Global.System.Nullable(Of Double),  _
                    ByVal Dig_Rend As Global.System.Nullable(Of Double),  _
                    ByVal IVA As Global.System.Nullable(Of Double),  _
                    ByVal Cant_Part As Global.System.Nullable(Of Double),  _
                    ByVal Cant_Analisis As Global.System.Nullable(Of Double),  _
                    ByVal Div_Mat As String,  _
                    ByVal Base_MAT As String,  _
                    ByVal Base_EQP As String,  _
                    ByVal Base_MO As String,  _
                    ByVal Base_Partidas As String,  _
                    ByVal FechaB_MAT As Global.System.Nullable(Of Date),  _
                    ByVal FechaB_EQP As Global.System.Nullable(Of Date),  _
                    ByVal FechaB_MO As Global.System.Nullable(Of Date),  _
                    ByVal FechaB_PART As Global.System.Nullable(Of Date),  _
                    ByVal Moneda_P As String,  _
                    ByVal Moneda_S As String,  _
                    ByVal Propietario As String,  _
                    ByVal IngFirma As String,  _
                    ByVal IngRevisa As String,  _
                    ByVal CIV_Revisa As String,  _
                    ByVal CIV_Firma As String) As Integer
            If (Obra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Obra,String)
            End If
            If (FCAS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCAS.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Administracion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Administracion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Utilidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Utilidad.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Rendimiento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Rendimiento.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Dig_Rend.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Dig_Rend.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IVA.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Cant_Part.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Cant_Part.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Cant_Analisis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Cant_Analisis.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Div_Mat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Div_Mat,String)
            End If
            If (Base_MAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Base_MAT,String)
            End If
            If (Base_EQP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Base_EQP,String)
            End If
            If (Base_MO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Base_MO,String)
            End If
            If (Base_Partidas Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Base_Partidas,String)
            End If
            If (FechaB_MAT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(FechaB_MAT.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (FechaB_EQP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(FechaB_EQP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (FechaB_MO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(FechaB_MO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (FechaB_PART.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(FechaB_PART.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Moneda_P Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Moneda_P,String)
            End If
            If (Moneda_S Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Moneda_S,String)
            End If
            If (Propietario Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Propietario,String)
            End If
            If (IngFirma Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(IngFirma,String)
            End If
            If (IngRevisa Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(IngRevisa,String)
            End If
            If (CIV_Revisa Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CIV_Revisa,String)
            End If
            If (CIV_Firma Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(CIV_Firma,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ConfiguracionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Configuracion"
            tableMapping.ColumnMappings.Add("Obra", "Obra")
            tableMapping.ColumnMappings.Add("LeydelTrabajo", "LeydelTrabajo")
            tableMapping.ColumnMappings.Add("Administracion", "Administracion")
            tableMapping.ColumnMappings.Add("DigitosRendimiento", "DigitosRendimiento")
            tableMapping.ColumnMappings.Add("Rendimiento", "Rendimiento")
            tableMapping.ColumnMappings.Add("Utilidad", "Utilidad")
            tableMapping.ColumnMappings.Add("ImpuestoVentas", "ImpuestoVentas")
            tableMapping.ColumnMappings.Add("CantidadDePartida", "CantidadDePartida")
            tableMapping.ColumnMappings.Add("CantidadDelAnalisis", "CantidadDelAnalisis")
            tableMapping.ColumnMappings.Add("TipoImpuestoCargado", "TipoImpuestoCargado")
            tableMapping.ColumnMappings.Add("DividirMateriales", "DividirMateriales")
            tableMapping.ColumnMappings.Add("AfectanPrestaciones", "AfectanPrestaciones")
            tableMapping.ColumnMappings.Add("BaseMaterialesUsar", "BaseMaterialesUsar")
            tableMapping.ColumnMappings.Add("MesMaterialesUsar", "MesMaterialesUsar")
            tableMapping.ColumnMappings.Add("BaseEquiposUsar", "BaseEquiposUsar")
            tableMapping.ColumnMappings.Add("MesEquiposUsar", "MesEquiposUsar")
            tableMapping.ColumnMappings.Add("BaseManoObraUsar", "BaseManoObraUsar")
            tableMapping.ColumnMappings.Add("MesManoObraUsar", "MesManoObraUsar")
            tableMapping.ColumnMappings.Add("TipoRendimiento", "TipoRendimiento")
            tableMapping.ColumnMappings.Add("HorasJornadaDiaria", "HorasJornadaDiaria")
            tableMapping.ColumnMappings.Add("TipoImpresora", "TipoImpresora")
            tableMapping.ColumnMappings.Add("PreciosDistintosACalculados", "PreciosDistintosACalculados")
            tableMapping.ColumnMappings.Add("PorcentajeEnAnalisis", "PorcentajeEnAnalisis")
            tableMapping.ColumnMappings.Add("CodigoInsumosEnAnalisis", "CodigoInsumosEnAnalisis")
            tableMapping.ColumnMappings.Add("MonedaUtilizar", "MonedaUtilizar")
            tableMapping.ColumnMappings.Add("UltimaObra1", "UltimaObra1")
            tableMapping.ColumnMappings.Add("UltimaObra2", "UltimaObra2")
            tableMapping.ColumnMappings.Add("UltimaObra3", "UltimaObra3")
            tableMapping.ColumnMappings.Add("ImpEstructura1", "ImpEstructura1")
            tableMapping.ColumnMappings.Add("ImpEstructura2", "ImpEstructura2")
            tableMapping.ColumnMappings.Add("ImpEstructura3", "ImpEstructura3")
            tableMapping.ColumnMappings.Add("ImpEstructura4", "ImpEstructura4")
            tableMapping.ColumnMappings.Add("ImpEstructura5", "ImpEstructura5")
            tableMapping.ColumnMappings.Add("ImpGenerales1", "ImpGenerales1")
            tableMapping.ColumnMappings.Add("ImpGenerales2", "ImpGenerales2")
            tableMapping.ColumnMappings.Add("ImpGenerales3", "ImpGenerales3")
            tableMapping.ColumnMappings.Add("ImpGenerales4", "ImpGenerales4")
            tableMapping.ColumnMappings.Add("ImpGenerales5", "ImpGenerales5")
            tableMapping.ColumnMappings.Add("ImpGenerales6", "ImpGenerales6")
            tableMapping.ColumnMappings.Add("ImpCopiaInsumos", "ImpCopiaInsumos")
            tableMapping.ColumnMappings.Add("ImpProceso", "ImpProceso")
            tableMapping.ColumnMappings.Add("ImpBuscarEnArchivo", "ImpBuscarEnArchivo")
            tableMapping.ColumnMappings.Add("ImpFijarArchivo", "ImpFijarArchivo")
            tableMapping.ColumnMappings.Add("ImpArchivo", "ImpArchivo")
            tableMapping.ColumnMappings.Add("ObraReciente1", "ObraReciente1")
            tableMapping.ColumnMappings.Add("ObraReciente2", "ObraReciente2")
            tableMapping.ColumnMappings.Add("ObraReciente3", "ObraReciente3")
            tableMapping.ColumnMappings.Add("ObraReciente4", "ObraReciente4")
            tableMapping.ColumnMappings.Add("ObraReciente5", "ObraReciente5")
            tableMapping.ColumnMappings.Add("ObraReciente6", "ObraReciente6")
            tableMapping.ColumnMappings.Add("ObraReciente7", "ObraReciente7")
            tableMapping.ColumnMappings.Add("ObraReciente8", "ObraReciente8")
            tableMapping.ColumnMappings.Add("ObraReciente9", "ObraReciente9")
            tableMapping.ColumnMappings.Add("ObraReciente10", "ObraReciente10")
            tableMapping.ColumnMappings.Add("ImpresionAPV", "ImpresionAPV")
            tableMapping.ColumnMappings.Add("LetraEnc", "LetraEnc")
            tableMapping.ColumnMappings.Add("LetraDet", "LetraDet")
            tableMapping.ColumnMappings.Add("EstiloEnc", "EstiloEnc")
            tableMapping.ColumnMappings.Add("EstiloDet", "EstiloDet")
            tableMapping.ColumnMappings.Add("TamañoEnc", "TamañoEnc")
            tableMapping.ColumnMappings.Add("TamañoDet", "TamañoDet")
            tableMapping.ColumnMappings.Add("MargenSup", "MargenSup")
            tableMapping.ColumnMappings.Add("MargenInf", "MargenInf")
            tableMapping.ColumnMappings.Add("TxTTrabajo", "TxTTrabajo")
            tableMapping.ColumnMappings.Add("TxTAdministracion", "TxTAdministracion")
            tableMapping.ColumnMappings.Add("TxTUtilidad", "TxTUtilidad")
            tableMapping.ColumnMappings.Add("TxTIVA", "TxTIVA")
            tableMapping.ColumnMappings.Add("TxTJornadaDiaria", "TxTJornadaDiaria")
            tableMapping.ColumnMappings.Add("FCAS", "FCAS")
            tableMapping.ColumnMappings.Add("Moneda_P", "Moneda_P")
            tableMapping.ColumnMappings.Add("Moneda_S", "Moneda_S")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Configuracion` (`Obra`, `LeydelTrabajo`, `Administracion`, `DigitosR"& _ 
                "endimiento`, `Rendimiento`, `Utilidad`, `ImpuestoVentas`, `CantidadDePartida`, `"& _ 
                "CantidadDelAnalisis`, `TipoImpuestoCargado`, `DividirMateriales`, `AfectanPresta"& _ 
                "ciones`, `BaseMaterialesUsar`, `MesMaterialesUsar`, `BaseEquiposUsar`, `MesEquip"& _ 
                "osUsar`, `BaseManoObraUsar`, `MesManoObraUsar`, `TipoRendimiento`, `HorasJornada"& _ 
                "Diaria`, `TipoImpresora`, `PreciosDistintosACalculados`, `PorcentajeEnAnalisis`,"& _ 
                " `CodigoInsumosEnAnalisis`, `MonedaUtilizar`, `UltimaObra1`, `UltimaObra2`, `Ult"& _ 
                "imaObra3`, `ImpEstructura1`, `ImpEstructura2`, `ImpEstructura3`, `ImpEstructura4"& _ 
                "`, `ImpEstructura5`, `ImpGenerales1`, `ImpGenerales2`, `ImpGenerales3`, `ImpGene"& _ 
                "rales4`, `ImpGenerales5`, `ImpGenerales6`, `ImpCopiaInsumos`, `ImpProceso`, `Imp"& _ 
                "BuscarEnArchivo`, `ImpFijarArchivo`, `ImpArchivo`, `ObraReciente1`, `ObraRecient"& _ 
                "e2`, `ObraReciente3`, `ObraReciente4`, `ObraReciente5`, `ObraReciente6`, `ObraRe"& _ 
                "ciente7`, `ObraReciente8`, `ObraReciente9`, `ObraReciente10`, `ImpresionAPV`, `L"& _ 
                "etraEnc`, `LetraDet`, `EstiloEnc`, `EstiloDet`, `TamañoEnc`, `TamañoDet`, `Marge"& _ 
                "nSup`, `MargenInf`, `TxTTrabajo`, `TxTAdministracion`, `TxTUtilidad`, `TxTIVA`, "& _ 
                "`TxTJornadaDiaria`, `FCAS`, `Moneda_P`, `Moneda_S`) VALUES (?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Obra", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Obra", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeydelTrabajo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeydelTrabajo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Administracion", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Administracion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DigitosRendimiento", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DigitosRendimiento", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Rendimiento", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Rendimiento", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Utilidad", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Utilidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpuestoVentas", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpuestoVentas", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CantidadDePartida", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CantidadDePartida", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CantidadDelAnalisis", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CantidadDelAnalisis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TipoImpuestoCargado", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TipoImpuestoCargado", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DividirMateriales", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DividirMateriales", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AfectanPrestaciones", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AfectanPrestaciones", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseMaterialesUsar", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseMaterialesUsar", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MesMaterialesUsar", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MesMaterialesUsar", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseEquiposUsar", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseEquiposUsar", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MesEquiposUsar", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MesEquiposUsar", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseManoObraUsar", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseManoObraUsar", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MesManoObraUsar", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MesManoObraUsar", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TipoRendimiento", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TipoRendimiento", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HorasJornadaDiaria", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HorasJornadaDiaria", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TipoImpresora", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TipoImpresora", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PreciosDistintosACalculados", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PreciosDistintosACalculados", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeEnAnalisis", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeEnAnalisis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodigoInsumosEnAnalisis", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodigoInsumosEnAnalisis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MonedaUtilizar", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MonedaUtilizar", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UltimaObra1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UltimaObra1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UltimaObra2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UltimaObra2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UltimaObra3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UltimaObra3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpEstructura1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpEstructura1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpEstructura2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpEstructura2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpEstructura3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpEstructura3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpEstructura4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpEstructura4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpEstructura5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpEstructura5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpGenerales1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpGenerales1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpGenerales2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpGenerales2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpGenerales3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpGenerales3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpGenerales4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpGenerales4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpGenerales5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpGenerales5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpGenerales6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpGenerales6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpCopiaInsumos", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpCopiaInsumos", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpProceso", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpProceso", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpBuscarEnArchivo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpBuscarEnArchivo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpFijarArchivo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpFijarArchivo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpArchivo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpArchivo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ObraReciente1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ObraReciente1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ObraReciente2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ObraReciente2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ObraReciente3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ObraReciente3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ObraReciente4", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ObraReciente4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ObraReciente5", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ObraReciente5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ObraReciente6", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ObraReciente6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ObraReciente7", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ObraReciente7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ObraReciente8", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ObraReciente8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ObraReciente9", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ObraReciente9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ObraReciente10", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ObraReciente10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ImpresionAPV", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ImpresionAPV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LetraEnc", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LetraEnc", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LetraDet", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LetraDet", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EstiloEnc", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "EstiloEnc", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EstiloDet", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "EstiloDet", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TamañoEnc", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TamañoEnc", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TamañoDet", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TamañoDet", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MargenSup", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MargenSup", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MargenInf", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MargenInf", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TxTTrabajo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TxTTrabajo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TxTAdministracion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TxTAdministracion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TxTUtilidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TxTUtilidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TxTIVA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TxTIVA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TxTJornadaDiaria", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TxTJornadaDiaria", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FCAS", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FCAS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Moneda_P", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Moneda_P", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Moneda_S", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Moneda_S", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Obra, LeydelTrabajo, Administracion, DigitosRendimiento, Rendimiento, Util"& _ 
                "idad, ImpuestoVentas, CantidadDePartida, CantidadDelAnalisis, TipoImpuestoCargad"& _ 
                "o, DividirMateriales, AfectanPrestaciones, BaseMaterialesUsar, MesMaterialesUsar"& _ 
                ", BaseEquiposUsar, MesEquiposUsar, BaseManoObraUsar, MesManoObraUsar, TipoRendim"& _ 
                "iento, HorasJornadaDiaria, TipoImpresora, PreciosDistintosACalculados, Porcentaj"& _ 
                "eEnAnalisis, CodigoInsumosEnAnalisis, MonedaUtilizar, UltimaObra1, UltimaObra2, "& _ 
                "UltimaObra3, ImpEstructura1, ImpEstructura2, ImpEstructura3, ImpEstructura4, Imp"& _ 
                "Estructura5, ImpGenerales1, ImpGenerales2, ImpGenerales3, ImpGenerales4, ImpGene"& _ 
                "rales5, ImpGenerales6, ImpCopiaInsumos, ImpProceso, ImpBuscarEnArchivo, ImpFijar"& _ 
                "Archivo, ImpArchivo, ObraReciente1, ObraReciente2, ObraReciente3, ObraReciente4,"& _ 
                " ObraReciente5, ObraReciente6, ObraReciente7, ObraReciente8, ObraReciente9, Obra"& _ 
                "Reciente10, ImpresionAPV, LetraEnc, LetraDet, EstiloEnc, EstiloDet, TamañoEnc, T"& _ 
                "amañoDet, MargenSup, MargenInf, TxTTrabajo, TxTAdministracion, TxTUtilidad, TxTI"& _ 
                "VA, TxTJornadaDiaria, FCAS, Moneda_P, Moneda_S FROM Configuracion"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.ConfiguracionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.ConfiguracionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.ConfiguracionDataTable = New MasterAPVDataSet.ConfiguracionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.ConfiguracionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Configuracion")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Obra As String,  _
                    ByVal LeydelTrabajo As Global.System.Nullable(Of Double),  _
                    ByVal Administracion As Global.System.Nullable(Of Double),  _
                    ByVal DigitosRendimiento As Global.System.Nullable(Of Double),  _
                    ByVal Rendimiento As Global.System.Nullable(Of Double),  _
                    ByVal Utilidad As Global.System.Nullable(Of Double),  _
                    ByVal ImpuestoVentas As Global.System.Nullable(Of Double),  _
                    ByVal CantidadDePartida As Global.System.Nullable(Of Double),  _
                    ByVal CantidadDelAnalisis As Global.System.Nullable(Of Double),  _
                    ByVal TipoImpuestoCargado As Global.System.Nullable(Of Double),  _
                    ByVal DividirMateriales As String,  _
                    ByVal AfectanPrestaciones As String,  _
                    ByVal BaseMaterialesUsar As String,  _
                    ByVal MesMaterialesUsar As Global.System.Nullable(Of Double),  _
                    ByVal BaseEquiposUsar As String,  _
                    ByVal MesEquiposUsar As Global.System.Nullable(Of Double),  _
                    ByVal BaseManoObraUsar As String,  _
                    ByVal MesManoObraUsar As Global.System.Nullable(Of Double),  _
                    ByVal TipoRendimiento As String,  _
                    ByVal HorasJornadaDiaria As Global.System.Nullable(Of Double),  _
                    ByVal TipoImpresora As String,  _
                    ByVal PreciosDistintosACalculados As String,  _
                    ByVal PorcentajeEnAnalisis As String,  _
                    ByVal CodigoInsumosEnAnalisis As String,  _
                    ByVal MonedaUtilizar As String,  _
                    ByVal UltimaObra1 As String,  _
                    ByVal UltimaObra2 As String,  _
                    ByVal UltimaObra3 As String,  _
                    ByVal ImpEstructura1 As Global.System.Nullable(Of Double),  _
                    ByVal ImpEstructura2 As Global.System.Nullable(Of Double),  _
                    ByVal ImpEstructura3 As Global.System.Nullable(Of Double),  _
                    ByVal ImpEstructura4 As Global.System.Nullable(Of Double),  _
                    ByVal ImpEstructura5 As Global.System.Nullable(Of Double),  _
                    ByVal ImpGenerales1 As Global.System.Nullable(Of Double),  _
                    ByVal ImpGenerales2 As Global.System.Nullable(Of Double),  _
                    ByVal ImpGenerales3 As Global.System.Nullable(Of Double),  _
                    ByVal ImpGenerales4 As Global.System.Nullable(Of Double),  _
                    ByVal ImpGenerales5 As Global.System.Nullable(Of Double),  _
                    ByVal ImpGenerales6 As Global.System.Nullable(Of Double),  _
                    ByVal ImpCopiaInsumos As Global.System.Nullable(Of Double),  _
                    ByVal ImpProceso As Global.System.Nullable(Of Double),  _
                    ByVal ImpBuscarEnArchivo As Global.System.Nullable(Of Double),  _
                    ByVal ImpFijarArchivo As Global.System.Nullable(Of Double),  _
                    ByVal ImpArchivo As String,  _
                    ByVal ObraReciente1 As String,  _
                    ByVal ObraReciente2 As String,  _
                    ByVal ObraReciente3 As String,  _
                    ByVal ObraReciente4 As String,  _
                    ByVal ObraReciente5 As String,  _
                    ByVal ObraReciente6 As String,  _
                    ByVal ObraReciente7 As String,  _
                    ByVal ObraReciente8 As String,  _
                    ByVal ObraReciente9 As String,  _
                    ByVal ObraReciente10 As String,  _
                    ByVal ImpresionAPV As String,  _
                    ByVal LetraEnc As String,  _
                    ByVal LetraDet As String,  _
                    ByVal EstiloEnc As Global.System.Nullable(Of Double),  _
                    ByVal EstiloDet As Global.System.Nullable(Of Double),  _
                    ByVal TamañoEnc As Global.System.Nullable(Of Double),  _
                    ByVal TamañoDet As Global.System.Nullable(Of Double),  _
                    ByVal MargenSup As Global.System.Nullable(Of Double),  _
                    ByVal MargenInf As Global.System.Nullable(Of Double),  _
                    ByVal TxTTrabajo As String,  _
                    ByVal TxTAdministracion As String,  _
                    ByVal TxTUtilidad As String,  _
                    ByVal TxTIVA As String,  _
                    ByVal TxTJornadaDiaria As String,  _
                    ByVal FCAS As Global.System.Nullable(Of Double),  _
                    ByVal Moneda_P As String,  _
                    ByVal Moneda_S As String) As Integer
            If (Obra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Obra,String)
            End If
            If (LeydelTrabajo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LeydelTrabajo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Administracion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Administracion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DigitosRendimiento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DigitosRendimiento.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Rendimiento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Rendimiento.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Utilidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Utilidad.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ImpuestoVentas.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ImpuestoVentas.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CantidadDePartida.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CantidadDePartida.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (CantidadDelAnalisis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CantidadDelAnalisis.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (TipoImpuestoCargado.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(TipoImpuestoCargado.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DividirMateriales Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(DividirMateriales,String)
            End If
            If (AfectanPrestaciones Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(AfectanPrestaciones,String)
            End If
            If (BaseMaterialesUsar Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(BaseMaterialesUsar,String)
            End If
            If (MesMaterialesUsar.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(MesMaterialesUsar.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (BaseEquiposUsar Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(BaseEquiposUsar,String)
            End If
            If (MesEquiposUsar.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(MesEquiposUsar.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (BaseManoObraUsar Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(BaseManoObraUsar,String)
            End If
            If (MesManoObraUsar.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(MesManoObraUsar.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (TipoRendimiento Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(TipoRendimiento,String)
            End If
            If (HorasJornadaDiaria.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(HorasJornadaDiaria.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (TipoImpresora Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(TipoImpresora,String)
            End If
            If (PreciosDistintosACalculados Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PreciosDistintosACalculados,String)
            End If
            If (PorcentajeEnAnalisis Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PorcentajeEnAnalisis,String)
            End If
            If (CodigoInsumosEnAnalisis Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CodigoInsumosEnAnalisis,String)
            End If
            If (MonedaUtilizar Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(MonedaUtilizar,String)
            End If
            If (UltimaObra1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(UltimaObra1,String)
            End If
            If (UltimaObra2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(UltimaObra2,String)
            End If
            If (UltimaObra3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(UltimaObra3,String)
            End If
            If (ImpEstructura1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(ImpEstructura1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (ImpEstructura2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(ImpEstructura2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (ImpEstructura3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(ImpEstructura3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (ImpEstructura4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(ImpEstructura4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (ImpEstructura5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(ImpEstructura5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (ImpGenerales1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(ImpGenerales1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ImpGenerales2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(ImpGenerales2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (ImpGenerales3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(ImpGenerales3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (ImpGenerales4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(ImpGenerales4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (ImpGenerales5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(ImpGenerales5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (ImpGenerales6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(ImpGenerales6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (ImpCopiaInsumos.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(ImpCopiaInsumos.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (ImpProceso.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(ImpProceso.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (ImpBuscarEnArchivo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(ImpBuscarEnArchivo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (ImpFijarArchivo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(ImpFijarArchivo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (ImpArchivo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(ImpArchivo,String)
            End If
            If (ObraReciente1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(ObraReciente1,String)
            End If
            If (ObraReciente2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(ObraReciente2,String)
            End If
            If (ObraReciente3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(ObraReciente3,String)
            End If
            If (ObraReciente4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(ObraReciente4,String)
            End If
            If (ObraReciente5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(ObraReciente5,String)
            End If
            If (ObraReciente6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(ObraReciente6,String)
            End If
            If (ObraReciente7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(ObraReciente7,String)
            End If
            If (ObraReciente8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(ObraReciente8,String)
            End If
            If (ObraReciente9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(ObraReciente9,String)
            End If
            If (ObraReciente10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(ObraReciente10,String)
            End If
            If (ImpresionAPV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(ImpresionAPV,String)
            End If
            If (LetraEnc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(LetraEnc,String)
            End If
            If (LetraDet Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(LetraDet,String)
            End If
            If (EstiloEnc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(EstiloEnc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (EstiloDet.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(EstiloDet.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (TamañoEnc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(TamañoEnc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (TamañoDet.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(TamañoDet.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (MargenSup.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(MargenSup.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (MargenInf.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(MargenInf.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (TxTTrabajo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(TxTTrabajo,String)
            End If
            If (TxTAdministracion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(TxTAdministracion,String)
            End If
            If (TxTUtilidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(TxTUtilidad,String)
            End If
            If (TxTIVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(TxTIVA,String)
            End If
            If (TxTJornadaDiaria Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(TxTJornadaDiaria,String)
            End If
            If (FCAS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(FCAS.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Moneda_P Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(Moneda_P,String)
            End If
            If (Moneda_S Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(Moneda_S,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CostosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Costos"
            tableMapping.ColumnMappings.Add("Codigo_CAT_P", "Codigo_CAT_P")
            tableMapping.ColumnMappings.Add("Descripcion_CAT_P", "Descripcion_CAT_P")
            tableMapping.ColumnMappings.Add("Codigo_SCAT_P", "Codigo_SCAT_P")
            tableMapping.ColumnMappings.Add("Descripcion_SCAT_P", "Descripcion_SCAT_P")
            tableMapping.ColumnMappings.Add("Codigo_Renglon_P", "Codigo_Renglon_P")
            tableMapping.ColumnMappings.Add("Descripcion_Renglon_P", "Descripcion_Renglon_P")
            tableMapping.ColumnMappings.Add("Codigo_CAT_SEC", "Codigo_CAT_SEC")
            tableMapping.ColumnMappings.Add("Descripcion_CAT_SEC", "Descripcion_CAT_SEC")
            tableMapping.ColumnMappings.Add("Codigo_CAT_SEC1", "Codigo_CAT_SEC1")
            tableMapping.ColumnMappings.Add("Descripcion_CAT_SEC1", "Descripcion_CAT_SEC1")
            tableMapping.ColumnMappings.Add("Codigo_SCAT_SEC", "Codigo_SCAT_SEC")
            tableMapping.ColumnMappings.Add("Descripcion_SCAT_SEC", "Descripcion_SCAT_SEC")
            tableMapping.ColumnMappings.Add("Codigo_Renglon_S", "Codigo_Renglon_S")
            tableMapping.ColumnMappings.Add("Descripcion_Renglon_S", "Descripcion_Renglon_S")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Costos` (`Codigo_CAT_P`, `Descripcion_CAT_P`, `Codigo_SCAT_P`, `Desc"& _ 
                "ripcion_SCAT_P`, `Codigo_Renglon_P`, `Descripcion_Renglon_P`, `Codigo_CAT_SEC`, "& _ 
                "`Descripcion_CAT_SEC`, `Codigo_CAT_SEC1`, `Descripcion_CAT_SEC1`, `Codigo_SCAT_S"& _ 
                "EC`, `Descripcion_SCAT_SEC`, `Codigo_Renglon_S`, `Descripcion_Renglon_S`) VALUES"& _ 
                " (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo_CAT_P", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo_CAT_P", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion_CAT_P", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion_CAT_P", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo_SCAT_P", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo_SCAT_P", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion_SCAT_P", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion_SCAT_P", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo_Renglon_P", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo_Renglon_P", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion_Renglon_P", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion_Renglon_P", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo_CAT_SEC", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo_CAT_SEC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion_CAT_SEC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion_CAT_SEC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo_CAT_SEC1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo_CAT_SEC1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion_CAT_SEC1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion_CAT_SEC1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo_SCAT_SEC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo_SCAT_SEC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion_SCAT_SEC", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion_SCAT_SEC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo_Renglon_S", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo_Renglon_S", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion_Renglon_S", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion_Renglon_S", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Codigo_CAT_P, Descripcion_CAT_P, Codigo_SCAT_P, Descripcion_SCAT_P, Codigo"& _ 
                "_Renglon_P, Descripcion_Renglon_P, Codigo_CAT_SEC, Descripcion_CAT_SEC, Codigo_C"& _ 
                "AT_SEC1, Descripcion_CAT_SEC1, Codigo_SCAT_SEC, Descripcion_SCAT_SEC, Codigo_Ren"& _ 
                "glon_S, Descripcion_Renglon_S FROM Costos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.CostosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.CostosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.CostosDataTable = New MasterAPVDataSet.CostosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.CostosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Costos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Codigo_CAT_P As Global.System.Nullable(Of Double), ByVal Descripcion_CAT_P As String, ByVal Codigo_SCAT_P As Global.System.Nullable(Of Double), ByVal Descripcion_SCAT_P As String, ByVal Codigo_Renglon_P As Global.System.Nullable(Of Double), ByVal Descripcion_Renglon_P As String, ByVal Codigo_CAT_SEC As Global.System.Nullable(Of Double), ByVal Descripcion_CAT_SEC As String, ByVal Codigo_CAT_SEC1 As Global.System.Nullable(Of Double), ByVal Descripcion_CAT_SEC1 As String, ByVal Codigo_SCAT_SEC As String, ByVal Descripcion_SCAT_SEC As String, ByVal Codigo_Renglon_S As String, ByVal Descripcion_Renglon_S As String) As Integer
            If (Codigo_CAT_P.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Codigo_CAT_P.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Descripcion_CAT_P Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Descripcion_CAT_P,String)
            End If
            If (Codigo_SCAT_P.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Codigo_SCAT_P.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Descripcion_SCAT_P Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Descripcion_SCAT_P,String)
            End If
            If (Codigo_Renglon_P.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Codigo_Renglon_P.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Descripcion_Renglon_P Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Descripcion_Renglon_P,String)
            End If
            If (Codigo_CAT_SEC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Codigo_CAT_SEC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Descripcion_CAT_SEC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Descripcion_CAT_SEC,String)
            End If
            If (Codigo_CAT_SEC1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Codigo_CAT_SEC1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Descripcion_CAT_SEC1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Descripcion_CAT_SEC1,String)
            End If
            If (Codigo_SCAT_SEC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Codigo_SCAT_SEC,String)
            End If
            If (Descripcion_SCAT_SEC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Descripcion_SCAT_SEC,String)
            End If
            If (Codigo_Renglon_S Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Codigo_Renglon_S,String)
            End If
            If (Descripcion_Renglon_S Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Descripcion_Renglon_S,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EqpImpLTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EqpImpL"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("CodEqpLULO", "CodEqpLULO")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Suplidor", "Suplidor")
            tableMapping.ColumnMappings.Add("PrecioEqp", "PrecioEqp")
            tableMapping.ColumnMappings.Add("PrecioDia", "PrecioDia")
            tableMapping.ColumnMappings.Add("Depreciacion", "Depreciacion")
            tableMapping.ColumnMappings.Add("PrecioMes1", "PrecioMes1")
            tableMapping.ColumnMappings.Add("PrecioMes2", "PrecioMes2")
            tableMapping.ColumnMappings.Add("PrecioMes3", "PrecioMes3")
            tableMapping.ColumnMappings.Add("PrecioMes4", "PrecioMes4")
            tableMapping.ColumnMappings.Add("PrecioMes5", "PrecioMes5")
            tableMapping.ColumnMappings.Add("PrecioMes6", "PrecioMes6")
            tableMapping.ColumnMappings.Add("PrecioMes7", "PrecioMes7")
            tableMapping.ColumnMappings.Add("PrecioMes8", "PrecioMes8")
            tableMapping.ColumnMappings.Add("PrecioMes9", "PrecioMes9")
            tableMapping.ColumnMappings.Add("PrecioMes10", "PrecioMes10")
            tableMapping.ColumnMappings.Add("PrecioMes11", "PrecioMes11")
            tableMapping.ColumnMappings.Add("PrecioMes12", "PrecioMes12")
            tableMapping.ColumnMappings.Add("DeprecMes1", "DeprecMes1")
            tableMapping.ColumnMappings.Add("DeprecMes2", "DeprecMes2")
            tableMapping.ColumnMappings.Add("DeprecMes3", "DeprecMes3")
            tableMapping.ColumnMappings.Add("DeprecMes4", "DeprecMes4")
            tableMapping.ColumnMappings.Add("DeprecMes5", "DeprecMes5")
            tableMapping.ColumnMappings.Add("DeprecMes6", "DeprecMes6")
            tableMapping.ColumnMappings.Add("DeprecMes7", "DeprecMes7")
            tableMapping.ColumnMappings.Add("DeprecMes8", "DeprecMes8")
            tableMapping.ColumnMappings.Add("DeprecMes9", "DeprecMes9")
            tableMapping.ColumnMappings.Add("DeprecMes10", "DeprecMes10")
            tableMapping.ColumnMappings.Add("DeprecMes11", "DeprecMes11")
            tableMapping.ColumnMappings.Add("DeprecMes12", "DeprecMes12")
            tableMapping.ColumnMappings.Add("PrecioUnitario2daMoneda", "PrecioUnitario2daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes12daMoneda", "PrecioMes12daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes22daMoneda", "PrecioMes22daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes32daMoneda", "PrecioMes32daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes42daMoneda", "PrecioMes42daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes52daMoneda", "PrecioMes52daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes62daMoneda", "PrecioMes62daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes72daMoneda", "PrecioMes72daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes82daMoneda", "PrecioMes82daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes92daMoneda", "PrecioMes92daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes102daMoneda", "PrecioMes102daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes112daMoneda", "PrecioMes112daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes122daMoneda", "PrecioMes122daMoneda")
            tableMapping.ColumnMappings.Add("DiferenciaPrecio", "DiferenciaPrecio")
            tableMapping.ColumnMappings.Add("DiferenciaDepreciacion", "DiferenciaDepreciacion")
            tableMapping.ColumnMappings.Add("PorcentajeDiferencia", "PorcentajeDiferencia")
            tableMapping.ColumnMappings.Add("PorcentajeDepreciacion", "PorcentajeDepreciacion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `EqpImpL` (`ID`, `Descripcion`, `Codigo`, `CodEqpLULO`, `Unidad`, `Ti"& _ 
                "po`, `Fecha`, `Suplidor`, `PrecioEqp`, `PrecioDia`, `Depreciacion`, `PrecioMes1`"& _ 
                ", `PrecioMes2`, `PrecioMes3`, `PrecioMes4`, `PrecioMes5`, `PrecioMes6`, `PrecioM"& _ 
                "es7`, `PrecioMes8`, `PrecioMes9`, `PrecioMes10`, `PrecioMes11`, `PrecioMes12`, `"& _ 
                "DeprecMes1`, `DeprecMes2`, `DeprecMes3`, `DeprecMes4`, `DeprecMes5`, `DeprecMes6"& _ 
                "`, `DeprecMes7`, `DeprecMes8`, `DeprecMes9`, `DeprecMes10`, `DeprecMes11`, `Depr"& _ 
                "ecMes12`, `PrecioUnitario2daMoneda`, `PrecioMes12daMoneda`, `PrecioMes22daMoneda"& _ 
                "`, `PrecioMes32daMoneda`, `PrecioMes42daMoneda`, `PrecioMes52daMoneda`, `PrecioM"& _ 
                "es62daMoneda`, `PrecioMes72daMoneda`, `PrecioMes82daMoneda`, `PrecioMes92daMoned"& _ 
                "a`, `PrecioMes102daMoneda`, `PrecioMes112daMoneda`, `PrecioMes122daMoneda`, `Dif"& _ 
                "erenciaPrecio`, `DiferenciaDepreciacion`, `PorcentajeDiferencia`, `PorcentajeDep"& _ 
                "reciacion`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodEqpLULO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodEqpLULO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Suplidor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Suplidor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioEqp", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioEqp", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioDia", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioDia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Depreciacion", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Depreciacion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DiferenciaPrecio", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DiferenciaPrecio", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DiferenciaDepreciacion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DiferenciaDepreciacion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeDiferencia", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeDiferencia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeDepreciacion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeDepreciacion", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Descripcion, Codigo, CodEqpLULO, Unidad, Tipo, Fecha, Suplidor, Precio"& _ 
                "Eqp, PrecioDia, Depreciacion, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, Pr"& _ 
                "ecioMes5, PrecioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes"& _ 
                "11, PrecioMes12, DeprecMes1, DeprecMes2, DeprecMes3, DeprecMes4, DeprecMes5, Dep"& _ 
                "recMes6, DeprecMes7, DeprecMes8, DeprecMes9, DeprecMes10, DeprecMes11, DeprecMes"& _ 
                "12, PrecioUnitario2daMoneda, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes"& _ 
                "32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, Preci"& _ 
                "oMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, "& _ 
                "PrecioMes112daMoneda, PrecioMes122daMoneda, DiferenciaPrecio, DiferenciaDeprecia"& _ 
                "cion, PorcentajeDiferencia, PorcentajeDepreciacion FROM EqpImpL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.EqpImpLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.EqpImpLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.EqpImpLDataTable = New MasterAPVDataSet.EqpImpLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.EqpImpLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "EqpImpL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal Descripcion As String,  _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal CodEqpLULO As String,  _
                    ByVal Unidad As String,  _
                    ByVal Tipo As Global.System.Nullable(Of Double),  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal Suplidor As String,  _
                    ByVal PrecioEqp As Global.System.Nullable(Of Double),  _
                    ByVal PrecioDia As Global.System.Nullable(Of Double),  _
                    ByVal Depreciacion As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes1 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes2 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes3 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes4 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes5 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes6 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes7 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes8 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes9 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes10 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes11 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes12 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes1 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes2 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes3 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes4 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes5 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes6 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes7 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes8 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes9 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes10 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes11 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes12 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioUnitario2daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes122daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal DiferenciaPrecio As String,  _
                    ByVal DiferenciaDepreciacion As String,  _
                    ByVal PorcentajeDiferencia As String,  _
                    ByVal PorcentajeDepreciacion As String) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Descripcion,String)
            End If
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (CodEqpLULO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CodEqpLULO,String)
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Unidad,String)
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Tipo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Suplidor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Suplidor,String)
            End If
            If (PrecioEqp.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PrecioEqp.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PrecioDia.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PrecioDia.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Depreciacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Depreciacion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrecioMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PrecioMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PrecioMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrecioMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrecioMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PrecioMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PrecioMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(PrecioMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PrecioMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PrecioMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PrecioMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PrecioMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(DeprecMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(DeprecMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(DeprecMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(DeprecMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(DeprecMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(DeprecMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(DeprecMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(DeprecMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DeprecMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(DeprecMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(DeprecMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(DeprecMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (PrecioUnitario2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(PrecioUnitario2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(PrecioMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(PrecioMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(PrecioMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(PrecioMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(PrecioMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(PrecioMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(PrecioMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(PrecioMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(PrecioMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(PrecioMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(PrecioMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(PrecioMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (DiferenciaPrecio Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(DiferenciaPrecio,String)
            End If
            If (DiferenciaDepreciacion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(DiferenciaDepreciacion,String)
            End If
            If (PorcentajeDiferencia Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(PorcentajeDiferencia,String)
            End If
            If (PorcentajeDepreciacion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(PorcentajeDepreciacion,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EqpImpLBsSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EqpImpLBsS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("CodEqpLULO", "CodEqpLULO")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Suplidor", "Suplidor")
            tableMapping.ColumnMappings.Add("PrecioEqp", "PrecioEqp")
            tableMapping.ColumnMappings.Add("PrecioDia", "PrecioDia")
            tableMapping.ColumnMappings.Add("Depreciacion", "Depreciacion")
            tableMapping.ColumnMappings.Add("PrecioMes1", "PrecioMes1")
            tableMapping.ColumnMappings.Add("PrecioMes2", "PrecioMes2")
            tableMapping.ColumnMappings.Add("PrecioMes3", "PrecioMes3")
            tableMapping.ColumnMappings.Add("PrecioMes4", "PrecioMes4")
            tableMapping.ColumnMappings.Add("PrecioMes5", "PrecioMes5")
            tableMapping.ColumnMappings.Add("PrecioMes6", "PrecioMes6")
            tableMapping.ColumnMappings.Add("PrecioMes7", "PrecioMes7")
            tableMapping.ColumnMappings.Add("PrecioMes8", "PrecioMes8")
            tableMapping.ColumnMappings.Add("PrecioMes9", "PrecioMes9")
            tableMapping.ColumnMappings.Add("PrecioMes10", "PrecioMes10")
            tableMapping.ColumnMappings.Add("PrecioMes11", "PrecioMes11")
            tableMapping.ColumnMappings.Add("PrecioMes12", "PrecioMes12")
            tableMapping.ColumnMappings.Add("DeprecMes1", "DeprecMes1")
            tableMapping.ColumnMappings.Add("DeprecMes2", "DeprecMes2")
            tableMapping.ColumnMappings.Add("DeprecMes3", "DeprecMes3")
            tableMapping.ColumnMappings.Add("DeprecMes4", "DeprecMes4")
            tableMapping.ColumnMappings.Add("DeprecMes5", "DeprecMes5")
            tableMapping.ColumnMappings.Add("DeprecMes6", "DeprecMes6")
            tableMapping.ColumnMappings.Add("DeprecMes7", "DeprecMes7")
            tableMapping.ColumnMappings.Add("DeprecMes8", "DeprecMes8")
            tableMapping.ColumnMappings.Add("DeprecMes9", "DeprecMes9")
            tableMapping.ColumnMappings.Add("DeprecMes10", "DeprecMes10")
            tableMapping.ColumnMappings.Add("DeprecMes11", "DeprecMes11")
            tableMapping.ColumnMappings.Add("DeprecMes12", "DeprecMes12")
            tableMapping.ColumnMappings.Add("PrecioUnitario2daMoneda", "PrecioUnitario2daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes12daMoneda", "PrecioMes12daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes22daMoneda", "PrecioMes22daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes32daMoneda", "PrecioMes32daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes42daMoneda", "PrecioMes42daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes52daMoneda", "PrecioMes52daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes62daMoneda", "PrecioMes62daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes72daMoneda", "PrecioMes72daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes82daMoneda", "PrecioMes82daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes92daMoneda", "PrecioMes92daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes102daMoneda", "PrecioMes102daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes112daMoneda", "PrecioMes112daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes122daMoneda", "PrecioMes122daMoneda")
            tableMapping.ColumnMappings.Add("DiferenciaPrecio", "DiferenciaPrecio")
            tableMapping.ColumnMappings.Add("DiferenciaDepreciacion", "DiferenciaDepreciacion")
            tableMapping.ColumnMappings.Add("PorcentajeDiferencia", "PorcentajeDiferencia")
            tableMapping.ColumnMappings.Add("PorcentajeDepreciacion", "PorcentajeDepreciacion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `EqpImpLBsS` (`ID`, `Descripcion`, `Codigo`, `CodEqpLULO`, `Unidad`, "& _ 
                "`Tipo`, `Fecha`, `Suplidor`, `PrecioEqp`, `PrecioDia`, `Depreciacion`, `PrecioMe"& _ 
                "s1`, `PrecioMes2`, `PrecioMes3`, `PrecioMes4`, `PrecioMes5`, `PrecioMes6`, `Prec"& _ 
                "ioMes7`, `PrecioMes8`, `PrecioMes9`, `PrecioMes10`, `PrecioMes11`, `PrecioMes12`"& _ 
                ", `DeprecMes1`, `DeprecMes2`, `DeprecMes3`, `DeprecMes4`, `DeprecMes5`, `DeprecM"& _ 
                "es6`, `DeprecMes7`, `DeprecMes8`, `DeprecMes9`, `DeprecMes10`, `DeprecMes11`, `D"& _ 
                "eprecMes12`, `PrecioUnitario2daMoneda`, `PrecioMes12daMoneda`, `PrecioMes22daMon"& _ 
                "eda`, `PrecioMes32daMoneda`, `PrecioMes42daMoneda`, `PrecioMes52daMoneda`, `Prec"& _ 
                "ioMes62daMoneda`, `PrecioMes72daMoneda`, `PrecioMes82daMoneda`, `PrecioMes92daMo"& _ 
                "neda`, `PrecioMes102daMoneda`, `PrecioMes112daMoneda`, `PrecioMes122daMoneda`, `"& _ 
                "DiferenciaPrecio`, `DiferenciaDepreciacion`, `PorcentajeDiferencia`, `Porcentaje"& _ 
                "Depreciacion`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodEqpLULO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodEqpLULO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Suplidor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Suplidor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioEqp", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioEqp", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioDia", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioDia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Depreciacion", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Depreciacion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DiferenciaPrecio", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DiferenciaPrecio", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DiferenciaDepreciacion", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DiferenciaDepreciacion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeDiferencia", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeDiferencia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeDepreciacion", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeDepreciacion", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Descripcion, Codigo, CodEqpLULO, Unidad, Tipo, Fecha, Suplidor, Precio"& _ 
                "Eqp, PrecioDia, Depreciacion, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, Pr"& _ 
                "ecioMes5, PrecioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes"& _ 
                "11, PrecioMes12, DeprecMes1, DeprecMes2, DeprecMes3, DeprecMes4, DeprecMes5, Dep"& _ 
                "recMes6, DeprecMes7, DeprecMes8, DeprecMes9, DeprecMes10, DeprecMes11, DeprecMes"& _ 
                "12, PrecioUnitario2daMoneda, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes"& _ 
                "32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, Preci"& _ 
                "oMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, "& _ 
                "PrecioMes112daMoneda, PrecioMes122daMoneda, DiferenciaPrecio, DiferenciaDeprecia"& _ 
                "cion, PorcentajeDiferencia, PorcentajeDepreciacion FROM EqpImpLBsS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.EqpImpLBsSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.EqpImpLBsSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.EqpImpLBsSDataTable = New MasterAPVDataSet.EqpImpLBsSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.EqpImpLBsSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "EqpImpLBsS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal Descripcion As String,  _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal CodEqpLULO As String,  _
                    ByVal Unidad As String,  _
                    ByVal Tipo As Global.System.Nullable(Of Double),  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal Suplidor As String,  _
                    ByVal PrecioEqp As Global.System.Nullable(Of Double),  _
                    ByVal PrecioDia As Global.System.Nullable(Of Double),  _
                    ByVal Depreciacion As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes1 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes2 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes3 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes4 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes5 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes6 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes7 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes8 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes9 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes10 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes11 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes12 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes1 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes2 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes3 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes4 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes5 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes6 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes7 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes8 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes9 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes10 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes11 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes12 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioUnitario2daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes122daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal DiferenciaPrecio As Global.System.Nullable(Of Double),  _
                    ByVal DiferenciaDepreciacion As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeDiferencia As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeDepreciacion As Global.System.Nullable(Of Double)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Descripcion,String)
            End If
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (CodEqpLULO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CodEqpLULO,String)
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Unidad,String)
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Tipo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Suplidor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Suplidor,String)
            End If
            If (PrecioEqp.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PrecioEqp.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PrecioDia.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PrecioDia.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Depreciacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Depreciacion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrecioMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PrecioMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PrecioMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrecioMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrecioMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PrecioMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PrecioMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(PrecioMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PrecioMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PrecioMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PrecioMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PrecioMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(DeprecMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(DeprecMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(DeprecMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(DeprecMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(DeprecMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(DeprecMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(DeprecMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(DeprecMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DeprecMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(DeprecMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(DeprecMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(DeprecMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (PrecioUnitario2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(PrecioUnitario2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(PrecioMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(PrecioMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(PrecioMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(PrecioMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(PrecioMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(PrecioMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(PrecioMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(PrecioMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(PrecioMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(PrecioMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(PrecioMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(PrecioMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (DiferenciaPrecio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(DiferenciaPrecio.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (DiferenciaDepreciacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(DiferenciaDepreciacion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeDiferencia.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(PorcentajeDiferencia.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeDepreciacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(PorcentajeDepreciacion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EquipoCompTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EquipoComp"
            tableMapping.ColumnMappings.Add("CodInterno", "CodInterno")
            tableMapping.ColumnMappings.Add("Lista", "Lista")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Depreciacion", "Depreciacion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `EquipoComp` (`CodInterno`, `Lista`, `ID`, `Codigo`, `Descripcion`, `"& _ 
                "Unidad`, `Cantidad`, `Precio`, `Depreciacion`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodInterno", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodInterno", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Lista", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Lista", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cantidad", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cantidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Precio", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Precio", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Depreciacion", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Depreciacion", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CodInterno, Lista, ID, Codigo, Descripcion, Unidad, Cantidad, Precio, Depr"& _ 
                "eciacion FROM EquipoComp"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.EquipoCompDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.EquipoCompDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.EquipoCompDataTable = New MasterAPVDataSet.EquipoCompDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.EquipoCompDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "EquipoComp")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CodInterno As Global.System.Nullable(Of Double), ByVal Lista As Global.System.Nullable(Of Double), ByVal ID As Global.System.Nullable(Of Double), ByVal Codigo As Global.System.Nullable(Of Double), ByVal Descripcion As String, ByVal Unidad As String, ByVal Cantidad As Global.System.Nullable(Of Double), ByVal Precio As Global.System.Nullable(Of Double), ByVal Depreciacion As Global.System.Nullable(Of Double)) As Integer
            If (CodInterno.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CodInterno.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Lista.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Lista.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Descripcion,String)
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Unidad,String)
            End If
            If (Cantidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Cantidad.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Precio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Precio.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Depreciacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Depreciacion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IndicesPACTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IndicesPAC"
            tableMapping.ColumnMappings.Add("GRUPO", "GRUPO")
            tableMapping.ColumnMappings.Add("AGRUPACION", "AGRUPACION")
            tableMapping.ColumnMappings.Add("AÑO", "AÑO")
            tableMapping.ColumnMappings.Add("IDENTIFICACION", "IDENTIFICACION")
            tableMapping.ColumnMappings.Add("ORDEN", "ORDEN")
            tableMapping.ColumnMappings.Add("MES1", "MES1")
            tableMapping.ColumnMappings.Add("MES2", "MES2")
            tableMapping.ColumnMappings.Add("MES3", "MES3")
            tableMapping.ColumnMappings.Add("MES4", "MES4")
            tableMapping.ColumnMappings.Add("MES5", "MES5")
            tableMapping.ColumnMappings.Add("MES6", "MES6")
            tableMapping.ColumnMappings.Add("MES7", "MES7")
            tableMapping.ColumnMappings.Add("MES8", "MES8")
            tableMapping.ColumnMappings.Add("MES9", "MES9")
            tableMapping.ColumnMappings.Add("MES10", "MES10")
            tableMapping.ColumnMappings.Add("MES11", "MES11")
            tableMapping.ColumnMappings.Add("MES12", "MES12")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `IndicesPAC` (`GRUPO`, `AGRUPACION`, `AÑO`, `IDENTIFICACION`, `ORDEN`"& _ 
                ", `MES1`, `MES2`, `MES3`, `MES4`, `MES5`, `MES6`, `MES7`, `MES8`, `MES9`, `MES10"& _ 
                "`, `MES11`, `MES12`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("GRUPO", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "GRUPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AGRUPACION", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AGRUPACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AÑO", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AÑO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IDENTIFICACION", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IDENTIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDEN", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDEN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MES12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MES12", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GRUPO, AGRUPACION, AÑO, IDENTIFICACION, ORDEN, MES1, MES2, MES3, MES4, MES"& _ 
                "5, MES6, MES7, MES8, MES9, MES10, MES11, MES12 FROM IndicesPAC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.IndicesPACDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.IndicesPACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.IndicesPACDataTable = New MasterAPVDataSet.IndicesPACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.IndicesPACDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "IndicesPAC")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal GRUPO As Global.System.Nullable(Of Double),  _
                    ByVal AGRUPACION As String,  _
                    ByVal AÑO As Global.System.Nullable(Of Double),  _
                    ByVal IDENTIFICACION As String,  _
                    ByVal ORDEN As Global.System.Nullable(Of Double),  _
                    ByVal MES1 As Global.System.Nullable(Of Double),  _
                    ByVal MES2 As Global.System.Nullable(Of Double),  _
                    ByVal MES3 As Global.System.Nullable(Of Double),  _
                    ByVal MES4 As Global.System.Nullable(Of Double),  _
                    ByVal MES5 As Global.System.Nullable(Of Double),  _
                    ByVal MES6 As Global.System.Nullable(Of Double),  _
                    ByVal MES7 As Global.System.Nullable(Of Double),  _
                    ByVal MES8 As Global.System.Nullable(Of Double),  _
                    ByVal MES9 As Global.System.Nullable(Of Double),  _
                    ByVal MES10 As Global.System.Nullable(Of Double),  _
                    ByVal MES11 As Global.System.Nullable(Of Double),  _
                    ByVal MES12 As Global.System.Nullable(Of Double)) As Integer
            If (GRUPO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(GRUPO.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (AGRUPACION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AGRUPACION,String)
            End If
            If (AÑO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(AÑO.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IDENTIFICACION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IDENTIFICACION,String)
            End If
            If (ORDEN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ORDEN.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MES1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MES1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MES2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MES2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (MES3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MES3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (MES4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MES4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (MES5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MES5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (MES6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(MES6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (MES7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(MES7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MES8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MES8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (MES9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(MES9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (MES10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(MES10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (MES11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(MES11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (MES12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(MES12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ListaEqpTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ListaEqp"
            tableMapping.ColumnMappings.Add("ListName", "ListName")
            tableMapping.ColumnMappings.Add("ListDate", "ListDate")
            tableMapping.ColumnMappings.Add("ListDes", "ListDes")
            tableMapping.ColumnMappings.Add("DBName", "DBName")
            tableMapping.ColumnMappings.Add("DBPath", "DBPath")
            tableMapping.ColumnMappings.Add("TableN", "TableN")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ListaEqp` (`ListName`, `ListDate`, `ListDes`, `DBName`, `DBPath`, `T"& _ 
                "ableN`) VALUES (?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListDate", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListDes", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListDes", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBPath", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBPath", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TableN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TableN", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ListName, ListDate, ListDes, DBName, DBPath, TableN FROM ListaEqp"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.ListaEqpDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.ListaEqpDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.ListaEqpDataTable = New MasterAPVDataSet.ListaEqpDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.ListaEqpDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ListaEqp")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ListName As String, ByVal ListDate As Global.System.Nullable(Of Date), ByVal ListDes As String, ByVal DBName As String, ByVal DBPath As String, ByVal TableN As String) As Integer
            If (ListName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ListName,String)
            End If
            If (ListDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ListDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ListDes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ListDes,String)
            End If
            If (DBName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DBName,String)
            End If
            If (DBPath Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DBPath,String)
            End If
            If (TableN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TableN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ListaMatTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ListaMat"
            tableMapping.ColumnMappings.Add("ListName", "ListName")
            tableMapping.ColumnMappings.Add("ListDate", "ListDate")
            tableMapping.ColumnMappings.Add("ListDes", "ListDes")
            tableMapping.ColumnMappings.Add("DBName", "DBName")
            tableMapping.ColumnMappings.Add("DBPath", "DBPath")
            tableMapping.ColumnMappings.Add("TableN", "TableN")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ListaMat` (`ListName`, `ListDate`, `ListDes`, `DBName`, `DBPath`, `T"& _ 
                "ableN`) VALUES (?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListDate", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListDes", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListDes", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBPath", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBPath", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TableN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TableN", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ListName, ListDate, ListDes, DBName, DBPath, TableN FROM ListaMat"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.ListaMatDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.ListaMatDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.ListaMatDataTable = New MasterAPVDataSet.ListaMatDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.ListaMatDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ListaMat")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ListName As String, ByVal ListDate As Global.System.Nullable(Of Date), ByVal ListDes As String, ByVal DBName As String, ByVal DBPath As String, ByVal TableN As String) As Integer
            If (ListName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ListName,String)
            End If
            If (ListDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ListDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ListDes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ListDes,String)
            End If
            If (DBName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DBName,String)
            End If
            If (DBPath Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DBPath,String)
            End If
            If (TableN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TableN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ListaMdOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ListaMdO"
            tableMapping.ColumnMappings.Add("ListName", "ListName")
            tableMapping.ColumnMappings.Add("ListDate", "ListDate")
            tableMapping.ColumnMappings.Add("ListDes", "ListDes")
            tableMapping.ColumnMappings.Add("DBName", "DBName")
            tableMapping.ColumnMappings.Add("DBPath", "DBPath")
            tableMapping.ColumnMappings.Add("TableN", "TableN")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ListaMdO` (`ListName`, `ListDate`, `ListDes`, `DBName`, `DBPath`, `T"& _ 
                "ableN`) VALUES (?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListDate", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListDes", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListDes", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBPath", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBPath", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TableN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TableN", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ListName, ListDate, ListDes, DBName, DBPath, TableN FROM ListaMdO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.ListaMdODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.ListaMdODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.ListaMdODataTable = New MasterAPVDataSet.ListaMdODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.ListaMdODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ListaMdO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ListName As String, ByVal ListDate As Global.System.Nullable(Of Date), ByVal ListDes As String, ByVal DBName As String, ByVal DBPath As String, ByVal TableN As String) As Integer
            If (ListName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ListName,String)
            End If
            If (ListDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ListDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ListDes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ListDes,String)
            End If
            If (DBName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DBName,String)
            End If
            If (DBPath Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DBPath,String)
            End If
            If (TableN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TableN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ListaTranTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ListaTran"
            tableMapping.ColumnMappings.Add("ListName", "ListName")
            tableMapping.ColumnMappings.Add("ListDate", "ListDate")
            tableMapping.ColumnMappings.Add("ListDes", "ListDes")
            tableMapping.ColumnMappings.Add("DBName", "DBName")
            tableMapping.ColumnMappings.Add("DBPath", "DBPath")
            tableMapping.ColumnMappings.Add("TableN", "TableN")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ListaTran` (`ListName`, `ListDate`, `ListDes`, `DBName`, `DBPath`, `"& _ 
                "TableN`) VALUES (?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListDate", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ListDes", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ListDes", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBPath", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DBPath", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TableN", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TableN", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ListName, ListDate, ListDes, DBName, DBPath, TableN FROM ListaTran"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.ListaTranDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.ListaTranDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.ListaTranDataTable = New MasterAPVDataSet.ListaTranDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.ListaTranDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ListaTran")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ListName As String, ByVal ListDate As Global.System.Nullable(Of Date), ByVal ListDes As String, ByVal DBName As String, ByVal DBPath As String, ByVal TableN As String) As Integer
            If (ListName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ListName,String)
            End If
            If (ListDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ListDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ListDes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ListDes,String)
            End If
            If (DBName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DBName,String)
            End If
            If (DBPath Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DBPath,String)
            End If
            If (TableN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TableN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MasterEqpTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MasterEqp"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Lista", "Lista")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Depreciacion", "Depreciacion")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Suplidor", "Suplidor")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("PrecioMes1", "PrecioMes1")
            tableMapping.ColumnMappings.Add("PrecioMes2", "PrecioMes2")
            tableMapping.ColumnMappings.Add("PrecioMes3", "PrecioMes3")
            tableMapping.ColumnMappings.Add("PrecioMes4", "PrecioMes4")
            tableMapping.ColumnMappings.Add("PrecioMes5", "PrecioMes5")
            tableMapping.ColumnMappings.Add("PrecioMes6", "PrecioMes6")
            tableMapping.ColumnMappings.Add("PrecioMes7", "PrecioMes7")
            tableMapping.ColumnMappings.Add("PrecioMes8", "PrecioMes8")
            tableMapping.ColumnMappings.Add("PrecioMes9", "PrecioMes9")
            tableMapping.ColumnMappings.Add("PrecioMes10", "PrecioMes10")
            tableMapping.ColumnMappings.Add("PrecioMes11", "PrecioMes11")
            tableMapping.ColumnMappings.Add("PrecioMes12", "PrecioMes12")
            tableMapping.ColumnMappings.Add("DeprecMes1", "DeprecMes1")
            tableMapping.ColumnMappings.Add("DeprecMes2", "DeprecMes2")
            tableMapping.ColumnMappings.Add("DeprecMes3", "DeprecMes3")
            tableMapping.ColumnMappings.Add("DeprecMes4", "DeprecMes4")
            tableMapping.ColumnMappings.Add("DeprecMes5", "DeprecMes5")
            tableMapping.ColumnMappings.Add("DeprecMes6", "DeprecMes6")
            tableMapping.ColumnMappings.Add("DeprecMes7", "DeprecMes7")
            tableMapping.ColumnMappings.Add("DeprecMes8", "DeprecMes8")
            tableMapping.ColumnMappings.Add("DeprecMes9", "DeprecMes9")
            tableMapping.ColumnMappings.Add("DeprecMes10", "DeprecMes10")
            tableMapping.ColumnMappings.Add("DeprecMes11", "DeprecMes11")
            tableMapping.ColumnMappings.Add("DeprecMes12", "DeprecMes12")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MasterEqp` (`Codigo`, `Lista`, `ID`, `Descripcion`, `Unidad`, `Preci"& _ 
                "o`, `Depreciacion`, `Fecha`, `Suplidor`, `Tipo`, `PrecioMes1`, `PrecioMes2`, `Pr"& _ 
                "ecioMes3`, `PrecioMes4`, `PrecioMes5`, `PrecioMes6`, `PrecioMes7`, `PrecioMes8`,"& _ 
                " `PrecioMes9`, `PrecioMes10`, `PrecioMes11`, `PrecioMes12`, `DeprecMes1`, `Depre"& _ 
                "cMes2`, `DeprecMes3`, `DeprecMes4`, `DeprecMes5`, `DeprecMes6`, `DeprecMes7`, `D"& _ 
                "eprecMes8`, `DeprecMes9`, `DeprecMes10`, `DeprecMes11`, `DeprecMes12`) VALUES (?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Lista", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Lista", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Precio", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Precio", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Depreciacion", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Depreciacion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Suplidor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Suplidor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DeprecMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DeprecMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Codigo, Lista, ID, Descripcion, Unidad, Precio, Depreciacion, Fecha, Supli"& _ 
                "dor, Tipo, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes"& _ 
                "6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, De"& _ 
                "precMes1, DeprecMes2, DeprecMes3, DeprecMes4, DeprecMes5, DeprecMes6, DeprecMes7"& _ 
                ", DeprecMes8, DeprecMes9, DeprecMes10, DeprecMes11, DeprecMes12 FROM MasterEqp"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MasterEqpDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MasterEqpDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MasterEqpDataTable = New MasterAPVDataSet.MasterEqpDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.MasterEqpDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MasterEqp")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal Lista As Global.System.Nullable(Of Double),  _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal Descripcion As String,  _
                    ByVal Unidad As String,  _
                    ByVal Precio As Global.System.Nullable(Of Double),  _
                    ByVal Depreciacion As Global.System.Nullable(Of Double),  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal Suplidor As String,  _
                    ByVal Tipo As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes1 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes2 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes3 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes4 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes5 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes6 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes7 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes8 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes9 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes10 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes11 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes12 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes1 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes2 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes3 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes4 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes5 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes6 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes7 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes8 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes9 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes10 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes11 As Global.System.Nullable(Of Double),  _
                    ByVal DeprecMes12 As Global.System.Nullable(Of Double)) As Integer
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Lista.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Lista.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Descripcion,String)
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Unidad,String)
            End If
            If (Precio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Precio.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Depreciacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Depreciacion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Suplidor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Suplidor,String)
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Tipo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PrecioMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrecioMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PrecioMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PrecioMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrecioMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrecioMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PrecioMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PrecioMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(PrecioMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PrecioMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PrecioMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PrecioMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(DeprecMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(DeprecMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(DeprecMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(DeprecMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(DeprecMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(DeprecMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(DeprecMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(DeprecMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(DeprecMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DeprecMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(DeprecMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (DeprecMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(DeprecMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MasterManoObraTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MasterManoObra"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Jornal", "Jornal")
            tableMapping.ColumnMappings.Add("Bono", "Bono")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("JornalMes1", "JornalMes1")
            tableMapping.ColumnMappings.Add("JornalMes2", "JornalMes2")
            tableMapping.ColumnMappings.Add("JornalMes3", "JornalMes3")
            tableMapping.ColumnMappings.Add("JornalMes4", "JornalMes4")
            tableMapping.ColumnMappings.Add("JornalMes5", "JornalMes5")
            tableMapping.ColumnMappings.Add("JornalMes6", "JornalMes6")
            tableMapping.ColumnMappings.Add("JornalMes7", "JornalMes7")
            tableMapping.ColumnMappings.Add("JornalMes8", "JornalMes8")
            tableMapping.ColumnMappings.Add("JornalMes9", "JornalMes9")
            tableMapping.ColumnMappings.Add("JornalMes10", "JornalMes10")
            tableMapping.ColumnMappings.Add("JornalMes11", "JornalMes11")
            tableMapping.ColumnMappings.Add("JornalMes12", "JornalMes12")
            tableMapping.ColumnMappings.Add("BonoMes1", "BonoMes1")
            tableMapping.ColumnMappings.Add("BonoMes2", "BonoMes2")
            tableMapping.ColumnMappings.Add("BonoMes3", "BonoMes3")
            tableMapping.ColumnMappings.Add("BonoMes4", "BonoMes4")
            tableMapping.ColumnMappings.Add("BonoMes5", "BonoMes5")
            tableMapping.ColumnMappings.Add("BonoMes6", "BonoMes6")
            tableMapping.ColumnMappings.Add("BonoMes7", "BonoMes7")
            tableMapping.ColumnMappings.Add("BonoMes8", "BonoMes8")
            tableMapping.ColumnMappings.Add("BonoMes9", "BonoMes9")
            tableMapping.ColumnMappings.Add("BonoMes10", "BonoMes10")
            tableMapping.ColumnMappings.Add("BonoMes11", "BonoMes11")
            tableMapping.ColumnMappings.Add("BonoMes12", "BonoMes12")
            tableMapping.ColumnMappings.Add("Jornal2daMoneda", "Jornal2daMoneda")
            tableMapping.ColumnMappings.Add("Bono2daMoneda", "Bono2daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes12daMoneda", "JornalMes12daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes22daMoneda", "JornalMes22daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes32daMoneda", "JornalMes32daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes42daMoneda", "JornalMes42daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes52daMoneda", "JornalMes52daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes62daMoneda", "JornalMes62daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes72daMoneda", "JornalMes72daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes82daMoneda", "JornalMes82daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes92daMoneda", "JornalMes92daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes102daMoneda", "JornalMes102daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes112daMoneda", "JornalMes112daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes122daMoneda", "JornalMes122daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes12daMoneda", "BonoMes12daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes22daMoneda", "BonoMes22daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes32daMoneda", "BonoMes32daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes42daMoneda", "BonoMes42daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes52daMoneda", "BonoMes52daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes62daMoneda", "BonoMes62daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes72daMoneda", "BonoMes72daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes82daMoneda", "BonoMes82daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes92daMoneda", "BonoMes92daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes102daMoneda", "BonoMes102daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes112daMoneda", "BonoMes112daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes122daMoneda", "BonoMes122daMoneda")
            tableMapping.ColumnMappings.Add("DiferenciaJornal", "DiferenciaJornal")
            tableMapping.ColumnMappings.Add("DiferenciaBono", "DiferenciaBono")
            tableMapping.ColumnMappings.Add("PorcentajeJornal", "PorcentajeJornal")
            tableMapping.ColumnMappings.Add("PorcentajeBono", "PorcentajeBono")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MasterManoObra` (`ID`, `Descripcion`, `Codigo`, `Unidad`, `Fecha`, `"& _ 
                "Jornal`, `Bono`, `Tipo`, `JornalMes1`, `JornalMes2`, `JornalMes3`, `JornalMes4`,"& _ 
                " `JornalMes5`, `JornalMes6`, `JornalMes7`, `JornalMes8`, `JornalMes9`, `JornalMe"& _ 
                "s10`, `JornalMes11`, `JornalMes12`, `BonoMes1`, `BonoMes2`, `BonoMes3`, `BonoMes"& _ 
                "4`, `BonoMes5`, `BonoMes6`, `BonoMes7`, `BonoMes8`, `BonoMes9`, `BonoMes10`, `Bo"& _ 
                "noMes11`, `BonoMes12`, `Jornal2daMoneda`, `Bono2daMoneda`, `JornalMes12daMoneda`"& _ 
                ", `JornalMes22daMoneda`, `JornalMes32daMoneda`, `JornalMes42daMoneda`, `JornalMe"& _ 
                "s52daMoneda`, `JornalMes62daMoneda`, `JornalMes72daMoneda`, `JornalMes82daMoneda"& _ 
                "`, `JornalMes92daMoneda`, `JornalMes102daMoneda`, `JornalMes112daMoneda`, `Jorna"& _ 
                "lMes122daMoneda`, `BonoMes12daMoneda`, `BonoMes22daMoneda`, `BonoMes32daMoneda`,"& _ 
                " `BonoMes42daMoneda`, `BonoMes52daMoneda`, `BonoMes62daMoneda`, `BonoMes72daMone"& _ 
                "da`, `BonoMes82daMoneda`, `BonoMes92daMoneda`, `BonoMes102daMoneda`, `BonoMes112"& _ 
                "daMoneda`, `BonoMes122daMoneda`, `DiferenciaJornal`, `DiferenciaBono`, `Porcenta"& _ 
                "jeJornal`, `PorcentajeBono`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Jornal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Jornal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Bono", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Bono", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Jornal2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Jornal2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Bono2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Bono2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DiferenciaJornal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DiferenciaJornal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DiferenciaBono", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DiferenciaBono", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeJornal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeJornal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeBono", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeBono", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Descripcion, Codigo, Unidad, Fecha, Jornal, Bono, Tipo, JornalMes1, Jo"& _ 
                "rnalMes2, JornalMes3, JornalMes4, JornalMes5, JornalMes6, JornalMes7, JornalMes8"& _ 
                ", JornalMes9, JornalMes10, JornalMes11, JornalMes12, BonoMes1, BonoMes2, BonoMes"& _ 
                "3, BonoMes4, BonoMes5, BonoMes6, BonoMes7, BonoMes8, BonoMes9, BonoMes10, BonoMe"& _ 
                "s11, BonoMes12, Jornal2daMoneda, Bono2daMoneda, JornalMes12daMoneda, JornalMes22"& _ 
                "daMoneda, JornalMes32daMoneda, JornalMes42daMoneda, JornalMes52daMoneda, JornalM"& _ 
                "es62daMoneda, JornalMes72daMoneda, JornalMes82daMoneda, JornalMes92daMoneda, Jor"& _ 
                "nalMes102daMoneda, JornalMes112daMoneda, JornalMes122daMoneda, BonoMes12daMoneda"& _ 
                ", BonoMes22daMoneda, BonoMes32daMoneda, BonoMes42daMoneda, BonoMes52daMoneda, Bo"& _ 
                "noMes62daMoneda, BonoMes72daMoneda, BonoMes82daMoneda, BonoMes92daMoneda, BonoMe"& _ 
                "s102daMoneda, BonoMes112daMoneda, BonoMes122daMoneda, DiferenciaJornal, Diferenc"& _ 
                "iaBono, PorcentajeJornal, PorcentajeBono FROM MasterManoObra"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MasterManoObraDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MasterManoObraDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MasterManoObraDataTable = New MasterAPVDataSet.MasterManoObraDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.MasterManoObraDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MasterManoObra")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal Descripcion As String,  _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal Unidad As String,  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal Jornal As Global.System.Nullable(Of Double),  _
                    ByVal Bono As Global.System.Nullable(Of Double),  _
                    ByVal Tipo As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes1 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes2 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes3 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes4 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes5 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes6 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes7 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes8 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes9 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes10 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes11 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes12 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes1 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes2 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes3 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes4 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes5 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes6 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes7 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes8 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes9 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes10 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes11 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes12 As Global.System.Nullable(Of Double),  _
                    ByVal Jornal2daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal Bono2daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes122daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes122daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal DiferenciaJornal As Global.System.Nullable(Of Double),  _
                    ByVal DiferenciaBono As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeJornal As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeBono As Global.System.Nullable(Of Double)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Descripcion,String)
            End If
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Unidad,String)
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Jornal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Jornal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Bono.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Bono.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Tipo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (JornalMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(JornalMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (JornalMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(JornalMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (JornalMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(JornalMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (JornalMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(JornalMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (JornalMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(JornalMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (JornalMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(JornalMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (JornalMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(JornalMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (JornalMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(JornalMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (JornalMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(JornalMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (JornalMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(JornalMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (JornalMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(JornalMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (JornalMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(JornalMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (BonoMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(BonoMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (BonoMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(BonoMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (BonoMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(BonoMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (BonoMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(BonoMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (BonoMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(BonoMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (BonoMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(BonoMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (BonoMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(BonoMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (BonoMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(BonoMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (BonoMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(BonoMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (BonoMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(BonoMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (BonoMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(BonoMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (BonoMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(BonoMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Jornal2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(Jornal2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Bono2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Bono2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (JornalMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(JornalMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (JornalMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(JornalMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (JornalMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(JornalMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (JornalMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(JornalMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (JornalMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(JornalMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (JornalMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(JornalMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (JornalMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(JornalMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (JornalMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(JornalMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (JornalMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(JornalMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (JornalMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(JornalMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (JornalMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(JornalMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (JornalMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(JornalMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (BonoMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(BonoMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (BonoMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(BonoMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (BonoMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(BonoMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (BonoMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(BonoMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (BonoMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(BonoMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (BonoMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(BonoMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (BonoMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(BonoMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (BonoMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(BonoMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (BonoMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(BonoMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (BonoMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(BonoMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (BonoMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(BonoMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (BonoMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(BonoMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (DiferenciaJornal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(DiferenciaJornal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (DiferenciaBono.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(DiferenciaBono.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeJornal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(PorcentajeJornal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeBono.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(PorcentajeBono.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MasterMaterialTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MasterMaterial"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Diferencia", "Diferencia")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("GrupoBCV", "GrupoBCV")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Suplidor", "Suplidor")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PrecioMes1", "PrecioMes1")
            tableMapping.ColumnMappings.Add("PrecioMes2", "PrecioMes2")
            tableMapping.ColumnMappings.Add("PrecioMes3", "PrecioMes3")
            tableMapping.ColumnMappings.Add("PrecioMes4", "PrecioMes4")
            tableMapping.ColumnMappings.Add("PrecioMes5", "PrecioMes5")
            tableMapping.ColumnMappings.Add("PrecioMes6", "PrecioMes6")
            tableMapping.ColumnMappings.Add("PrecioMes7", "PrecioMes7")
            tableMapping.ColumnMappings.Add("PrecioMes8", "PrecioMes8")
            tableMapping.ColumnMappings.Add("PrecioMes9", "PrecioMes9")
            tableMapping.ColumnMappings.Add("PrecioMes10", "PrecioMes10")
            tableMapping.ColumnMappings.Add("PrecioMes11", "PrecioMes11")
            tableMapping.ColumnMappings.Add("PrecioMes12", "PrecioMes12")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("PorcentajeDiferencia", "PorcentajeDiferencia")
            tableMapping.ColumnMappings.Add("PrecioMes12daMoneda", "PrecioMes12daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes22daMoneda", "PrecioMes22daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes32daMoneda", "PrecioMes32daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes42daMoneda", "PrecioMes42daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes52daMoneda", "PrecioMes52daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes62daMoneda", "PrecioMes62daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes72daMoneda", "PrecioMes72daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes82daMoneda", "PrecioMes82daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes92daMoneda", "PrecioMes92daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes102daMoneda", "PrecioMes102daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes112daMoneda", "PrecioMes112daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes122daMoneda", "PrecioMes122daMoneda")
            tableMapping.ColumnMappings.Add("PrecioUnitario2daMoneda", "PrecioUnitario2daMoneda")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MasterMaterial` (`Codigo`, `Descripcion`, `Diferencia`, `Fecha`, `Gr"& _ 
                "upoBCV`, `Unidad`, `Suplidor`, `Tipo`, `ID`, `PrecioMes1`, `PrecioMes2`, `Precio"& _ 
                "Mes3`, `PrecioMes4`, `PrecioMes5`, `PrecioMes6`, `PrecioMes7`, `PrecioMes8`, `Pr"& _ 
                "ecioMes9`, `PrecioMes10`, `PrecioMes11`, `PrecioMes12`, `PrecioUnitario`, `Porce"& _ 
                "ntajeDiferencia`, `PrecioMes12daMoneda`, `PrecioMes22daMoneda`, `PrecioMes32daMo"& _ 
                "neda`, `PrecioMes42daMoneda`, `PrecioMes52daMoneda`, `PrecioMes62daMoneda`, `Pre"& _ 
                "cioMes72daMoneda`, `PrecioMes82daMoneda`, `PrecioMes92daMoneda`, `PrecioMes102da"& _ 
                "Moneda`, `PrecioMes112daMoneda`, `PrecioMes122daMoneda`, `PrecioUnitario2daMoned"& _ 
                "a`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Diferencia", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Diferencia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("GrupoBCV", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "GrupoBCV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Suplidor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Suplidor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeDiferencia", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeDiferencia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Codigo, Descripcion, Diferencia, Fecha, GrupoBCV, Unidad, Suplidor, Tipo, "& _ 
                "ID, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes6, Prec"& _ 
                "ioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, PrecioUni"& _ 
                "tario, PorcentajeDiferencia, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes"& _ 
                "32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, Preci"& _ 
                "oMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, "& _ 
                "PrecioMes112daMoneda, PrecioMes122daMoneda, PrecioUnitario2daMoneda FROM MasterM"& _ 
                "aterial"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MasterMaterialDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MasterMaterialDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MasterMaterialDataTable = New MasterAPVDataSet.MasterMaterialDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.MasterMaterialDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MasterMaterial")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal Descripcion As String,  _
                    ByVal Diferencia As Global.System.Nullable(Of Double),  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal GrupoBCV As Global.System.Nullable(Of Double),  _
                    ByVal Unidad As String,  _
                    ByVal Suplidor As String,  _
                    ByVal Tipo As Global.System.Nullable(Of Double),  _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes1 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes2 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes3 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes4 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes5 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes6 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes7 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes8 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes9 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes10 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes11 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes12 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioUnitario As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeDiferencia As String,  _
                    ByVal PrecioMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes122daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioUnitario2daMoneda As Global.System.Nullable(Of Double)) As Integer
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Descripcion,String)
            End If
            If (Diferencia.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Diferencia.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (GrupoBCV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(GrupoBCV.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Unidad,String)
            End If
            If (Suplidor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Suplidor,String)
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Tipo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PrecioMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PrecioMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrecioMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PrecioMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PrecioMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrecioMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrecioMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PrecioMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PrecioMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(PrecioMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PrecioMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PrecioMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (PrecioUnitario.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PrecioUnitario.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeDiferencia Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PorcentajeDiferencia,String)
            End If
            If (PrecioMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PrecioMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(PrecioMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(PrecioMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(PrecioMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(PrecioMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(PrecioMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(PrecioMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(PrecioMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(PrecioMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(PrecioMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(PrecioMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(PrecioMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (PrecioUnitario2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(PrecioUnitario2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MasterPartBsSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MasterPartBsS"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("CodParL", "CodParL")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Descripcion1", "Descripcion1")
            tableMapping.ColumnMappings.Add("Descripcion2", "Descripcion2")
            tableMapping.ColumnMappings.Add("Descripcion3", "Descripcion3")
            tableMapping.ColumnMappings.Add("CodigoCovenin", "CodigoCovenin")
            tableMapping.ColumnMappings.Add("MiniDescripcion", "MiniDescripcion")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("CantridadPartida", "CantridadPartida")
            tableMapping.ColumnMappings.Add("Rendimiento", "Rendimiento")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("PrecioAdoptado", "PrecioAdoptado")
            tableMapping.ColumnMappings.Add("PrecioUnitario2Mon", "PrecioUnitario2Mon")
            tableMapping.ColumnMappings.Add("PrecioAdoptado2Mon", "PrecioAdoptado2Mon")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MasterPartBsS` (`Codigo`, `CodParL`, `ID`, `Descripcion1`, `Descripc"& _ 
                "ion2`, `Descripcion3`, `CodigoCovenin`, `MiniDescripcion`, `Fecha`, `CantridadPa"& _ 
                "rtida`, `Rendimiento`, `Unidad`, `PrecioUnitario`, `PrecioAdoptado`, `PrecioUnit"& _ 
                "ario2Mon`, `PrecioAdoptado2Mon`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodParL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodParL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodigoCovenin", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodigoCovenin", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MiniDescripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MiniDescripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CantridadPartida", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CantridadPartida", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Rendimiento", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Rendimiento", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioAdoptado", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioAdoptado", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario2Mon", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario2Mon", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioAdoptado2Mon", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioAdoptado2Mon", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Codigo, CodParL, ID, Descripcion1, Descripcion2, Descripcion3, CodigoCoven"& _ 
                "in, MiniDescripcion, Fecha, CantridadPartida, Rendimiento, Unidad, PrecioUnitari"& _ 
                "o, PrecioAdoptado, PrecioUnitario2Mon, PrecioAdoptado2Mon FROM MasterPartBsS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MasterPartBsSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MasterPartBsSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MasterPartBsSDataTable = New MasterAPVDataSet.MasterPartBsSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.MasterPartBsSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MasterPartBsS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal CodParL As String,  _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal Descripcion1 As String,  _
                    ByVal Descripcion2 As String,  _
                    ByVal Descripcion3 As String,  _
                    ByVal CodigoCovenin As String,  _
                    ByVal MiniDescripcion As String,  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal CantridadPartida As Global.System.Nullable(Of Double),  _
                    ByVal Rendimiento As Global.System.Nullable(Of Double),  _
                    ByVal Unidad As String,  _
                    ByVal PrecioUnitario As Global.System.Nullable(Of Double),  _
                    ByVal PrecioAdoptado As Global.System.Nullable(Of Double),  _
                    ByVal PrecioUnitario2Mon As Global.System.Nullable(Of Double),  _
                    ByVal PrecioAdoptado2Mon As Global.System.Nullable(Of Double)) As Integer
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CodParL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CodParL,String)
            End If
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Descripcion1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Descripcion1,String)
            End If
            If (Descripcion2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Descripcion2,String)
            End If
            If (Descripcion3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Descripcion3,String)
            End If
            If (CodigoCovenin Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CodigoCovenin,String)
            End If
            If (MiniDescripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MiniDescripcion,String)
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (CantridadPartida.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CantridadPartida.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Rendimiento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Rendimiento.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Unidad,String)
            End If
            If (PrecioUnitario.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PrecioUnitario.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PrecioAdoptado.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PrecioAdoptado.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrecioUnitario2Mon.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrecioUnitario2Mon.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrecioAdoptado2Mon.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrecioAdoptado2Mon.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MasterPartidasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MasterPartidas"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("CodParL", "CodParL")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Descripcion1", "Descripcion1")
            tableMapping.ColumnMappings.Add("Descripcion2", "Descripcion2")
            tableMapping.ColumnMappings.Add("Descripcion3", "Descripcion3")
            tableMapping.ColumnMappings.Add("CodigoCovenin", "CodigoCovenin")
            tableMapping.ColumnMappings.Add("MiniDescripcion", "MiniDescripcion")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("CantridadPartida", "CantridadPartida")
            tableMapping.ColumnMappings.Add("Rendimiento", "Rendimiento")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("PrecioAdoptado", "PrecioAdoptado")
            tableMapping.ColumnMappings.Add("PrecioUnitario2Mon", "PrecioUnitario2Mon")
            tableMapping.ColumnMappings.Add("PrecioAdoptado2Mon", "PrecioAdoptado2Mon")
            tableMapping.ColumnMappings.Add("F17", "F17")
            tableMapping.ColumnMappings.Add("F18", "F18")
            tableMapping.ColumnMappings.Add("F19", "F19")
            tableMapping.ColumnMappings.Add("F20", "F20")
            tableMapping.ColumnMappings.Add("F21", "F21")
            tableMapping.ColumnMappings.Add("F22", "F22")
            tableMapping.ColumnMappings.Add("F23", "F23")
            tableMapping.ColumnMappings.Add("F24", "F24")
            tableMapping.ColumnMappings.Add("F25", "F25")
            tableMapping.ColumnMappings.Add("F26", "F26")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MasterPartidas` (`Codigo`, `CodParL`, `ID`, `Descripcion1`, `Descrip"& _ 
                "cion2`, `Descripcion3`, `CodigoCovenin`, `MiniDescripcion`, `Fecha`, `CantridadP"& _ 
                "artida`, `Rendimiento`, `Unidad`, `PrecioUnitario`, `PrecioAdoptado`, `PrecioUni"& _ 
                "tario2Mon`, `PrecioAdoptado2Mon`, `F17`, `F18`, `F19`, `F20`, `F21`, `F22`, `F23"& _ 
                "`, `F24`, `F25`, `F26`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodParL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodParL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodigoCovenin", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodigoCovenin", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MiniDescripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MiniDescripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CantridadPartida", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CantridadPartida", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Rendimiento", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Rendimiento", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioAdoptado", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioAdoptado", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario2Mon", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario2Mon", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioAdoptado2Mon", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioAdoptado2Mon", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("F17", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "F17", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("F18", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "F18", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("F19", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "F19", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("F20", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "F20", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("F21", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "F21", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("F22", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "F22", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("F23", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "F23", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("F24", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "F24", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("F25", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "F25", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("F26", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "F26", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Codigo, CodParL, ID, Descripcion1, Descripcion2, Descripcion3, CodigoCoven"& _ 
                "in, MiniDescripcion, Fecha, CantridadPartida, Rendimiento, Unidad, PrecioUnitari"& _ 
                "o, PrecioAdoptado, PrecioUnitario2Mon, PrecioAdoptado2Mon, F17, F18, F19, F20, F"& _ 
                "21, F22, F23, F24, F25, F26 FROM MasterPartidas"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MasterPartidasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MasterPartidasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MasterPartidasDataTable = New MasterAPVDataSet.MasterPartidasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.MasterPartidasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MasterPartidas")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal CodParL As String,  _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal Descripcion1 As String,  _
                    ByVal Descripcion2 As String,  _
                    ByVal Descripcion3 As String,  _
                    ByVal CodigoCovenin As String,  _
                    ByVal MiniDescripcion As String,  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal CantridadPartida As Global.System.Nullable(Of Double),  _
                    ByVal Rendimiento As Global.System.Nullable(Of Double),  _
                    ByVal Unidad As String,  _
                    ByVal PrecioUnitario As Global.System.Nullable(Of Double),  _
                    ByVal PrecioAdoptado As Global.System.Nullable(Of Double),  _
                    ByVal PrecioUnitario2Mon As Global.System.Nullable(Of Double),  _
                    ByVal PrecioAdoptado2Mon As Global.System.Nullable(Of Double),  _
                    ByVal F17 As Global.System.Nullable(Of Double),  _
                    ByVal F18 As Global.System.Nullable(Of Double),  _
                    ByVal F19 As Global.System.Nullable(Of Double),  _
                    ByVal F20 As Global.System.Nullable(Of Double),  _
                    ByVal F21 As Global.System.Nullable(Of Double),  _
                    ByVal F22 As Global.System.Nullable(Of Double),  _
                    ByVal F23 As Global.System.Nullable(Of Double),  _
                    ByVal F24 As Global.System.Nullable(Of Double),  _
                    ByVal F25 As String,  _
                    ByVal F26 As String) As Integer
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CodParL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CodParL,String)
            End If
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Descripcion1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Descripcion1,String)
            End If
            If (Descripcion2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Descripcion2,String)
            End If
            If (Descripcion3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Descripcion3,String)
            End If
            If (CodigoCovenin Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CodigoCovenin,String)
            End If
            If (MiniDescripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MiniDescripcion,String)
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (CantridadPartida.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CantridadPartida.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Rendimiento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Rendimiento.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Unidad,String)
            End If
            If (PrecioUnitario.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PrecioUnitario.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PrecioAdoptado.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PrecioAdoptado.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrecioUnitario2Mon.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrecioUnitario2Mon.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrecioAdoptado2Mon.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrecioAdoptado2Mon.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (F17.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(F17.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (F18.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(F18.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (F19.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(F19.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (F20.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(F20.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (F21.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(F21.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (F22.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(F22.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (F23.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(F23.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (F24.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(F24.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (F25 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(F25,String)
            End If
            If (F26 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(F26,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class materialCompTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "materialComp"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Lista", "Lista")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("CodInterno", "CodInterno")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `materialComp` (`Codigo`, `Lista`, `ID`, `CodInterno`, `Descripcion`,"& _ 
                " `Unidad`, `Cantidad`, `Precio`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Lista", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Lista", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodInterno", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodInterno", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cantidad", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cantidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Precio", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Precio", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Codigo, Lista, ID, CodInterno, Descripcion, Unidad, Cantidad, Precio FROM "& _ 
                "materialComp"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.materialCompDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.materialCompDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.materialCompDataTable = New MasterAPVDataSet.materialCompDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.materialCompDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "materialComp")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Codigo As Global.System.Nullable(Of Double), ByVal Lista As Global.System.Nullable(Of Double), ByVal ID As Global.System.Nullable(Of Double), ByVal CodInterno As Global.System.Nullable(Of Double), ByVal Descripcion As String, ByVal Unidad As String, ByVal Cantidad As Global.System.Nullable(Of Double), ByVal Precio As Global.System.Nullable(Of Double)) As Integer
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Lista.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Lista.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (CodInterno.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CodInterno.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Descripcion,String)
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Unidad,String)
            End If
            If (Cantidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Cantidad.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Precio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Precio.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MatImpLTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MatImpL"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("CodMatL", "CodMatL")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Diferencia", "Diferencia")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("GrupoBCV", "GrupoBCV")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Suplidor", "Suplidor")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("PrecioMes1", "PrecioMes1")
            tableMapping.ColumnMappings.Add("PrecioMes2", "PrecioMes2")
            tableMapping.ColumnMappings.Add("PrecioMes3", "PrecioMes3")
            tableMapping.ColumnMappings.Add("PrecioMes4", "PrecioMes4")
            tableMapping.ColumnMappings.Add("PrecioMes5", "PrecioMes5")
            tableMapping.ColumnMappings.Add("PrecioMes6", "PrecioMes6")
            tableMapping.ColumnMappings.Add("PrecioMes7", "PrecioMes7")
            tableMapping.ColumnMappings.Add("PrecioMes8", "PrecioMes8")
            tableMapping.ColumnMappings.Add("PrecioMes9", "PrecioMes9")
            tableMapping.ColumnMappings.Add("PrecioMes10", "PrecioMes10")
            tableMapping.ColumnMappings.Add("PrecioMes11", "PrecioMes11")
            tableMapping.ColumnMappings.Add("PrecioMes12", "PrecioMes12")
            tableMapping.ColumnMappings.Add("PorcentajeDiferencia", "PorcentajeDiferencia")
            tableMapping.ColumnMappings.Add("PrecioUnitario2daMoneda", "PrecioUnitario2daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes12daMoneda", "PrecioMes12daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes22daMoneda", "PrecioMes22daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes32daMoneda", "PrecioMes32daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes42daMoneda", "PrecioMes42daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes52daMoneda", "PrecioMes52daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes62daMoneda", "PrecioMes62daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes72daMoneda", "PrecioMes72daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes82daMoneda", "PrecioMes82daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes92daMoneda", "PrecioMes92daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes102daMoneda", "PrecioMes102daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes112daMoneda", "PrecioMes112daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes122daMoneda", "PrecioMes122daMoneda")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MatImpL` (`Codigo`, `CodMatL`, `Descripcion`, `Diferencia`, `Fecha`,"& _ 
                " `GrupoBCV`, `Unidad`, `Suplidor`, `Tipo`, `ID`, `PrecioUnitario`, `PrecioMes1`,"& _ 
                " `PrecioMes2`, `PrecioMes3`, `PrecioMes4`, `PrecioMes5`, `PrecioMes6`, `PrecioMe"& _ 
                "s7`, `PrecioMes8`, `PrecioMes9`, `PrecioMes10`, `PrecioMes11`, `PrecioMes12`, `P"& _ 
                "orcentajeDiferencia`, `PrecioUnitario2daMoneda`, `PrecioMes12daMoneda`, `PrecioM"& _ 
                "es22daMoneda`, `PrecioMes32daMoneda`, `PrecioMes42daMoneda`, `PrecioMes52daMoned"& _ 
                "a`, `PrecioMes62daMoneda`, `PrecioMes72daMoneda`, `PrecioMes82daMoneda`, `Precio"& _ 
                "Mes92daMoneda`, `PrecioMes102daMoneda`, `PrecioMes112daMoneda`, `PrecioMes122daM"& _ 
                "oneda`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodMatL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodMatL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Diferencia", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Diferencia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("GrupoBCV", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "GrupoBCV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Suplidor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Suplidor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeDiferencia", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeDiferencia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Codigo, CodMatL, Descripcion, Diferencia, Fecha, GrupoBCV, Unidad, Suplido"& _ 
                "r, Tipo, ID, PrecioUnitario, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, Pre"& _ 
                "cioMes5, PrecioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes1"& _ 
                "1, PrecioMes12, PorcentajeDiferencia, PrecioUnitario2daMoneda, PrecioMes12daMone"& _ 
                "da, PrecioMes22daMoneda, PrecioMes32daMoneda, PrecioMes42daMoneda, PrecioMes52da"& _ 
                "Moneda, PrecioMes62daMoneda, PrecioMes72daMoneda, PrecioMes82daMoneda, PrecioMes"& _ 
                "92daMoneda, PrecioMes102daMoneda, PrecioMes112daMoneda, PrecioMes122daMoneda FRO"& _ 
                "M MatImpL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MatImpLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MatImpLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MatImpLDataTable = New MasterAPVDataSet.MatImpLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.MatImpLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MatImpL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal CodMatL As String,  _
                    ByVal Descripcion As String,  _
                    ByVal Diferencia As String,  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal GrupoBCV As Global.System.Nullable(Of Double),  _
                    ByVal Unidad As String,  _
                    ByVal Suplidor As String,  _
                    ByVal Tipo As Global.System.Nullable(Of Double),  _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal PrecioUnitario As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes1 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes2 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes3 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes4 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes5 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes6 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes7 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes8 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes9 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes10 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes11 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes12 As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeDiferencia As String,  _
                    ByVal PrecioUnitario2daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes122daMoneda As Global.System.Nullable(Of Double)) As Integer
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CodMatL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CodMatL,String)
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Descripcion,String)
            End If
            If (Diferencia Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Diferencia,String)
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GrupoBCV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(GrupoBCV.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Unidad,String)
            End If
            If (Suplidor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Suplidor,String)
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Tipo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PrecioUnitario.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PrecioUnitario.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrecioMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PrecioMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PrecioMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrecioMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrecioMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PrecioMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PrecioMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(PrecioMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PrecioMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PrecioMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PrecioMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PrecioMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeDiferencia Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PorcentajeDiferencia,String)
            End If
            If (PrecioUnitario2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(PrecioUnitario2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(PrecioMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(PrecioMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(PrecioMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(PrecioMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(PrecioMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(PrecioMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(PrecioMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(PrecioMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(PrecioMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(PrecioMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(PrecioMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(PrecioMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MatImpLBsSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MatImpLBsS"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("CodMatLULO", "CodMatLULO")
            tableMapping.ColumnMappings.Add("Diferencia", "Diferencia")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("GrupoBCV", "GrupoBCV")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Suplidor", "Suplidor")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PrecioMes1", "PrecioMes1")
            tableMapping.ColumnMappings.Add("PrecioMes2", "PrecioMes2")
            tableMapping.ColumnMappings.Add("PrecioMes3", "PrecioMes3")
            tableMapping.ColumnMappings.Add("PrecioMes4", "PrecioMes4")
            tableMapping.ColumnMappings.Add("PrecioMes5", "PrecioMes5")
            tableMapping.ColumnMappings.Add("PrecioMes6", "PrecioMes6")
            tableMapping.ColumnMappings.Add("PrecioMes7", "PrecioMes7")
            tableMapping.ColumnMappings.Add("PrecioMes8", "PrecioMes8")
            tableMapping.ColumnMappings.Add("PrecioMes9", "PrecioMes9")
            tableMapping.ColumnMappings.Add("PrecioMes10", "PrecioMes10")
            tableMapping.ColumnMappings.Add("PrecioMes11", "PrecioMes11")
            tableMapping.ColumnMappings.Add("PrecioMes12", "PrecioMes12")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("PorcentajeDiferencia", "PorcentajeDiferencia")
            tableMapping.ColumnMappings.Add("PrecioMes12daMoneda", "PrecioMes12daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes22daMoneda", "PrecioMes22daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes32daMoneda", "PrecioMes32daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes42daMoneda", "PrecioMes42daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes52daMoneda", "PrecioMes52daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes62daMoneda", "PrecioMes62daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes72daMoneda", "PrecioMes72daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes82daMoneda", "PrecioMes82daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes92daMoneda", "PrecioMes92daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes102daMoneda", "PrecioMes102daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes112daMoneda", "PrecioMes112daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes122daMoneda", "PrecioMes122daMoneda")
            tableMapping.ColumnMappings.Add("PrecioUnitario2daMoneda", "PrecioUnitario2daMoneda")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MatImpLBsS` (`Codigo`, `Descripcion`, `CodMatLULO`, `Diferencia`, `F"& _ 
                "echa`, `GrupoBCV`, `Unidad`, `Suplidor`, `Tipo`, `ID`, `PrecioMes1`, `PrecioMes2"& _ 
                "`, `PrecioMes3`, `PrecioMes4`, `PrecioMes5`, `PrecioMes6`, `PrecioMes7`, `Precio"& _ 
                "Mes8`, `PrecioMes9`, `PrecioMes10`, `PrecioMes11`, `PrecioMes12`, `PrecioUnitari"& _ 
                "o`, `PorcentajeDiferencia`, `PrecioMes12daMoneda`, `PrecioMes22daMoneda`, `Preci"& _ 
                "oMes32daMoneda`, `PrecioMes42daMoneda`, `PrecioMes52daMoneda`, `PrecioMes62daMon"& _ 
                "eda`, `PrecioMes72daMoneda`, `PrecioMes82daMoneda`, `PrecioMes92daMoneda`, `Prec"& _ 
                "ioMes102daMoneda`, `PrecioMes112daMoneda`, `PrecioMes122daMoneda`, `PrecioUnitar"& _ 
                "io2daMoneda`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodMatLULO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodMatLULO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Diferencia", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Diferencia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("GrupoBCV", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "GrupoBCV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Suplidor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Suplidor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeDiferencia", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeDiferencia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Codigo, Descripcion, CodMatLULO, Diferencia, Fecha, GrupoBCV, Unidad, Supl"& _ 
                "idor, Tipo, ID, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, Prec"& _ 
                "ioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes1"& _ 
                "2, PrecioUnitario, PorcentajeDiferencia, PrecioMes12daMoneda, PrecioMes22daMoned"& _ 
                "a, PrecioMes32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daM"& _ 
                "oneda, PrecioMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes1"& _ 
                "02daMoneda, PrecioMes112daMoneda, PrecioMes122daMoneda, PrecioUnitario2daMoneda "& _ 
                "FROM MatImpLBsS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MatImpLBsSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MatImpLBsSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MatImpLBsSDataTable = New MasterAPVDataSet.MatImpLBsSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.MatImpLBsSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MatImpLBsS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal Descripcion As String,  _
                    ByVal CodMatLULO As String,  _
                    ByVal Diferencia As Global.System.Nullable(Of Double),  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal GrupoBCV As Global.System.Nullable(Of Double),  _
                    ByVal Unidad As String,  _
                    ByVal Suplidor As String,  _
                    ByVal Tipo As Global.System.Nullable(Of Double),  _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes1 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes2 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes3 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes4 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes5 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes6 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes7 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes8 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes9 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes10 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes11 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes12 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioUnitario As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeDiferencia As String,  _
                    ByVal PrecioMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes122daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioUnitario2daMoneda As Global.System.Nullable(Of Double)) As Integer
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Descripcion,String)
            End If
            If (CodMatLULO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CodMatLULO,String)
            End If
            If (Diferencia.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Diferencia.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GrupoBCV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(GrupoBCV.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Unidad,String)
            End If
            If (Suplidor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Suplidor,String)
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Tipo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PrecioMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrecioMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PrecioMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PrecioMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrecioMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrecioMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PrecioMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PrecioMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(PrecioMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PrecioMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PrecioMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PrecioMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (PrecioUnitario.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PrecioUnitario.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeDiferencia Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PorcentajeDiferencia,String)
            End If
            If (PrecioMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(PrecioMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(PrecioMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(PrecioMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(PrecioMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(PrecioMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(PrecioMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(PrecioMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(PrecioMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(PrecioMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(PrecioMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(PrecioMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(PrecioMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (PrecioUnitario2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(PrecioUnitario2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MOcompTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MOcomp"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("CodigoSimple", "CodigoSimple")
            tableMapping.ColumnMappings.Add("DescripcionSimple", "DescripcionSimple")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Jornal", "Jornal")
            tableMapping.ColumnMappings.Add("Bono", "Bono")
            tableMapping.ColumnMappings.Add("TotalJornal", "TotalJornal")
            tableMapping.ColumnMappings.Add("TotalBono", "TotalBono")
            tableMapping.ColumnMappings.Add("Jornal2daMoneda", "Jornal2daMoneda")
            tableMapping.ColumnMappings.Add("Bono2daMoneda", "Bono2daMoneda")
            tableMapping.ColumnMappings.Add("TotalJornal2daMoneda", "TotalJornal2daMoneda")
            tableMapping.ColumnMappings.Add("TotalBono2daMoneda", "TotalBono2daMoneda")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MOcomp` (`ID`, `Descripcion`, `Unidad`, `CodigoSimple`, `Descripcion"& _ 
                "Simple`, `Cantidad`, `Jornal`, `Bono`, `TotalJornal`, `TotalBono`, `Jornal2daMon"& _ 
                "eda`, `Bono2daMoneda`, `TotalJornal2daMoneda`, `TotalBono2daMoneda`) VALUES (?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodigoSimple", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodigoSimple", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DescripcionSimple", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DescripcionSimple", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cantidad", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cantidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Jornal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Jornal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Bono", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Bono", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TotalJornal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalJornal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TotalBono", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalBono", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Jornal2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Jornal2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Bono2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Bono2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TotalJornal2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalJornal2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TotalBono2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalBono2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Descripcion, Unidad, CodigoSimple, DescripcionSimple, Cantidad, Jornal"& _ 
                ", Bono, TotalJornal, TotalBono, Jornal2daMoneda, Bono2daMoneda, TotalJornal2daMo"& _ 
                "neda, TotalBono2daMoneda FROM MOcomp"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MOcompDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MOcompDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MOcompDataTable = New MasterAPVDataSet.MOcompDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.MOcompDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MOcomp")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Global.System.Nullable(Of Double), ByVal Descripcion As String, ByVal Unidad As String, ByVal CodigoSimple As Global.System.Nullable(Of Double), ByVal DescripcionSimple As String, ByVal Cantidad As Global.System.Nullable(Of Double), ByVal Jornal As Global.System.Nullable(Of Double), ByVal Bono As Global.System.Nullable(Of Double), ByVal TotalJornal As Global.System.Nullable(Of Double), ByVal TotalBono As Global.System.Nullable(Of Double), ByVal Jornal2daMoneda As Global.System.Nullable(Of Double), ByVal Bono2daMoneda As Global.System.Nullable(Of Double), ByVal TotalJornal2daMoneda As Global.System.Nullable(Of Double), ByVal TotalBono2daMoneda As Global.System.Nullable(Of Double)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Descripcion,String)
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Unidad,String)
            End If
            If (CodigoSimple.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CodigoSimple.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DescripcionSimple Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DescripcionSimple,String)
            End If
            If (Cantidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Cantidad.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Jornal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Jornal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Bono.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Bono.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TotalJornal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(TotalJornal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (TotalBono.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(TotalBono.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Jornal2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Jornal2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Bono2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Bono2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TotalJornal2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(TotalJornal2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (TotalBono2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(TotalBono2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MOImpLTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MOImpL"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("CodMOLULO", "CodMOLULO")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Jornal", "Jornal")
            tableMapping.ColumnMappings.Add("JornalMes1", "JornalMes1")
            tableMapping.ColumnMappings.Add("JornalMes2", "JornalMes2")
            tableMapping.ColumnMappings.Add("JornalMes3", "JornalMes3")
            tableMapping.ColumnMappings.Add("JornalMes4", "JornalMes4")
            tableMapping.ColumnMappings.Add("JornalMes5", "JornalMes5")
            tableMapping.ColumnMappings.Add("JornalMes6", "JornalMes6")
            tableMapping.ColumnMappings.Add("JornalMes7", "JornalMes7")
            tableMapping.ColumnMappings.Add("JornalMes8", "JornalMes8")
            tableMapping.ColumnMappings.Add("JornalMes9", "JornalMes9")
            tableMapping.ColumnMappings.Add("JornalMes10", "JornalMes10")
            tableMapping.ColumnMappings.Add("JornalMes11", "JornalMes11")
            tableMapping.ColumnMappings.Add("JornalMes12", "JornalMes12")
            tableMapping.ColumnMappings.Add("Jornal2daMoneda", "Jornal2daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes12daMoneda", "JornalMes12daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes22daMoneda", "JornalMes22daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes32daMoneda", "JornalMes32daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes42daMoneda", "JornalMes42daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes52daMoneda", "JornalMes52daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes62daMoneda", "JornalMes62daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes72daMoneda", "JornalMes72daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes82daMoneda", "JornalMes82daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes92daMoneda", "JornalMes92daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes102daMoneda", "JornalMes102daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes112daMoneda", "JornalMes112daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes122daMoneda", "JornalMes122daMoneda")
            tableMapping.ColumnMappings.Add("PorcentajeJornal", "PorcentajeJornal")
            tableMapping.ColumnMappings.Add("DiferenciaJornal", "DiferenciaJornal")
            tableMapping.ColumnMappings.Add("Bono", "Bono")
            tableMapping.ColumnMappings.Add("BonoMes1", "BonoMes1")
            tableMapping.ColumnMappings.Add("BonoMes2", "BonoMes2")
            tableMapping.ColumnMappings.Add("BonoMes3", "BonoMes3")
            tableMapping.ColumnMappings.Add("BonoMes4", "BonoMes4")
            tableMapping.ColumnMappings.Add("BonoMes5", "BonoMes5")
            tableMapping.ColumnMappings.Add("BonoMes6", "BonoMes6")
            tableMapping.ColumnMappings.Add("BonoMes7", "BonoMes7")
            tableMapping.ColumnMappings.Add("BonoMes8", "BonoMes8")
            tableMapping.ColumnMappings.Add("BonoMes9", "BonoMes9")
            tableMapping.ColumnMappings.Add("BonoMes10", "BonoMes10")
            tableMapping.ColumnMappings.Add("BonoMes11", "BonoMes11")
            tableMapping.ColumnMappings.Add("BonoMes12", "BonoMes12")
            tableMapping.ColumnMappings.Add("Bono2daMoneda", "Bono2daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes12daMoneda", "BonoMes12daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes22daMoneda", "BonoMes22daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes32daMoneda", "BonoMes32daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes42daMoneda", "BonoMes42daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes52daMoneda", "BonoMes52daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes62daMoneda", "BonoMes62daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes72daMoneda", "BonoMes72daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes82daMoneda", "BonoMes82daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes92daMoneda", "BonoMes92daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes102daMoneda", "BonoMes102daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes112daMoneda", "BonoMes112daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes122daMoneda", "BonoMes122daMoneda")
            tableMapping.ColumnMappings.Add("PorcentajeBono", "PorcentajeBono")
            tableMapping.ColumnMappings.Add("DiferenciaBono", "DiferenciaBono")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MOImpL` (`ID`, `CodMOLULO`, `Codigo`, `Descripcion`, `Fecha`, `Tipo`"& _ 
                ", `Unidad`, `Jornal`, `JornalMes1`, `JornalMes2`, `JornalMes3`, `JornalMes4`, `J"& _ 
                "ornalMes5`, `JornalMes6`, `JornalMes7`, `JornalMes8`, `JornalMes9`, `JornalMes10"& _ 
                "`, `JornalMes11`, `JornalMes12`, `Jornal2daMoneda`, `JornalMes12daMoneda`, `Jorn"& _ 
                "alMes22daMoneda`, `JornalMes32daMoneda`, `JornalMes42daMoneda`, `JornalMes52daMo"& _ 
                "neda`, `JornalMes62daMoneda`, `JornalMes72daMoneda`, `JornalMes82daMoneda`, `Jor"& _ 
                "nalMes92daMoneda`, `JornalMes102daMoneda`, `JornalMes112daMoneda`, `JornalMes122"& _ 
                "daMoneda`, `PorcentajeJornal`, `DiferenciaJornal`, `Bono`, `BonoMes1`, `BonoMes2"& _ 
                "`, `BonoMes3`, `BonoMes4`, `BonoMes5`, `BonoMes6`, `BonoMes7`, `BonoMes8`, `Bono"& _ 
                "Mes9`, `BonoMes10`, `BonoMes11`, `BonoMes12`, `Bono2daMoneda`, `BonoMes12daMoned"& _ 
                "a`, `BonoMes22daMoneda`, `BonoMes32daMoneda`, `BonoMes42daMoneda`, `BonoMes52daM"& _ 
                "oneda`, `BonoMes62daMoneda`, `BonoMes72daMoneda`, `BonoMes82daMoneda`, `BonoMes9"& _ 
                "2daMoneda`, `BonoMes102daMoneda`, `BonoMes112daMoneda`, `BonoMes122daMoneda`, `P"& _ 
                "orcentajeBono`, `DiferenciaBono`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodMOLULO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodMOLULO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Jornal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Jornal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Jornal2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Jornal2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeJornal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeJornal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DiferenciaJornal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DiferenciaJornal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Bono", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Bono", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Bono2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Bono2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeBono", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeBono", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DiferenciaBono", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DiferenciaBono", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, CodMOLULO, Codigo, Descripcion, Fecha, Tipo, Unidad, Jornal, JornalMes"& _ 
                "1, JornalMes2, JornalMes3, JornalMes4, JornalMes5, JornalMes6, JornalMes7, Jorna"& _ 
                "lMes8, JornalMes9, JornalMes10, JornalMes11, JornalMes12, Jornal2daMoneda, Jorna"& _ 
                "lMes12daMoneda, JornalMes22daMoneda, JornalMes32daMoneda, JornalMes42daMoneda, J"& _ 
                "ornalMes52daMoneda, JornalMes62daMoneda, JornalMes72daMoneda, JornalMes82daMoned"& _ 
                "a, JornalMes92daMoneda, JornalMes102daMoneda, JornalMes112daMoneda, JornalMes122"& _ 
                "daMoneda, PorcentajeJornal, DiferenciaJornal, Bono, BonoMes1, BonoMes2, BonoMes3"& _ 
                ", BonoMes4, BonoMes5, BonoMes6, BonoMes7, BonoMes8, BonoMes9, BonoMes10, BonoMes"& _ 
                "11, BonoMes12, Bono2daMoneda, BonoMes12daMoneda, BonoMes22daMoneda, BonoMes32daM"& _ 
                "oneda, BonoMes42daMoneda, BonoMes52daMoneda, BonoMes62daMoneda, BonoMes72daMoned"& _ 
                "a, BonoMes82daMoneda, BonoMes92daMoneda, BonoMes102daMoneda, BonoMes112daMoneda,"& _ 
                " BonoMes122daMoneda, PorcentajeBono, DiferenciaBono FROM MOImpL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MOImpLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MOImpLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MOImpLDataTable = New MasterAPVDataSet.MOImpLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.MOImpLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MOImpL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal CodMOLULO As String,  _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal Descripcion As String,  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal Tipo As Global.System.Nullable(Of Double),  _
                    ByVal Unidad As String,  _
                    ByVal Jornal As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes1 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes2 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes3 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes4 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes5 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes6 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes7 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes8 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes9 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes10 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes11 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes12 As Global.System.Nullable(Of Double),  _
                    ByVal Jornal2daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes122daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeJornal As Global.System.Nullable(Of Double),  _
                    ByVal DiferenciaJornal As Global.System.Nullable(Of Double),  _
                    ByVal Bono As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes1 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes2 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes3 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes4 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes5 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes6 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes7 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes8 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes9 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes10 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes11 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes12 As Global.System.Nullable(Of Double),  _
                    ByVal Bono2daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes122daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeBono As Global.System.Nullable(Of Double),  _
                    ByVal DiferenciaBono As Global.System.Nullable(Of Double)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CodMOLULO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CodMOLULO,String)
            End If
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Descripcion,String)
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Tipo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Unidad,String)
            End If
            If (Jornal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Jornal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (JornalMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(JornalMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (JornalMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(JornalMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (JornalMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(JornalMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (JornalMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(JornalMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (JornalMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(JornalMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (JornalMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(JornalMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (JornalMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(JornalMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (JornalMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(JornalMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (JornalMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(JornalMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (JornalMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(JornalMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (JornalMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(JornalMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (JornalMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(JornalMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Jornal2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Jornal2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (JornalMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(JornalMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (JornalMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(JornalMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (JornalMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(JornalMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (JornalMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(JornalMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (JornalMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(JornalMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (JornalMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(JornalMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (JornalMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(JornalMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (JornalMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(JornalMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (JornalMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(JornalMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (JornalMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(JornalMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (JornalMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(JornalMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (JornalMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(JornalMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeJornal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(PorcentajeJornal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (DiferenciaJornal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(DiferenciaJornal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Bono.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(Bono.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (BonoMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(BonoMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (BonoMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(BonoMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (BonoMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(BonoMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (BonoMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(BonoMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (BonoMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(BonoMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (BonoMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(BonoMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (BonoMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(BonoMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (BonoMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(BonoMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (BonoMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(BonoMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (BonoMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(BonoMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (BonoMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(BonoMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (BonoMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(BonoMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Bono2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Bono2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (BonoMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(BonoMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (BonoMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(BonoMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (BonoMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(BonoMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (BonoMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(BonoMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (BonoMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(BonoMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (BonoMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(BonoMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (BonoMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(BonoMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (BonoMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(BonoMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (BonoMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(BonoMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (BonoMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(BonoMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (BonoMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(BonoMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (BonoMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(BonoMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeBono.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(PorcentajeBono.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (DiferenciaBono.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(DiferenciaBono.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MOImpLBsSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MOImpLBsS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("CodMOLULO", "CodMOLULO")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Jornal", "Jornal")
            tableMapping.ColumnMappings.Add("JornalMes1", "JornalMes1")
            tableMapping.ColumnMappings.Add("JornalMes2", "JornalMes2")
            tableMapping.ColumnMappings.Add("JornalMes3", "JornalMes3")
            tableMapping.ColumnMappings.Add("JornalMes4", "JornalMes4")
            tableMapping.ColumnMappings.Add("JornalMes5", "JornalMes5")
            tableMapping.ColumnMappings.Add("JornalMes6", "JornalMes6")
            tableMapping.ColumnMappings.Add("JornalMes7", "JornalMes7")
            tableMapping.ColumnMappings.Add("JornalMes8", "JornalMes8")
            tableMapping.ColumnMappings.Add("JornalMes9", "JornalMes9")
            tableMapping.ColumnMappings.Add("JornalMes10", "JornalMes10")
            tableMapping.ColumnMappings.Add("JornalMes11", "JornalMes11")
            tableMapping.ColumnMappings.Add("JornalMes12", "JornalMes12")
            tableMapping.ColumnMappings.Add("Jornal2daMoneda", "Jornal2daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes12daMoneda", "JornalMes12daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes22daMoneda", "JornalMes22daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes32daMoneda", "JornalMes32daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes42daMoneda", "JornalMes42daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes52daMoneda", "JornalMes52daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes62daMoneda", "JornalMes62daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes72daMoneda", "JornalMes72daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes82daMoneda", "JornalMes82daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes92daMoneda", "JornalMes92daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes102daMoneda", "JornalMes102daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes112daMoneda", "JornalMes112daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes122daMoneda", "JornalMes122daMoneda")
            tableMapping.ColumnMappings.Add("PorcentajeJornal", "PorcentajeJornal")
            tableMapping.ColumnMappings.Add("DiferenciaJornal", "DiferenciaJornal")
            tableMapping.ColumnMappings.Add("Bono", "Bono")
            tableMapping.ColumnMappings.Add("BonoMes1", "BonoMes1")
            tableMapping.ColumnMappings.Add("BonoMes2", "BonoMes2")
            tableMapping.ColumnMappings.Add("BonoMes3", "BonoMes3")
            tableMapping.ColumnMappings.Add("BonoMes4", "BonoMes4")
            tableMapping.ColumnMappings.Add("BonoMes5", "BonoMes5")
            tableMapping.ColumnMappings.Add("BonoMes6", "BonoMes6")
            tableMapping.ColumnMappings.Add("BonoMes7", "BonoMes7")
            tableMapping.ColumnMappings.Add("BonoMes8", "BonoMes8")
            tableMapping.ColumnMappings.Add("BonoMes9", "BonoMes9")
            tableMapping.ColumnMappings.Add("BonoMes10", "BonoMes10")
            tableMapping.ColumnMappings.Add("BonoMes11", "BonoMes11")
            tableMapping.ColumnMappings.Add("BonoMes12", "BonoMes12")
            tableMapping.ColumnMappings.Add("Bono2daMoneda", "Bono2daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes12daMoneda", "BonoMes12daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes22daMoneda", "BonoMes22daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes32daMoneda", "BonoMes32daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes42daMoneda", "BonoMes42daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes52daMoneda", "BonoMes52daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes62daMoneda", "BonoMes62daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes72daMoneda", "BonoMes72daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes82daMoneda", "BonoMes82daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes92daMoneda", "BonoMes92daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes102daMoneda", "BonoMes102daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes112daMoneda", "BonoMes112daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes122daMoneda", "BonoMes122daMoneda")
            tableMapping.ColumnMappings.Add("PorcentajeBono", "PorcentajeBono")
            tableMapping.ColumnMappings.Add("DiferenciaBono", "DiferenciaBono")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MOImpLBsS` (`ID`, `CodMOLULO`, `Codigo`, `Descripcion`, `Fecha`, `Ti"& _ 
                "po`, `Unidad`, `Jornal`, `JornalMes1`, `JornalMes2`, `JornalMes3`, `JornalMes4`,"& _ 
                " `JornalMes5`, `JornalMes6`, `JornalMes7`, `JornalMes8`, `JornalMes9`, `JornalMe"& _ 
                "s10`, `JornalMes11`, `JornalMes12`, `Jornal2daMoneda`, `JornalMes12daMoneda`, `J"& _ 
                "ornalMes22daMoneda`, `JornalMes32daMoneda`, `JornalMes42daMoneda`, `JornalMes52d"& _ 
                "aMoneda`, `JornalMes62daMoneda`, `JornalMes72daMoneda`, `JornalMes82daMoneda`, `"& _ 
                "JornalMes92daMoneda`, `JornalMes102daMoneda`, `JornalMes112daMoneda`, `JornalMes"& _ 
                "122daMoneda`, `PorcentajeJornal`, `DiferenciaJornal`, `Bono`, `BonoMes1`, `BonoM"& _ 
                "es2`, `BonoMes3`, `BonoMes4`, `BonoMes5`, `BonoMes6`, `BonoMes7`, `BonoMes8`, `B"& _ 
                "onoMes9`, `BonoMes10`, `BonoMes11`, `BonoMes12`, `Bono2daMoneda`, `BonoMes12daMo"& _ 
                "neda`, `BonoMes22daMoneda`, `BonoMes32daMoneda`, `BonoMes42daMoneda`, `BonoMes52"& _ 
                "daMoneda`, `BonoMes62daMoneda`, `BonoMes72daMoneda`, `BonoMes82daMoneda`, `BonoM"& _ 
                "es92daMoneda`, `BonoMes102daMoneda`, `BonoMes112daMoneda`, `BonoMes122daMoneda`,"& _ 
                " `PorcentajeBono`, `DiferenciaBono`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodMOLULO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodMOLULO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Jornal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Jornal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Jornal2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Jornal2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JornalMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JornalMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeJornal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeJornal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DiferenciaJornal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DiferenciaJornal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Bono", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Bono", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Bono2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Bono2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BonoMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BonoMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeBono", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeBono", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DiferenciaBono", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DiferenciaBono", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, CodMOLULO, Codigo, Descripcion, Fecha, Tipo, Unidad, Jornal, JornalMes"& _ 
                "1, JornalMes2, JornalMes3, JornalMes4, JornalMes5, JornalMes6, JornalMes7, Jorna"& _ 
                "lMes8, JornalMes9, JornalMes10, JornalMes11, JornalMes12, Jornal2daMoneda, Jorna"& _ 
                "lMes12daMoneda, JornalMes22daMoneda, JornalMes32daMoneda, JornalMes42daMoneda, J"& _ 
                "ornalMes52daMoneda, JornalMes62daMoneda, JornalMes72daMoneda, JornalMes82daMoned"& _ 
                "a, JornalMes92daMoneda, JornalMes102daMoneda, JornalMes112daMoneda, JornalMes122"& _ 
                "daMoneda, PorcentajeJornal, DiferenciaJornal, Bono, BonoMes1, BonoMes2, BonoMes3"& _ 
                ", BonoMes4, BonoMes5, BonoMes6, BonoMes7, BonoMes8, BonoMes9, BonoMes10, BonoMes"& _ 
                "11, BonoMes12, Bono2daMoneda, BonoMes12daMoneda, BonoMes22daMoneda, BonoMes32daM"& _ 
                "oneda, BonoMes42daMoneda, BonoMes52daMoneda, BonoMes62daMoneda, BonoMes72daMoned"& _ 
                "a, BonoMes82daMoneda, BonoMes92daMoneda, BonoMes102daMoneda, BonoMes112daMoneda,"& _ 
                " BonoMes122daMoneda, PorcentajeBono, DiferenciaBono FROM MOImpLBsS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MOImpLBsSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MOImpLBsSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MOImpLBsSDataTable = New MasterAPVDataSet.MOImpLBsSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.MOImpLBsSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MOImpLBsS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal CodMOLULO As String,  _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal Descripcion As String,  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal Tipo As Global.System.Nullable(Of Double),  _
                    ByVal Unidad As String,  _
                    ByVal Jornal As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes1 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes2 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes3 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes4 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes5 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes6 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes7 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes8 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes9 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes10 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes11 As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes12 As Global.System.Nullable(Of Double),  _
                    ByVal Jornal2daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal JornalMes122daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeJornal As Global.System.Nullable(Of Double),  _
                    ByVal DiferenciaJornal As Global.System.Nullable(Of Double),  _
                    ByVal Bono As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes1 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes2 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes3 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes4 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes5 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes6 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes7 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes8 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes9 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes10 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes11 As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes12 As Global.System.Nullable(Of Double),  _
                    ByVal Bono2daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal BonoMes122daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeBono As Global.System.Nullable(Of Double),  _
                    ByVal DiferenciaBono As Global.System.Nullable(Of Double)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CodMOLULO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CodMOLULO,String)
            End If
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Descripcion,String)
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Tipo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Unidad,String)
            End If
            If (Jornal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Jornal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (JornalMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(JornalMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (JornalMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(JornalMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (JornalMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(JornalMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (JornalMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(JornalMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (JornalMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(JornalMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (JornalMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(JornalMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (JornalMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(JornalMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (JornalMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(JornalMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (JornalMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(JornalMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (JornalMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(JornalMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (JornalMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(JornalMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (JornalMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(JornalMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Jornal2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Jornal2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (JornalMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(JornalMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (JornalMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(JornalMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (JornalMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(JornalMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (JornalMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(JornalMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (JornalMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(JornalMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (JornalMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(JornalMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (JornalMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(JornalMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (JornalMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(JornalMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (JornalMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(JornalMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (JornalMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(JornalMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (JornalMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(JornalMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (JornalMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(JornalMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeJornal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(PorcentajeJornal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (DiferenciaJornal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(DiferenciaJornal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Bono.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(Bono.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (BonoMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(BonoMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (BonoMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(BonoMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (BonoMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(BonoMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (BonoMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(BonoMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (BonoMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(BonoMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (BonoMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(BonoMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (BonoMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(BonoMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (BonoMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(BonoMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (BonoMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(BonoMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (BonoMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(BonoMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (BonoMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(BonoMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (BonoMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(BonoMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Bono2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Bono2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (BonoMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(BonoMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (BonoMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(BonoMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (BonoMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(BonoMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (BonoMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(BonoMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (BonoMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(BonoMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (BonoMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(BonoMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (BonoMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(BonoMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (BonoMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(BonoMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (BonoMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(BonoMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (BonoMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(BonoMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (BonoMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(BonoMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (BonoMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(BonoMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeBono.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(PorcentajeBono.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (DiferenciaBono.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(DiferenciaBono.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class obrasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "obras"
            tableMapping.ColumnMappings.Add("cod-obr", "cod-obr")
            tableMapping.ColumnMappings.Add("desc-obr", "desc-obr")
            tableMapping.ColumnMappings.Add("Obra", "Obra")
            tableMapping.ColumnMappings.Add("FCAS", "FCAS")
            tableMapping.ColumnMappings.Add("Administracion", "Administracion")
            tableMapping.ColumnMappings.Add("Utilidad", "Utilidad")
            tableMapping.ColumnMappings.Add("Rendimiento", "Rendimiento")
            tableMapping.ColumnMappings.Add("Dig_Rend", "Dig_Rend")
            tableMapping.ColumnMappings.Add("IVA", "IVA")
            tableMapping.ColumnMappings.Add("Cant_Part", "Cant_Part")
            tableMapping.ColumnMappings.Add("Cant_Analisis", "Cant_Analisis")
            tableMapping.ColumnMappings.Add("Div_Mat", "Div_Mat")
            tableMapping.ColumnMappings.Add("Base_MAT", "Base_MAT")
            tableMapping.ColumnMappings.Add("Base_EQP", "Base_EQP")
            tableMapping.ColumnMappings.Add("Base_MO", "Base_MO")
            tableMapping.ColumnMappings.Add("Base_Partidas", "Base_Partidas")
            tableMapping.ColumnMappings.Add("FechaB_MAT", "FechaB_MAT")
            tableMapping.ColumnMappings.Add("FechaB_EQP", "FechaB_EQP")
            tableMapping.ColumnMappings.Add("FechaB_MO", "FechaB_MO")
            tableMapping.ColumnMappings.Add("FechaB_PART", "FechaB_PART")
            tableMapping.ColumnMappings.Add("Moneda_P", "Moneda_P")
            tableMapping.ColumnMappings.Add("Moneda_S", "Moneda_S")
            tableMapping.ColumnMappings.Add("Propietario", "Propietario")
            tableMapping.ColumnMappings.Add("IngFirma", "IngFirma")
            tableMapping.ColumnMappings.Add("CIV_Firma", "CIV_Firma")
            tableMapping.ColumnMappings.Add("IngRevisa", "IngRevisa")
            tableMapping.ColumnMappings.Add("CIV_Revisa", "CIV_Revisa")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `obras` (`cod-obr`, `desc-obr`, `Obra`, `FCAS`, `Administracion`, `Ut"& _ 
                "ilidad`, `Rendimiento`, `Dig_Rend`, `IVA`, `Cant_Part`, `Cant_Analisis`, `Div_Ma"& _ 
                "t`, `Base_MAT`, `Base_EQP`, `Base_MO`, `Base_Partidas`, `FechaB_MAT`, `FechaB_EQ"& _ 
                "P`, `FechaB_MO`, `FechaB_PART`, `Moneda_P`, `Moneda_S`, `Propietario`, `IngFirma"& _ 
                "`, `CIV_Firma`, `IngRevisa`, `CIV_Revisa`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cod-obr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cod-obr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("desc-obr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "desc-obr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Obra", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Obra", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FCAS", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FCAS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Administracion", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Administracion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Utilidad", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Utilidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Rendimiento", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Rendimiento", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Dig_Rend", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Dig_Rend", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IVA", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IVA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cant_Part", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cant_Part", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cant_Analisis", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cant_Analisis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Div_Mat", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Div_Mat", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Base_MAT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Base_MAT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Base_EQP", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Base_EQP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Base_MO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Base_MO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Base_Partidas", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Base_Partidas", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FechaB_MAT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FechaB_MAT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FechaB_EQP", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FechaB_EQP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FechaB_MO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FechaB_MO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FechaB_PART", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FechaB_PART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Moneda_P", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Moneda_P", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Moneda_S", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Moneda_S", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Propietario", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Propietario", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IngFirma", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IngFirma", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CIV_Firma", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CIV_Firma", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IngRevisa", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IngRevisa", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CIV_Revisa", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CIV_Revisa", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [cod-obr], [desc-obr], Obra, FCAS, Administracion, Utilidad, Rendimiento, "& _ 
                "Dig_Rend, IVA, Cant_Part, Cant_Analisis, Div_Mat, Base_MAT, Base_EQP, Base_MO, B"& _ 
                "ase_Partidas, FechaB_MAT, FechaB_EQP, FechaB_MO, FechaB_PART, Moneda_P, Moneda_S"& _ 
                ", Propietario, IngFirma, CIV_Firma, IngRevisa, CIV_Revisa FROM obras"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.obrasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.obrasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.obrasDataTable = New MasterAPVDataSet.obrasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.obrasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "obras")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal _cod_obr As String,  _
                    ByVal _desc_obr As String,  _
                    ByVal Obra As String,  _
                    ByVal FCAS As Global.System.Nullable(Of Double),  _
                    ByVal Administracion As Global.System.Nullable(Of Double),  _
                    ByVal Utilidad As Global.System.Nullable(Of Double),  _
                    ByVal Rendimiento As Global.System.Nullable(Of Double),  _
                    ByVal Dig_Rend As Global.System.Nullable(Of Double),  _
                    ByVal IVA As Global.System.Nullable(Of Double),  _
                    ByVal Cant_Part As Global.System.Nullable(Of Double),  _
                    ByVal Cant_Analisis As Global.System.Nullable(Of Double),  _
                    ByVal Div_Mat As String,  _
                    ByVal Base_MAT As String,  _
                    ByVal Base_EQP As String,  _
                    ByVal Base_MO As String,  _
                    ByVal Base_Partidas As String,  _
                    ByVal FechaB_MAT As Global.System.Nullable(Of Date),  _
                    ByVal FechaB_EQP As Global.System.Nullable(Of Date),  _
                    ByVal FechaB_MO As Global.System.Nullable(Of Date),  _
                    ByVal FechaB_PART As Global.System.Nullable(Of Date),  _
                    ByVal Moneda_P As String,  _
                    ByVal Moneda_S As String,  _
                    ByVal Propietario As String,  _
                    ByVal IngFirma As String,  _
                    ByVal CIV_Firma As String,  _
                    ByVal IngRevisa As String,  _
                    ByVal CIV_Revisa As Global.System.Nullable(Of Double)) As Integer
            If (_cod_obr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(_cod_obr,String)
            End If
            If (_desc_obr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(_desc_obr,String)
            End If
            If (Obra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Obra,String)
            End If
            If (FCAS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FCAS.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Administracion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Administracion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Utilidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Utilidad.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Rendimiento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Rendimiento.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Dig_Rend.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Dig_Rend.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (IVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IVA.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Cant_Part.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Cant_Part.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Cant_Analisis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Cant_Analisis.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Div_Mat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Div_Mat,String)
            End If
            If (Base_MAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Base_MAT,String)
            End If
            If (Base_EQP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Base_EQP,String)
            End If
            If (Base_MO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Base_MO,String)
            End If
            If (Base_Partidas Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Base_Partidas,String)
            End If
            If (FechaB_MAT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(FechaB_MAT.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (FechaB_EQP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(FechaB_EQP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (FechaB_MO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(FechaB_MO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (FechaB_PART.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(FechaB_PART.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Moneda_P Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Moneda_P,String)
            End If
            If (Moneda_S Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Moneda_S,String)
            End If
            If (Propietario Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Propietario,String)
            End If
            If (IngFirma Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(IngFirma,String)
            End If
            If (CIV_Firma Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(CIV_Firma,String)
            End If
            If (IngRevisa Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(IngRevisa,String)
            End If
            If (CIV_Revisa.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(CIV_Revisa.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PartEqCTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PartEqC"
            tableMapping.ColumnMappings.Add("CodInterno", "CodInterno")
            tableMapping.ColumnMappings.Add("Lista", "Lista")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Depreciacion", "Depreciacion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PartEqC` (`CodInterno`, `Lista`, `ID`, `Codigo`, `Descripcion`, `Uni"& _ 
                "dad`, `Cantidad`, `Precio`, `Depreciacion`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodInterno", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodInterno", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Lista", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Lista", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cantidad", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cantidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Precio", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Precio", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Depreciacion", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Depreciacion", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CodInterno, Lista, ID, Codigo, Descripcion, Unidad, Cantidad, Precio, Depr"& _ 
                "eciacion FROM PartEqC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.PartEqCDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.PartEqCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.PartEqCDataTable = New MasterAPVDataSet.PartEqCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.PartEqCDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PartEqC")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CodInterno As Global.System.Nullable(Of Double), ByVal Lista As Global.System.Nullable(Of Double), ByVal ID As Global.System.Nullable(Of Double), ByVal Codigo As Global.System.Nullable(Of Double), ByVal Descripcion As String, ByVal Unidad As String, ByVal Cantidad As Global.System.Nullable(Of Double), ByVal Precio As Global.System.Nullable(Of Double), ByVal Depreciacion As Global.System.Nullable(Of Double)) As Integer
            If (CodInterno.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CodInterno.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Lista.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Lista.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Descripcion,String)
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Unidad,String)
            End If
            If (Cantidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Cantidad.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Precio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Precio.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Depreciacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Depreciacion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EqpCompuestoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EqpCompuesto"
            tableMapping.ColumnMappings.Add("CodInterno", "CodInterno")
            tableMapping.ColumnMappings.Add("Lista", "Lista")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("EquipoComp.Descripcion", "EquipoComp_Descripcion")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Depreciacion", "Depreciacion")
            tableMapping.ColumnMappings.Add("MasterEqp.Descripcion", "MasterEqp_Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CodInterno, Lista, ID, Codigo, [EquipoComp.Descripcion], Unidad, Cantidad,"& _ 
                " Precio, Depreciacion, [MasterEqp.Descripcion] FROM EqpCompuesto"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.EqpCompuestoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.EqpCompuestoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.EqpCompuestoDataTable = New MasterAPVDataSet.EqpCompuestoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MMaterialTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MMaterial"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Diferencia", "Diferencia")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("GrupoBCV", "GrupoBCV")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Suplidor", "Suplidor")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PrecioMes1", "PrecioMes1")
            tableMapping.ColumnMappings.Add("PrecioMes2", "PrecioMes2")
            tableMapping.ColumnMappings.Add("PrecioMes3", "PrecioMes3")
            tableMapping.ColumnMappings.Add("PrecioMes4", "PrecioMes4")
            tableMapping.ColumnMappings.Add("PrecioMes5", "PrecioMes5")
            tableMapping.ColumnMappings.Add("PrecioMes6", "PrecioMes6")
            tableMapping.ColumnMappings.Add("PrecioMes7", "PrecioMes7")
            tableMapping.ColumnMappings.Add("PrecioMes8", "PrecioMes8")
            tableMapping.ColumnMappings.Add("PrecioMes9", "PrecioMes9")
            tableMapping.ColumnMappings.Add("PrecioMes10", "PrecioMes10")
            tableMapping.ColumnMappings.Add("PrecioMes11", "PrecioMes11")
            tableMapping.ColumnMappings.Add("PrecioMes12", "PrecioMes12")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("PorcentajeDiferencia", "PorcentajeDiferencia")
            tableMapping.ColumnMappings.Add("PrecioMes12daMoneda", "PrecioMes12daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes22daMoneda", "PrecioMes22daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes32daMoneda", "PrecioMes32daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes42daMoneda", "PrecioMes42daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes52daMoneda", "PrecioMes52daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes62daMoneda", "PrecioMes62daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes72daMoneda", "PrecioMes72daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes82daMoneda", "PrecioMes82daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes92daMoneda", "PrecioMes92daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes102daMoneda", "PrecioMes102daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes112daMoneda", "PrecioMes112daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes122daMoneda", "PrecioMes122daMoneda")
            tableMapping.ColumnMappings.Add("PrecioUnitario2daMoneda", "PrecioUnitario2daMoneda")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Codigo, Descripcion, Diferencia, Fecha, GrupoBCV, Unidad, Suplidor, Tipo, "& _ 
                "ID, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes6, Prec"& _ 
                "ioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, PrecioUni"& _ 
                "tario, PorcentajeDiferencia, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes"& _ 
                "32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, Preci"& _ 
                "oMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, "& _ 
                "PrecioMes112daMoneda, PrecioMes122daMoneda, PrecioUnitario2daMoneda FROM MMateri"& _ 
                "al"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MMaterialDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MMaterialDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MMaterialDataTable = New MasterAPVDataSet.MMaterialDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MObraTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MObra"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Jornal", "Jornal")
            tableMapping.ColumnMappings.Add("Bono", "Bono")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("JornalMes1", "JornalMes1")
            tableMapping.ColumnMappings.Add("JornalMes2", "JornalMes2")
            tableMapping.ColumnMappings.Add("JornalMes3", "JornalMes3")
            tableMapping.ColumnMappings.Add("JornalMes4", "JornalMes4")
            tableMapping.ColumnMappings.Add("JornalMes5", "JornalMes5")
            tableMapping.ColumnMappings.Add("JornalMes6", "JornalMes6")
            tableMapping.ColumnMappings.Add("JornalMes7", "JornalMes7")
            tableMapping.ColumnMappings.Add("JornalMes8", "JornalMes8")
            tableMapping.ColumnMappings.Add("JornalMes9", "JornalMes9")
            tableMapping.ColumnMappings.Add("JornalMes10", "JornalMes10")
            tableMapping.ColumnMappings.Add("JornalMes11", "JornalMes11")
            tableMapping.ColumnMappings.Add("JornalMes12", "JornalMes12")
            tableMapping.ColumnMappings.Add("BonoMes1", "BonoMes1")
            tableMapping.ColumnMappings.Add("BonoMes2", "BonoMes2")
            tableMapping.ColumnMappings.Add("BonoMes3", "BonoMes3")
            tableMapping.ColumnMappings.Add("BonoMes4", "BonoMes4")
            tableMapping.ColumnMappings.Add("BonoMes5", "BonoMes5")
            tableMapping.ColumnMappings.Add("BonoMes6", "BonoMes6")
            tableMapping.ColumnMappings.Add("BonoMes7", "BonoMes7")
            tableMapping.ColumnMappings.Add("BonoMes8", "BonoMes8")
            tableMapping.ColumnMappings.Add("BonoMes9", "BonoMes9")
            tableMapping.ColumnMappings.Add("BonoMes10", "BonoMes10")
            tableMapping.ColumnMappings.Add("BonoMes11", "BonoMes11")
            tableMapping.ColumnMappings.Add("BonoMes12", "BonoMes12")
            tableMapping.ColumnMappings.Add("Jornal2daMoneda", "Jornal2daMoneda")
            tableMapping.ColumnMappings.Add("Bono2daMoneda", "Bono2daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes12daMoneda", "JornalMes12daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes22daMoneda", "JornalMes22daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes32daMoneda", "JornalMes32daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes42daMoneda", "JornalMes42daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes52daMoneda", "JornalMes52daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes62daMoneda", "JornalMes62daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes72daMoneda", "JornalMes72daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes82daMoneda", "JornalMes82daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes92daMoneda", "JornalMes92daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes102daMoneda", "JornalMes102daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes112daMoneda", "JornalMes112daMoneda")
            tableMapping.ColumnMappings.Add("JornalMes122daMoneda", "JornalMes122daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes12daMoneda", "BonoMes12daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes22daMoneda", "BonoMes22daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes32daMoneda", "BonoMes32daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes42daMoneda", "BonoMes42daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes52daMoneda", "BonoMes52daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes62daMoneda", "BonoMes62daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes72daMoneda", "BonoMes72daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes82daMoneda", "BonoMes82daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes92daMoneda", "BonoMes92daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes102daMoneda", "BonoMes102daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes112daMoneda", "BonoMes112daMoneda")
            tableMapping.ColumnMappings.Add("BonoMes122daMoneda", "BonoMes122daMoneda")
            tableMapping.ColumnMappings.Add("DiferenciaJornal", "DiferenciaJornal")
            tableMapping.ColumnMappings.Add("DiferenciaBono", "DiferenciaBono")
            tableMapping.ColumnMappings.Add("PorcentajeJornal", "PorcentajeJornal")
            tableMapping.ColumnMappings.Add("PorcentajeBono", "PorcentajeBono")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Descripcion, Codigo, Unidad, Fecha, Jornal, Bono, Tipo, JornalMes1, Jo"& _ 
                "rnalMes2, JornalMes3, JornalMes4, JornalMes5, JornalMes6, JornalMes7, JornalMes8"& _ 
                ", JornalMes9, JornalMes10, JornalMes11, JornalMes12, BonoMes1, BonoMes2, BonoMes"& _ 
                "3, BonoMes4, BonoMes5, BonoMes6, BonoMes7, BonoMes8, BonoMes9, BonoMes10, BonoMe"& _ 
                "s11, BonoMes12, Jornal2daMoneda, Bono2daMoneda, JornalMes12daMoneda, JornalMes22"& _ 
                "daMoneda, JornalMes32daMoneda, JornalMes42daMoneda, JornalMes52daMoneda, JornalM"& _ 
                "es62daMoneda, JornalMes72daMoneda, JornalMes82daMoneda, JornalMes92daMoneda, Jor"& _ 
                "nalMes102daMoneda, JornalMes112daMoneda, JornalMes122daMoneda, BonoMes12daMoneda"& _ 
                ", BonoMes22daMoneda, BonoMes32daMoneda, BonoMes42daMoneda, BonoMes52daMoneda, Bo"& _ 
                "noMes62daMoneda, BonoMes72daMoneda, BonoMes82daMoneda, BonoMes92daMoneda, BonoMe"& _ 
                "s102daMoneda, BonoMes112daMoneda, BonoMes122daMoneda, DiferenciaJornal, Diferenc"& _ 
                "iaBono, PorcentajeJornal, PorcentajeBono FROM MObra"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MObraDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MObraDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MObraDataTable = New MasterAPVDataSet.MObraDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MObraCTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MObraC"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("CodigoSimple", "CodigoSimple")
            tableMapping.ColumnMappings.Add("DescripcionSimple", "DescripcionSimple")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Jornal", "Jornal")
            tableMapping.ColumnMappings.Add("Bono", "Bono")
            tableMapping.ColumnMappings.Add("TotalJornal", "TotalJornal")
            tableMapping.ColumnMappings.Add("TotalBono", "TotalBono")
            tableMapping.ColumnMappings.Add("Jornal2daMoneda", "Jornal2daMoneda")
            tableMapping.ColumnMappings.Add("Bono2daMoneda", "Bono2daMoneda")
            tableMapping.ColumnMappings.Add("TotalJornal2daMoneda", "TotalJornal2daMoneda")
            tableMapping.ColumnMappings.Add("TotalBono2daMoneda", "TotalBono2daMoneda")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Descripcion, Unidad, CodigoSimple, DescripcionSimple, Cantidad, Jornal"& _ 
                ", Bono, TotalJornal, TotalBono, Jornal2daMoneda, Bono2daMoneda, TotalJornal2daMo"& _ 
                "neda, TotalBono2daMoneda, Fecha FROM MObraC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MObraCDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MObraCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MObraCDataTable = New MasterAPVDataSet.MObraCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ValuacionesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Valuaciones"
            tableMapping.ColumnMappings.Add("CodObr", "CodObr")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("NumeroPartida", "NumeroPartida")
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("CodigoCovenin", "CodigoCovenin")
            tableMapping.ColumnMappings.Add("PartidaTexto", "PartidaTexto")
            tableMapping.ColumnMappings.Add("Descripcion1", "Descripcion1")
            tableMapping.ColumnMappings.Add("Descripcion2", "Descripcion2")
            tableMapping.ColumnMappings.Add("Descripcion3", "Descripcion3")
            tableMapping.ColumnMappings.Add("MiniDescripcion", "MiniDescripcion")
            tableMapping.ColumnMappings.Add("CantidadDePartida", "CantidadDePartida")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("PrecioTotal", "PrecioTotal")
            tableMapping.ColumnMappings.Add("TotalGeneral", "TotalGeneral")
            tableMapping.ColumnMappings.Add("CantidadPeriodo", "CantidadPeriodo")
            tableMapping.ColumnMappings.Add("TotalPeriodo", "TotalPeriodo")
            tableMapping.ColumnMappings.Add("CantidadAcumulada", "CantidadAcumulada")
            tableMapping.ColumnMappings.Add("TotalAcumulado", "TotalAcumulado")
            tableMapping.ColumnMappings.Add("CantidadAnterior", "CantidadAnterior")
            tableMapping.ColumnMappings.Add("TotalAnterior", "TotalAnterior")
            tableMapping.ColumnMappings.Add("CantidadAumentoAcumulado", "CantidadAumentoAcumulado")
            tableMapping.ColumnMappings.Add("TotalAumentoAcumulado", "TotalAumentoAcumulado")
            tableMapping.ColumnMappings.Add("AumentoEnPeriodo", "AumentoEnPeriodo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Valuaciones` (`CodObr`, `Periodo`, `NumeroPartida`, `Id`, `CodigoCov"& _ 
                "enin`, `PartidaTexto`, `Descripcion1`, `Descripcion2`, `Descripcion3`, `MiniDesc"& _ 
                "ripcion`, `CantidadDePartida`, `Unidad`, `PrecioUnitario`, `PrecioTotal`, `Total"& _ 
                "General`, `CantidadPeriodo`, `TotalPeriodo`, `CantidadAcumulada`, `TotalAcumulad"& _ 
                "o`, `CantidadAnterior`, `TotalAnterior`, `CantidadAumentoAcumulado`, `TotalAumen"& _ 
                "toAcumulado`, `AumentoEnPeriodo`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodObr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodObr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Periodo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Periodo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumeroPartida", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumeroPartida", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Id", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Id", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CodigoCovenin", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CodigoCovenin", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PartidaTexto", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartidaTexto", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MiniDescripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MiniDescripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CantidadDePartida", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CantidadDePartida", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioTotal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioTotal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TotalGeneral", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalGeneral", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CantidadPeriodo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CantidadPeriodo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TotalPeriodo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalPeriodo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CantidadAcumulada", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CantidadAcumulada", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TotalAcumulado", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalAcumulado", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CantidadAnterior", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CantidadAnterior", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TotalAnterior", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalAnterior", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CantidadAumentoAcumulado", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CantidadAumentoAcumulado", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TotalAumentoAcumulado", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalAumentoAcumulado", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AumentoEnPeriodo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AumentoEnPeriodo", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Valuaciones.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Valuaciones"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.ValuacionesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.ValuacionesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.ValuacionesDataTable = New MasterAPVDataSet.ValuacionesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet.ValuacionesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Valuaciones")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CodObr As String,  _
                    ByVal Periodo As String,  _
                    ByVal NumeroPartida As Global.System.Nullable(Of Double),  _
                    ByVal Id As Global.System.Nullable(Of Double),  _
                    ByVal CodigoCovenin As Global.System.Nullable(Of Double),  _
                    ByVal PartidaTexto As String,  _
                    ByVal Descripcion1 As String,  _
                    ByVal Descripcion2 As String,  _
                    ByVal Descripcion3 As String,  _
                    ByVal MiniDescripcion As String,  _
                    ByVal CantidadDePartida As Global.System.Nullable(Of Double),  _
                    ByVal Unidad As String,  _
                    ByVal PrecioUnitario As Global.System.Nullable(Of Double),  _
                    ByVal PrecioTotal As Global.System.Nullable(Of Double),  _
                    ByVal TotalGeneral As Global.System.Nullable(Of Double),  _
                    ByVal CantidadPeriodo As Global.System.Nullable(Of Double),  _
                    ByVal TotalPeriodo As Global.System.Nullable(Of Double),  _
                    ByVal CantidadAcumulada As Global.System.Nullable(Of Double),  _
                    ByVal TotalAcumulado As Global.System.Nullable(Of Double),  _
                    ByVal CantidadAnterior As Global.System.Nullable(Of Double),  _
                    ByVal TotalAnterior As Global.System.Nullable(Of Double),  _
                    ByVal CantidadAumentoAcumulado As Global.System.Nullable(Of Double),  _
                    ByVal TotalAumentoAcumulado As Global.System.Nullable(Of Double),  _
                    ByVal AumentoEnPeriodo As Global.System.Nullable(Of Double)) As Integer
            If (CodObr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CodObr,String)
            End If
            If (Periodo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Periodo,String)
            End If
            If (NumeroPartida.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NumeroPartida.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Id.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CodigoCovenin.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CodigoCovenin.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PartidaTexto Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PartidaTexto,String)
            End If
            If (Descripcion1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Descripcion1,String)
            End If
            If (Descripcion2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Descripcion2,String)
            End If
            If (Descripcion3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Descripcion3,String)
            End If
            If (MiniDescripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MiniDescripcion,String)
            End If
            If (CantidadDePartida.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CantidadDePartida.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Unidad,String)
            End If
            If (PrecioUnitario.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PrecioUnitario.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PrecioTotal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PrecioTotal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (TotalGeneral.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(TotalGeneral.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (CantidadPeriodo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CantidadPeriodo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (TotalPeriodo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(TotalPeriodo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (CantidadAcumulada.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(CantidadAcumulada.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (TotalAcumulado.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(TotalAcumulado.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (CantidadAnterior.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(CantidadAnterior.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (TotalAnterior.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(TotalAnterior.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (CantidadAumentoAcumulado.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(CantidadAumentoAcumulado.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (TotalAumentoAcumulado.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(TotalAumentoAcumulado.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (AumentoEnPeriodo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(AumentoEnPeriodo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ComputoEQTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ComputoEQ"
            tableMapping.ColumnMappings.Add("CodObr", "CodObr")
            tableMapping.ColumnMappings.Add("NumeroPartida", "NumeroPartida")
            tableMapping.ColumnMappings.Add("CantidadDePartida", "CantidadDePartida")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("Depreciacion", "Depreciacion")
            tableMapping.ColumnMappings.Add("CanTotal", "CanTotal")
            tableMapping.ColumnMappings.Add("BsTotal", "BsTotal")
            tableMapping.ColumnMappings.Add("CanUnitario", "CanUnitario")
            tableMapping.ColumnMappings.Add("BsUnitario", "BsUnitario")
            tableMapping.ColumnMappings.Add("Porcentaje", "Porcentaje")
            tableMapping.ColumnMappings.Add("RecType", "RecType")
            tableMapping.ColumnMappings.Add("Dias", "Dias")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CodObr, NumeroPartida, CantidadDePartida, Codigo, Descripcion, Unidad, Can"& _ 
                "tidad, Costo, Depreciacion, CanTotal, BsTotal, CanUnitario, BsUnitario, Porcenta"& _ 
                "je, RecType, Dias FROM ComputoEQ"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.ComputoEQDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.ComputoEQDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.ComputoEQDataTable = New MasterAPVDataSet.ComputoEQDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ComputoMOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ComputoMO"
            tableMapping.ColumnMappings.Add("CodObr", "CodObr")
            tableMapping.ColumnMappings.Add("NumeroPartida", "NumeroPartida")
            tableMapping.ColumnMappings.Add("CantidadDePartida", "CantidadDePartida")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("CantidadPersonas", "CantidadPersonas")
            tableMapping.ColumnMappings.Add("CantTotPersonas", "CantTotPersonas")
            tableMapping.ColumnMappings.Add("HorasHombre", "HorasHombre")
            tableMapping.ColumnMappings.Add("Jornal", "Jornal")
            tableMapping.ColumnMappings.Add("Bono", "Bono")
            tableMapping.ColumnMappings.Add("JornalBono", "JornalBono")
            tableMapping.ColumnMappings.Add("TotalJornal", "TotalJornal")
            tableMapping.ColumnMappings.Add("TotalBono", "TotalBono")
            tableMapping.ColumnMappings.Add("TotalSalario", "TotalSalario")
            tableMapping.ColumnMappings.Add("SalarioUnidad", "SalarioUnidad")
            tableMapping.ColumnMappings.Add("PresSoc", "PresSoc")
            tableMapping.ColumnMappings.Add("RecType", "RecType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CodObr, NumeroPartida, CantidadDePartida, Codigo, Descripcion, CantidadPer"& _ 
                "sonas, CantTotPersonas, HorasHombre, Jornal, Bono, JornalBono, TotalJornal, Tota"& _ 
                "lBono, TotalSalario, SalarioUnidad, PresSoc, RecType FROM ComputoMO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.ComputoMODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.ComputoMODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.ComputoMODataTable = New MasterAPVDataSet.ComputoMODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ComputoMTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ComputoMT"
            tableMapping.ColumnMappings.Add("CodObr", "CodObr")
            tableMapping.ColumnMappings.Add("NumeroPartida", "NumeroPartida")
            tableMapping.ColumnMappings.Add("CantidadDePartida", "CantidadDePartida")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("CanTotal", "CanTotal")
            tableMapping.ColumnMappings.Add("BsTotal", "BsTotal")
            tableMapping.ColumnMappings.Add("CanUnitario", "CanUnitario")
            tableMapping.ColumnMappings.Add("BsUnitario", "BsUnitario")
            tableMapping.ColumnMappings.Add("Porcentaje", "Porcentaje")
            tableMapping.ColumnMappings.Add("RecType", "RecType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CodObr, NumeroPartida, CantidadDePartida, Codigo, Descripcion, Unidad, Cos"& _ 
                "to, Cantidad, CanTotal, BsTotal, CanUnitario, BsUnitario, Porcentaje, RecType FR"& _ 
                "OM ComputoMT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.ComputoMTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.ComputoMTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.ComputoMTDataTable = New MasterAPVDataSet.ComputoMTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ComputoTRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ComputoTR"
            tableMapping.ColumnMappings.Add("CodObr", "CodObr")
            tableMapping.ColumnMappings.Add("NumeroPartida", "NumeroPartida")
            tableMapping.ColumnMappings.Add("CantidadDePartida", "CantidadDePartida")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("CanTotal", "CanTotal")
            tableMapping.ColumnMappings.Add("BsTotal", "BsTotal")
            tableMapping.ColumnMappings.Add("CanUnitario", "CanUnitario")
            tableMapping.ColumnMappings.Add("BsUnitario", "BsUnitario")
            tableMapping.ColumnMappings.Add("Porcentaje", "Porcentaje")
            tableMapping.ColumnMappings.Add("RecType", "RecType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CodObr, NumeroPartida, CantidadDePartida, Codigo, Descripcion, Unidad, Cos"& _ 
                "to, Cantidad, CanTotal, BsTotal, CanUnitario, BsUnitario, Porcentaje, RecType FR"& _ 
                "OM ComputoTR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.ComputoTRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.ComputoTRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.ComputoTRDataTable = New MasterAPVDataSet.ComputoTRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IndPACTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IndPAC"
            tableMapping.ColumnMappings.Add("GRUPO", "GRUPO")
            tableMapping.ColumnMappings.Add("AGRUPACION", "AGRUPACION")
            tableMapping.ColumnMappings.Add("AÑO", "AÑO")
            tableMapping.ColumnMappings.Add("IDENTIFICACION", "IDENTIFICACION")
            tableMapping.ColumnMappings.Add("MES1", "MES1")
            tableMapping.ColumnMappings.Add("MES2", "MES2")
            tableMapping.ColumnMappings.Add("MES3", "MES3")
            tableMapping.ColumnMappings.Add("MES4", "MES4")
            tableMapping.ColumnMappings.Add("MES5", "MES5")
            tableMapping.ColumnMappings.Add("MES6", "MES6")
            tableMapping.ColumnMappings.Add("MES7", "MES7")
            tableMapping.ColumnMappings.Add("MES8", "MES8")
            tableMapping.ColumnMappings.Add("MES9", "MES9")
            tableMapping.ColumnMappings.Add("MES10", "MES10")
            tableMapping.ColumnMappings.Add("MES11", "MES11")
            tableMapping.ColumnMappings.Add("MES12", "MES12")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GRUPO, AGRUPACION, AÑO, IDENTIFICACION, MES1, MES2, MES3, MES4, MES5, MES6"& _ 
                ", MES7, MES8, MES9, MES10, MES11, MES12 FROM IndPAC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.IndPACDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.IndPACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.IndPACDataTable = New MasterAPVDataSet.IndPACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MatCompDDTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MatCompDD"
            tableMapping.ColumnMappings.Add("CodigoMatC", "CodigoMatC")
            tableMapping.ColumnMappings.Add("DescMMat", "DescMMat")
            tableMapping.ColumnMappings.Add("DescMatC", "DescMatC")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("AGRUPACION", "AGRUPACION")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CodigoMatC, DescMMat, DescMatC, Unidad, Cantidad, Precio, AGRUPACION FROM "& _ 
                "MatCompDD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MatCompDDDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MatCompDDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MatCompDDDataTable = New MasterAPVDataSet.MatCompDDDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MaterialBCVTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MaterialBCV"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("GrupoBCV", "GrupoBCV")
            tableMapping.ColumnMappings.Add("AGRUPACION", "AGRUPACION")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Suplidor", "Suplidor")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("PorcentajeDiferencia", "PorcentajeDiferencia")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Codigo, Descripcion, Fecha, GrupoBCV, AGRUPACION, Unidad, Suplidor, Precio"& _ 
                "Unitario, PorcentajeDiferencia FROM MaterialBCV"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MaterialBCVDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MaterialBCVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MaterialBCVDataTable = New MasterAPVDataSet.MaterialBCVDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MatObrTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MatObr"
            tableMapping.ColumnMappings.Add("cod-obr-apu", "cod-obr-apu")
            tableMapping.ColumnMappings.Add("rec-typ-apu", "rec-typ-apu")
            tableMapping.ColumnMappings.Add("num-par-apu", "num-par-apu")
            tableMapping.ColumnMappings.Add("cod-mat-apu", "cod-mat-apu")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("id-mat-apu", "id-mat-apu")
            tableMapping.ColumnMappings.Add("und-mat-apu", "und-mat-apu")
            tableMapping.ColumnMappings.Add("cnt-mat-apu", "cnt-mat-apu")
            tableMapping.ColumnMappings.Add("cst-mat-apu", "cst-mat-apu")
            tableMapping.ColumnMappings.Add("tot-mat-apu", "tot-mat-apu")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [cod-obr-apu], [rec-typ-apu], [num-par-apu], [cod-mat-apu], Descripcion, ["& _ 
                "id-mat-apu], [und-mat-apu], [cnt-mat-apu], [cst-mat-apu], [tot-mat-apu] FROM Mat"& _ 
                "Obr"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.MatObrDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.MatObrDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.MatObrDataTable = New MasterAPVDataSet.MatObrDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PartObrTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PartObr"
            tableMapping.ColumnMappings.Add("cod-obr-apu", "cod-obr-apu")
            tableMapping.ColumnMappings.Add("desc-obr", "desc-obr")
            tableMapping.ColumnMappings.Add("rec-typ-apu", "rec-typ-apu")
            tableMapping.ColumnMappings.Add("num-par-apu", "num-par-apu")
            tableMapping.ColumnMappings.Add("cod-par-m", "cod-par-m")
            tableMapping.ColumnMappings.Add("Descripcion1", "Descripcion1")
            tableMapping.ColumnMappings.Add("Descripcion2", "Descripcion2")
            tableMapping.ColumnMappings.Add("Descripcion3", "Descripcion3")
            tableMapping.ColumnMappings.Add("MiniDescripcion", "MiniDescripcion")
            tableMapping.ColumnMappings.Add("CodigoCovenin", "CodigoCovenin")
            tableMapping.ColumnMappings.Add("PartidaTexto", "PartidaTexto")
            tableMapping.ColumnMappings.Add("can-ana-apu", "can-ana-apu")
            tableMapping.ColumnMappings.Add("ren-par-apu", "ren-par-apu")
            tableMapping.ColumnMappings.Add("can-apr-apu", "can-apr-apu")
            tableMapping.ColumnMappings.Add("und-par-apu", "und-par-apu")
            tableMapping.ColumnMappings.Add("pun-par-apu", "pun-par-apu")
            tableMapping.ColumnMappings.Add("pun-ana-apu", "pun-ana-apu")
            tableMapping.ColumnMappings.Add("pun-adp-apu", "pun-adp-apu")
            tableMapping.ColumnMappings.Add("ptot-pr-apu", "ptot-pr-apu")
            tableMapping.ColumnMappings.Add("tot-gen-apu", "tot-gen-apu")
            tableMapping.ColumnMappings.Add("tit-is-apu", "tit-is-apu")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [cod-obr-apu], [desc-obr], [rec-typ-apu], [num-par-apu], [cod-par-m], Desc"& _ 
                "ripcion1, Descripcion2, Descripcion3, MiniDescripcion, CodigoCovenin, PartidaTex"& _ 
                "to, [can-ana-apu], [ren-par-apu], [can-apr-apu], [und-par-apu], [pun-par-apu], ["& _ 
                "pun-ana-apu], [pun-adp-apu], [ptot-pr-apu], [tot-gen-apu], [tit-is-apu] FROM Par"& _ 
                "tObr"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet.PartObrDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet.PartObrDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet.PartObrDataTable = New MasterAPVDataSet.PartObrDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
