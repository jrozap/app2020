'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9151
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("MasterAPVDataSet3"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class MasterAPVDataSet3
    Inherits Global.System.Data.DataSet
    
    Private tableMasterMaterial As MasterMaterialDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MasterMaterial")) Is Nothing) Then
                MyBase.Tables.Add(New MasterMaterialDataTable(ds.Tables("MasterMaterial")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MasterMaterial() As MasterMaterialDataTable
        Get
            Return Me.tableMasterMaterial
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As MasterAPVDataSet3 = CType(MyBase.Clone,MasterAPVDataSet3)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MasterMaterial")) Is Nothing) Then
                MyBase.Tables.Add(New MasterMaterialDataTable(ds.Tables("MasterMaterial")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMasterMaterial = CType(MyBase.Tables("MasterMaterial"),MasterMaterialDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMasterMaterial) Is Nothing) Then
                Me.tableMasterMaterial.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "MasterAPVDataSet3"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MasterAPVDataSet3.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMasterMaterial = New MasterMaterialDataTable
        MyBase.Tables.Add(Me.tableMasterMaterial)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMasterMaterial() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As MasterAPVDataSet3 = New MasterAPVDataSet3
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub MasterMaterialRowChangeEventHandler(ByVal sender As Object, ByVal e As MasterMaterialRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MasterMaterialDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnDiferencia As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnGrupoBCV As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnSuplidor As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPrecioMes1 As Global.System.Data.DataColumn
        
        Private columnPrecioMes2 As Global.System.Data.DataColumn
        
        Private columnPrecioMes3 As Global.System.Data.DataColumn
        
        Private columnPrecioMes4 As Global.System.Data.DataColumn
        
        Private columnPrecioMes5 As Global.System.Data.DataColumn
        
        Private columnPrecioMes6 As Global.System.Data.DataColumn
        
        Private columnPrecioMes7 As Global.System.Data.DataColumn
        
        Private columnPrecioMes8 As Global.System.Data.DataColumn
        
        Private columnPrecioMes9 As Global.System.Data.DataColumn
        
        Private columnPrecioMes10 As Global.System.Data.DataColumn
        
        Private columnPrecioMes11 As Global.System.Data.DataColumn
        
        Private columnPrecioMes12 As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario As Global.System.Data.DataColumn
        
        Private columnPorcentajeDiferencia As Global.System.Data.DataColumn
        
        Private columnPrecioMes12daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes22daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes32daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes42daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes52daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes62daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes72daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes82daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes92daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes102daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes112daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioMes122daMoneda As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario2daMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MasterMaterial"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrupoBCVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrupoBCV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuplidorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuplidor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDiferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes12daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes12daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes22daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes22daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes32daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes32daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes42daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes42daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes52daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes52daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes62daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes62daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes72daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes72daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes82daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes82daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes92daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes92daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes102daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes102daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes112daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes112daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioMes122daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioMes122daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitario2daMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario2daMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MasterMaterialRow
            Get
                Return CType(Me.Rows(index),MasterMaterialRow)
            End Get
        End Property
        
        Public Event MasterMaterialRowChanging As MasterMaterialRowChangeEventHandler
        
        Public Event MasterMaterialRowChanged As MasterMaterialRowChangeEventHandler
        
        Public Event MasterMaterialRowDeleting As MasterMaterialRowChangeEventHandler
        
        Public Event MasterMaterialRowDeleted As MasterMaterialRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMasterMaterialRow(ByVal row As MasterMaterialRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMasterMaterialRow( _
                    ByVal Codigo As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal Diferencia As Double,  _
                    ByVal Fecha As Date,  _
                    ByVal GrupoBCV As Double,  _
                    ByVal Unidad As String,  _
                    ByVal Suplidor As String,  _
                    ByVal Tipo As Double,  _
                    ByVal ID As Double,  _
                    ByVal PrecioMes1 As Double,  _
                    ByVal PrecioMes2 As Double,  _
                    ByVal PrecioMes3 As Double,  _
                    ByVal PrecioMes4 As Double,  _
                    ByVal PrecioMes5 As Double,  _
                    ByVal PrecioMes6 As Double,  _
                    ByVal PrecioMes7 As Double,  _
                    ByVal PrecioMes8 As Double,  _
                    ByVal PrecioMes9 As Double,  _
                    ByVal PrecioMes10 As Double,  _
                    ByVal PrecioMes11 As Double,  _
                    ByVal PrecioMes12 As Double,  _
                    ByVal PrecioUnitario As Double,  _
                    ByVal PorcentajeDiferencia As String,  _
                    ByVal PrecioMes12daMoneda As Double,  _
                    ByVal PrecioMes22daMoneda As Double,  _
                    ByVal PrecioMes32daMoneda As Double,  _
                    ByVal PrecioMes42daMoneda As Double,  _
                    ByVal PrecioMes52daMoneda As Double,  _
                    ByVal PrecioMes62daMoneda As Double,  _
                    ByVal PrecioMes72daMoneda As Double,  _
                    ByVal PrecioMes82daMoneda As Double,  _
                    ByVal PrecioMes92daMoneda As Double,  _
                    ByVal PrecioMes102daMoneda As Double,  _
                    ByVal PrecioMes112daMoneda As Double,  _
                    ByVal PrecioMes122daMoneda As Double,  _
                    ByVal PrecioUnitario2daMoneda As Double) As MasterMaterialRow
            Dim rowMasterMaterialRow As MasterMaterialRow = CType(Me.NewRow,MasterMaterialRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Descripcion, Diferencia, Fecha, GrupoBCV, Unidad, Suplidor, Tipo, ID, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes6, PrecioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, PrecioUnitario, PorcentajeDiferencia, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, PrecioMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, PrecioMes112daMoneda, PrecioMes122daMoneda, PrecioUnitario2daMoneda}
            rowMasterMaterialRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMasterMaterialRow)
            Return rowMasterMaterialRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MasterMaterialDataTable = CType(MyBase.Clone,MasterMaterialDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MasterMaterialDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnDiferencia = MyBase.Columns("Diferencia")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnGrupoBCV = MyBase.Columns("GrupoBCV")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnSuplidor = MyBase.Columns("Suplidor")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnID = MyBase.Columns("ID")
            Me.columnPrecioMes1 = MyBase.Columns("PrecioMes1")
            Me.columnPrecioMes2 = MyBase.Columns("PrecioMes2")
            Me.columnPrecioMes3 = MyBase.Columns("PrecioMes3")
            Me.columnPrecioMes4 = MyBase.Columns("PrecioMes4")
            Me.columnPrecioMes5 = MyBase.Columns("PrecioMes5")
            Me.columnPrecioMes6 = MyBase.Columns("PrecioMes6")
            Me.columnPrecioMes7 = MyBase.Columns("PrecioMes7")
            Me.columnPrecioMes8 = MyBase.Columns("PrecioMes8")
            Me.columnPrecioMes9 = MyBase.Columns("PrecioMes9")
            Me.columnPrecioMes10 = MyBase.Columns("PrecioMes10")
            Me.columnPrecioMes11 = MyBase.Columns("PrecioMes11")
            Me.columnPrecioMes12 = MyBase.Columns("PrecioMes12")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnPorcentajeDiferencia = MyBase.Columns("PorcentajeDiferencia")
            Me.columnPrecioMes12daMoneda = MyBase.Columns("PrecioMes12daMoneda")
            Me.columnPrecioMes22daMoneda = MyBase.Columns("PrecioMes22daMoneda")
            Me.columnPrecioMes32daMoneda = MyBase.Columns("PrecioMes32daMoneda")
            Me.columnPrecioMes42daMoneda = MyBase.Columns("PrecioMes42daMoneda")
            Me.columnPrecioMes52daMoneda = MyBase.Columns("PrecioMes52daMoneda")
            Me.columnPrecioMes62daMoneda = MyBase.Columns("PrecioMes62daMoneda")
            Me.columnPrecioMes72daMoneda = MyBase.Columns("PrecioMes72daMoneda")
            Me.columnPrecioMes82daMoneda = MyBase.Columns("PrecioMes82daMoneda")
            Me.columnPrecioMes92daMoneda = MyBase.Columns("PrecioMes92daMoneda")
            Me.columnPrecioMes102daMoneda = MyBase.Columns("PrecioMes102daMoneda")
            Me.columnPrecioMes112daMoneda = MyBase.Columns("PrecioMes112daMoneda")
            Me.columnPrecioMes122daMoneda = MyBase.Columns("PrecioMes122daMoneda")
            Me.columnPrecioUnitario2daMoneda = MyBase.Columns("PrecioUnitario2daMoneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnDiferencia = New Global.System.Data.DataColumn("Diferencia", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiferencia)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnGrupoBCV = New Global.System.Data.DataColumn("GrupoBCV", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrupoBCV)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnSuplidor = New Global.System.Data.DataColumn("Suplidor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuplidor)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPrecioMes1 = New Global.System.Data.DataColumn("PrecioMes1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes1)
            Me.columnPrecioMes2 = New Global.System.Data.DataColumn("PrecioMes2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes2)
            Me.columnPrecioMes3 = New Global.System.Data.DataColumn("PrecioMes3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes3)
            Me.columnPrecioMes4 = New Global.System.Data.DataColumn("PrecioMes4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes4)
            Me.columnPrecioMes5 = New Global.System.Data.DataColumn("PrecioMes5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes5)
            Me.columnPrecioMes6 = New Global.System.Data.DataColumn("PrecioMes6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes6)
            Me.columnPrecioMes7 = New Global.System.Data.DataColumn("PrecioMes7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes7)
            Me.columnPrecioMes8 = New Global.System.Data.DataColumn("PrecioMes8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes8)
            Me.columnPrecioMes9 = New Global.System.Data.DataColumn("PrecioMes9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes9)
            Me.columnPrecioMes10 = New Global.System.Data.DataColumn("PrecioMes10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes10)
            Me.columnPrecioMes11 = New Global.System.Data.DataColumn("PrecioMes11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes11)
            Me.columnPrecioMes12 = New Global.System.Data.DataColumn("PrecioMes12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12)
            Me.columnPrecioUnitario = New Global.System.Data.DataColumn("PrecioUnitario", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnPorcentajeDiferencia = New Global.System.Data.DataColumn("PorcentajeDiferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDiferencia)
            Me.columnPrecioMes12daMoneda = New Global.System.Data.DataColumn("PrecioMes12daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes12daMoneda)
            Me.columnPrecioMes22daMoneda = New Global.System.Data.DataColumn("PrecioMes22daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes22daMoneda)
            Me.columnPrecioMes32daMoneda = New Global.System.Data.DataColumn("PrecioMes32daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes32daMoneda)
            Me.columnPrecioMes42daMoneda = New Global.System.Data.DataColumn("PrecioMes42daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes42daMoneda)
            Me.columnPrecioMes52daMoneda = New Global.System.Data.DataColumn("PrecioMes52daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes52daMoneda)
            Me.columnPrecioMes62daMoneda = New Global.System.Data.DataColumn("PrecioMes62daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes62daMoneda)
            Me.columnPrecioMes72daMoneda = New Global.System.Data.DataColumn("PrecioMes72daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes72daMoneda)
            Me.columnPrecioMes82daMoneda = New Global.System.Data.DataColumn("PrecioMes82daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes82daMoneda)
            Me.columnPrecioMes92daMoneda = New Global.System.Data.DataColumn("PrecioMes92daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes92daMoneda)
            Me.columnPrecioMes102daMoneda = New Global.System.Data.DataColumn("PrecioMes102daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes102daMoneda)
            Me.columnPrecioMes112daMoneda = New Global.System.Data.DataColumn("PrecioMes112daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes112daMoneda)
            Me.columnPrecioMes122daMoneda = New Global.System.Data.DataColumn("PrecioMes122daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioMes122daMoneda)
            Me.columnPrecioUnitario2daMoneda = New Global.System.Data.DataColumn("PrecioUnitario2daMoneda", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario2daMoneda)
            Me.columnDescripcion.MaxLength = 55
            Me.columnUnidad.MaxLength = 5
            Me.columnSuplidor.MaxLength = 48
            Me.columnPorcentajeDiferencia.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMasterMaterialRow() As MasterMaterialRow
            Return CType(Me.NewRow,MasterMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MasterMaterialRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MasterMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MasterMaterialRowChangedEvent) Is Nothing) Then
                RaiseEvent MasterMaterialRowChanged(Me, New MasterMaterialRowChangeEvent(CType(e.Row,MasterMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MasterMaterialRowChangingEvent) Is Nothing) Then
                RaiseEvent MasterMaterialRowChanging(Me, New MasterMaterialRowChangeEvent(CType(e.Row,MasterMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MasterMaterialRowDeletedEvent) Is Nothing) Then
                RaiseEvent MasterMaterialRowDeleted(Me, New MasterMaterialRowChangeEvent(CType(e.Row,MasterMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MasterMaterialRowDeletingEvent) Is Nothing) Then
                RaiseEvent MasterMaterialRowDeleting(Me, New MasterMaterialRowChangeEvent(CType(e.Row,MasterMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMasterMaterialRow(ByVal row As MasterMaterialRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MasterAPVDataSet3 = New MasterAPVDataSet3
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MasterMaterialDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MasterMaterialRow
        Inherits Global.System.Data.DataRow
        
        Private tableMasterMaterial As MasterMaterialDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMasterMaterial = CType(Me.Table,MasterMaterialDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.CodigoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diferencia() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.DiferenciaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diferencia' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.DiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrupoBCV() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.GrupoBCVColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrupoBCV' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.GrupoBCVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unidad' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Suplidor() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.SuplidorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suplidor' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.SuplidorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.TipoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes1' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes2' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes3' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes4' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes5' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes6' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes7' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes8' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes9() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes9Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes9' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes10() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes10Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes10' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes11() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes11Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes11' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes12Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioUnitarioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDiferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PorcentajeDiferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeDiferencia' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PorcentajeDiferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes12daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes12daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes12daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes12daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes22daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes22daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes22daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes22daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes32daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes32daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes32daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes32daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes42daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes42daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes42daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes42daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes52daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes52daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes52daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes52daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes62daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes62daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes62daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes62daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes72daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes72daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes72daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes72daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes82daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes82daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes82daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes82daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes92daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes92daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes92daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes92daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes102daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes102daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes102daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes102daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes112daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes112daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes112daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes112daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioMes122daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioMes122daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioMes122daMoneda' in table 'MasterMaterial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioMes122daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario2daMoneda() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMasterMaterial.PrecioUnitario2daMonedaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioUnitario2daMoneda' in table 'MasterMaterial' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasterMaterial.PrecioUnitario2daMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableMasterMaterial.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableMasterMaterial.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.DiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiferenciaNull()
            Me(Me.tableMasterMaterial.DiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMasterMaterial.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrupoBCVNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.GrupoBCVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrupoBCVNull()
            Me(Me.tableMasterMaterial.GrupoBCVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tableMasterMaterial.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuplidorNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.SuplidorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuplidorNull()
            Me(Me.tableMasterMaterial.SuplidorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableMasterMaterial.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableMasterMaterial.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes1Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes1Null()
            Me(Me.tableMasterMaterial.PrecioMes1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes2Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes2Null()
            Me(Me.tableMasterMaterial.PrecioMes2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes3Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes3Null()
            Me(Me.tableMasterMaterial.PrecioMes3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes4Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes4Null()
            Me(Me.tableMasterMaterial.PrecioMes4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes5Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes5Null()
            Me(Me.tableMasterMaterial.PrecioMes5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes6Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes6Null()
            Me(Me.tableMasterMaterial.PrecioMes6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes7Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes7Null()
            Me(Me.tableMasterMaterial.PrecioMes7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes8Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes8Null()
            Me(Me.tableMasterMaterial.PrecioMes8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes9Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes9Null()
            Me(Me.tableMasterMaterial.PrecioMes9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes10Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes10Null()
            Me(Me.tableMasterMaterial.PrecioMes10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes11Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes11Null()
            Me(Me.tableMasterMaterial.PrecioMes11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12Null() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12Null()
            Me(Me.tableMasterMaterial.PrecioMes12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioUnitarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitarioNull()
            Me(Me.tableMasterMaterial.PrecioUnitarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeDiferenciaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PorcentajeDiferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeDiferenciaNull()
            Me(Me.tableMasterMaterial.PorcentajeDiferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes12daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes12daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes12daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes12daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes22daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes22daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes22daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes22daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes32daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes32daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes32daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes32daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes42daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes42daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes42daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes42daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes52daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes52daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes52daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes52daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes62daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes62daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes62daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes62daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes72daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes72daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes72daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes72daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes82daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes82daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes82daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes82daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes92daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes92daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes92daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes92daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes102daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes102daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes102daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes102daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes112daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes112daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes112daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes112daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioMes122daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioMes122daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioMes122daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioMes122daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitario2daMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMasterMaterial.PrecioUnitario2daMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitario2daMonedaNull()
            Me(Me.tableMasterMaterial.PrecioUnitario2daMonedaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MasterMaterialRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MasterMaterialRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MasterMaterialRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MasterMaterialRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace MasterAPVDataSet3TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MasterMaterialTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MasterMaterial"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Diferencia", "Diferencia")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("GrupoBCV", "GrupoBCV")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Suplidor", "Suplidor")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PrecioMes1", "PrecioMes1")
            tableMapping.ColumnMappings.Add("PrecioMes2", "PrecioMes2")
            tableMapping.ColumnMappings.Add("PrecioMes3", "PrecioMes3")
            tableMapping.ColumnMappings.Add("PrecioMes4", "PrecioMes4")
            tableMapping.ColumnMappings.Add("PrecioMes5", "PrecioMes5")
            tableMapping.ColumnMappings.Add("PrecioMes6", "PrecioMes6")
            tableMapping.ColumnMappings.Add("PrecioMes7", "PrecioMes7")
            tableMapping.ColumnMappings.Add("PrecioMes8", "PrecioMes8")
            tableMapping.ColumnMappings.Add("PrecioMes9", "PrecioMes9")
            tableMapping.ColumnMappings.Add("PrecioMes10", "PrecioMes10")
            tableMapping.ColumnMappings.Add("PrecioMes11", "PrecioMes11")
            tableMapping.ColumnMappings.Add("PrecioMes12", "PrecioMes12")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("PorcentajeDiferencia", "PorcentajeDiferencia")
            tableMapping.ColumnMappings.Add("PrecioMes12daMoneda", "PrecioMes12daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes22daMoneda", "PrecioMes22daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes32daMoneda", "PrecioMes32daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes42daMoneda", "PrecioMes42daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes52daMoneda", "PrecioMes52daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes62daMoneda", "PrecioMes62daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes72daMoneda", "PrecioMes72daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes82daMoneda", "PrecioMes82daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes92daMoneda", "PrecioMes92daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes102daMoneda", "PrecioMes102daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes112daMoneda", "PrecioMes112daMoneda")
            tableMapping.ColumnMappings.Add("PrecioMes122daMoneda", "PrecioMes122daMoneda")
            tableMapping.ColumnMappings.Add("PrecioUnitario2daMoneda", "PrecioUnitario2daMoneda")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MasterMaterial` (`Codigo`, `Descripcion`, `Diferencia`, `Fecha`, `Gr"& _ 
                "upoBCV`, `Unidad`, `Suplidor`, `Tipo`, `ID`, `PrecioMes1`, `PrecioMes2`, `Precio"& _ 
                "Mes3`, `PrecioMes4`, `PrecioMes5`, `PrecioMes6`, `PrecioMes7`, `PrecioMes8`, `Pr"& _ 
                "ecioMes9`, `PrecioMes10`, `PrecioMes11`, `PrecioMes12`, `PrecioUnitario`, `Porce"& _ 
                "ntajeDiferencia`, `PrecioMes12daMoneda`, `PrecioMes22daMoneda`, `PrecioMes32daMo"& _ 
                "neda`, `PrecioMes42daMoneda`, `PrecioMes52daMoneda`, `PrecioMes62daMoneda`, `Pre"& _ 
                "cioMes72daMoneda`, `PrecioMes82daMoneda`, `PrecioMes92daMoneda`, `PrecioMes102da"& _ 
                "Moneda`, `PrecioMes112daMoneda`, `PrecioMes122daMoneda`, `PrecioUnitario2daMoned"& _ 
                "a`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Codigo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Codigo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Descripcion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Descripcion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Diferencia", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Diferencia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Fecha", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fecha", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("GrupoBCV", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "GrupoBCV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Unidad", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Unidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Suplidor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Suplidor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tipo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tipo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes9", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes9", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes10", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes10", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes11", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes11", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PorcentajeDiferencia", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PorcentajeDiferencia", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes12daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes12daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes22daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes22daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes32daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes32daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes42daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes42daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes52daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes52daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes62daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes62daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes72daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes72daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes82daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes82daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes92daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes92daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes102daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes102daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes112daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes112daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioMes122daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioMes122daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PrecioUnitario2daMoneda", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrecioUnitario2daMoneda", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Codigo, Descripcion, Diferencia, Fecha, GrupoBCV, Unidad, Suplidor, Tipo, "& _ 
                "ID, PrecioMes1, PrecioMes2, PrecioMes3, PrecioMes4, PrecioMes5, PrecioMes6, Prec"& _ 
                "ioMes7, PrecioMes8, PrecioMes9, PrecioMes10, PrecioMes11, PrecioMes12, PrecioUni"& _ 
                "tario, PorcentajeDiferencia, PrecioMes12daMoneda, PrecioMes22daMoneda, PrecioMes"& _ 
                "32daMoneda, PrecioMes42daMoneda, PrecioMes52daMoneda, PrecioMes62daMoneda, Preci"& _ 
                "oMes72daMoneda, PrecioMes82daMoneda, PrecioMes92daMoneda, PrecioMes102daMoneda, "& _ 
                "PrecioMes112daMoneda, PrecioMes122daMoneda, PrecioUnitario2daMoneda FROM MasterM"& _ 
                "aterial"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MasterAPVDataSet3.MasterMaterialDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MasterAPVDataSet3.MasterMaterialDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MasterAPVDataSet3.MasterMaterialDataTable = New MasterAPVDataSet3.MasterMaterialDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MasterAPVDataSet3.MasterMaterialDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MasterAPVDataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "MasterMaterial")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Codigo As Global.System.Nullable(Of Double),  _
                    ByVal Descripcion As String,  _
                    ByVal Diferencia As Global.System.Nullable(Of Double),  _
                    ByVal Fecha As Global.System.Nullable(Of Date),  _
                    ByVal GrupoBCV As Global.System.Nullable(Of Double),  _
                    ByVal Unidad As String,  _
                    ByVal Suplidor As String,  _
                    ByVal Tipo As Global.System.Nullable(Of Double),  _
                    ByVal ID As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes1 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes2 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes3 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes4 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes5 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes6 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes7 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes8 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes9 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes10 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes11 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes12 As Global.System.Nullable(Of Double),  _
                    ByVal PrecioUnitario As Global.System.Nullable(Of Double),  _
                    ByVal PorcentajeDiferencia As String,  _
                    ByVal PrecioMes12daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes22daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes32daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes42daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes52daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes62daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes72daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes82daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes92daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes102daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes112daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioMes122daMoneda As Global.System.Nullable(Of Double),  _
                    ByVal PrecioUnitario2daMoneda As Global.System.Nullable(Of Double)) As Integer
            If (Codigo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Codigo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Descripcion,String)
            End If
            If (Diferencia.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Diferencia.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (GrupoBCV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(GrupoBCV.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Unidad,String)
            End If
            If (Suplidor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Suplidor,String)
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Tipo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PrecioMes1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PrecioMes2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrecioMes3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PrecioMes4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PrecioMes5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PrecioMes6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PrecioMes7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PrecioMes8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PrecioMes9.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(PrecioMes10.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PrecioMes11.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PrecioMes12.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (PrecioUnitario.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PrecioUnitario.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (PorcentajeDiferencia Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PorcentajeDiferencia,String)
            End If
            If (PrecioMes12daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PrecioMes12daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes22daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(PrecioMes22daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes32daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(PrecioMes32daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes42daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(PrecioMes42daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes52daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(PrecioMes52daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes62daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(PrecioMes62daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes72daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(PrecioMes72daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes82daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(PrecioMes82daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes92daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(PrecioMes92daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes102daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(PrecioMes102daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes112daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(PrecioMes112daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (PrecioMes122daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(PrecioMes122daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (PrecioUnitario2daMoneda.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(PrecioUnitario2daMoneda.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
