'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9151
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ObrasAPO"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ObrasAPO
    Inherits Global.System.Data.DataSet
    
    Private tableobras As obrasDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("obras")) Is Nothing) Then
                MyBase.Tables.Add(New obrasDataTable(ds.Tables("obras")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property obras() As obrasDataTable
        Get
            Return Me.tableobras
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ObrasAPO = CType(MyBase.Clone,ObrasAPO)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("obras")) Is Nothing) Then
                MyBase.Tables.Add(New obrasDataTable(ds.Tables("obras")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableobras = CType(MyBase.Tables("obras"),obrasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableobras) Is Nothing) Then
                Me.tableobras.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ObrasAPO"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet11.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableobras = New obrasDataTable
        MyBase.Tables.Add(Me.tableobras)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeobras() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ObrasAPO = New ObrasAPO
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub obrasRowChangeEventHandler(ByVal sender As Object, ByVal e As obrasRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class obrasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private _columncod_obr As Global.System.Data.DataColumn
        
        Private _columndesc_obr As Global.System.Data.DataColumn
        
        Private columnObra As Global.System.Data.DataColumn
        
        Private columnFCAS As Global.System.Data.DataColumn
        
        Private columnAdministracion As Global.System.Data.DataColumn
        
        Private columnUtilidad As Global.System.Data.DataColumn
        
        Private columnRendimiento As Global.System.Data.DataColumn
        
        Private columnDig_Rend As Global.System.Data.DataColumn
        
        Private columnIVA As Global.System.Data.DataColumn
        
        Private columnCant_Part As Global.System.Data.DataColumn
        
        Private columnCant_Analisis As Global.System.Data.DataColumn
        
        Private columnDiv_Mat As Global.System.Data.DataColumn
        
        Private columnAPO As Global.System.Data.DataColumn
        
        Private columnCIV As Global.System.Data.DataColumn
        
        Private columnLULO As Global.System.Data.DataColumn
        
        Private columnBasePRAPO As Global.System.Data.DataColumn
        
        Private columnFecBPRAPO As Global.System.Data.DataColumn
        
        Private columnBaseMTAPO As Global.System.Data.DataColumn
        
        Private columnFecBMTAPO As Global.System.Data.DataColumn
        
        Private columnBaseEQAPO As Global.System.Data.DataColumn
        
        Private columnFecBEQAPO As Global.System.Data.DataColumn
        
        Private columnBaseMOAPO As Global.System.Data.DataColumn
        
        Private columnFecBMOAPO As Global.System.Data.DataColumn
        
        Private columnBaseTRAPO As Global.System.Data.DataColumn
        
        Private columnFecBTRAPO As Global.System.Data.DataColumn
        
        Private columnBasePRCIV As Global.System.Data.DataColumn
        
        Private columnFecBPRCIV As Global.System.Data.DataColumn
        
        Private columnBaseMTCIV As Global.System.Data.DataColumn
        
        Private columnFecBMTCIV As Global.System.Data.DataColumn
        
        Private columnBaseEQCIV As Global.System.Data.DataColumn
        
        Private columnFecBEQCIV As Global.System.Data.DataColumn
        
        Private columnBaseMOCIV As Global.System.Data.DataColumn
        
        Private columnFecBMOCIV As Global.System.Data.DataColumn
        
        Private columnBaseTRCIV As Global.System.Data.DataColumn
        
        Private columnFecBTRCIV As Global.System.Data.DataColumn
        
        Private columnBasePRLulo As Global.System.Data.DataColumn
        
        Private columnFecBPRLulo As Global.System.Data.DataColumn
        
        Private columnBaseMTLulo As Global.System.Data.DataColumn
        
        Private columnFecBMTLulo As Global.System.Data.DataColumn
        
        Private columnBaseEQLulo As Global.System.Data.DataColumn
        
        Private columnFecBEQLulo As Global.System.Data.DataColumn
        
        Private columnBaseMOLulo As Global.System.Data.DataColumn
        
        Private columnFecBMOLulo As Global.System.Data.DataColumn
        
        Private columnMoneda_P As Global.System.Data.DataColumn
        
        Private columnMoneda_S As Global.System.Data.DataColumn
        
        Private columnPropietario As Global.System.Data.DataColumn
        
        Private columnIngFirma As Global.System.Data.DataColumn
        
        Private columnCIV_Firma As Global.System.Data.DataColumn
        
        Private columnIngRevisa As Global.System.Data.DataColumn
        
        Private columnCIV_Revisa As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "obras"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _cod_obrColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columncod_obr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _desc_obrColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columndesc_obr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFCAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdministracionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdministracion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UtilidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUtilidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RendimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRendimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dig_RendColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDig_Rend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cant_PartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCant_Part
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cant_AnalisisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCant_Analisis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Div_MatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiv_Mat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LULOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLULO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BasePRAPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasePRAPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBPRAPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBPRAPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseMTAPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseMTAPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBMTAPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBMTAPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseEQAPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseEQAPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBEQAPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBEQAPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseMOAPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseMOAPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBMOAPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBMOAPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseTRAPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseTRAPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBTRAPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBTRAPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BasePRCIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasePRCIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBPRCIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBPRCIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseMTCIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseMTCIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBMTCIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBMTCIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseEQCIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseEQCIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBEQCIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBEQCIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseMOCIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseMOCIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBMOCIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBMOCIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseTRCIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseTRCIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBTRCIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBTRCIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BasePRLuloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasePRLulo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBPRLuloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBPRLulo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseMTLuloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseMTLulo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBMTLuloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBMTLulo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseEQLuloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseEQLulo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBEQLuloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBEQLulo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseMOLuloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseMOLulo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecBMOLuloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecBMOLulo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Moneda_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Moneda_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropietarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropietario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngFirmaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngFirma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIV_FirmaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIV_Firma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngRevisaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngRevisa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIV_RevisaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIV_Revisa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As obrasRow
            Get
                Return CType(Me.Rows(index),obrasRow)
            End Get
        End Property
        
        Public Event obrasRowChanging As obrasRowChangeEventHandler
        
        Public Event obrasRowChanged As obrasRowChangeEventHandler
        
        Public Event obrasRowDeleting As obrasRowChangeEventHandler
        
        Public Event obrasRowDeleted As obrasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddobrasRow(ByVal row As obrasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddobrasRow( _
                    ByVal _cod_obr As String,  _
                    ByVal _desc_obr As String,  _
                    ByVal Obra As String,  _
                    ByVal FCAS As Double,  _
                    ByVal Administracion As Double,  _
                    ByVal Utilidad As Double,  _
                    ByVal Rendimiento As Double,  _
                    ByVal Dig_Rend As Double,  _
                    ByVal IVA As Double,  _
                    ByVal Cant_Part As Double,  _
                    ByVal Cant_Analisis As Double,  _
                    ByVal Div_Mat As String,  _
                    ByVal APO As Double,  _
                    ByVal CIV As Double,  _
                    ByVal LULO As Double,  _
                    ByVal BasePRAPO As String,  _
                    ByVal FecBPRAPO As Date,  _
                    ByVal BaseMTAPO As String,  _
                    ByVal FecBMTAPO As Date,  _
                    ByVal BaseEQAPO As String,  _
                    ByVal FecBEQAPO As Date,  _
                    ByVal BaseMOAPO As String,  _
                    ByVal FecBMOAPO As Date,  _
                    ByVal BaseTRAPO As String,  _
                    ByVal FecBTRAPO As Date,  _
                    ByVal BasePRCIV As String,  _
                    ByVal FecBPRCIV As Date,  _
                    ByVal BaseMTCIV As String,  _
                    ByVal FecBMTCIV As Date,  _
                    ByVal BaseEQCIV As String,  _
                    ByVal FecBEQCIV As Date,  _
                    ByVal BaseMOCIV As String,  _
                    ByVal FecBMOCIV As Date,  _
                    ByVal BaseTRCIV As String,  _
                    ByVal FecBTRCIV As Date,  _
                    ByVal BasePRLulo As String,  _
                    ByVal FecBPRLulo As Date,  _
                    ByVal BaseMTLulo As String,  _
                    ByVal FecBMTLulo As Date,  _
                    ByVal BaseEQLulo As String,  _
                    ByVal FecBEQLulo As Date,  _
                    ByVal BaseMOLulo As String,  _
                    ByVal FecBMOLulo As Date,  _
                    ByVal Moneda_P As String,  _
                    ByVal Moneda_S As String,  _
                    ByVal Propietario As String,  _
                    ByVal IngFirma As String,  _
                    ByVal CIV_Firma As Double,  _
                    ByVal IngRevisa As String,  _
                    ByVal CIV_Revisa As Double) As obrasRow
            Dim rowobrasRow As obrasRow = CType(Me.NewRow,obrasRow)
            Dim columnValuesArray() As Object = New Object() {_cod_obr, _desc_obr, Obra, FCAS, Administracion, Utilidad, Rendimiento, Dig_Rend, IVA, Cant_Part, Cant_Analisis, Div_Mat, APO, CIV, LULO, BasePRAPO, FecBPRAPO, BaseMTAPO, FecBMTAPO, BaseEQAPO, FecBEQAPO, BaseMOAPO, FecBMOAPO, BaseTRAPO, FecBTRAPO, BasePRCIV, FecBPRCIV, BaseMTCIV, FecBMTCIV, BaseEQCIV, FecBEQCIV, BaseMOCIV, FecBMOCIV, BaseTRCIV, FecBTRCIV, BasePRLulo, FecBPRLulo, BaseMTLulo, FecBMTLulo, BaseEQLulo, FecBEQLulo, BaseMOLulo, FecBMOLulo, Moneda_P, Moneda_S, Propietario, IngFirma, CIV_Firma, IngRevisa, CIV_Revisa}
            rowobrasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowobrasRow)
            Return rowobrasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As obrasDataTable = CType(MyBase.Clone,obrasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New obrasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columncod_obr = MyBase.Columns("cod-obr")
            Me._columndesc_obr = MyBase.Columns("desc-obr")
            Me.columnObra = MyBase.Columns("Obra")
            Me.columnFCAS = MyBase.Columns("FCAS")
            Me.columnAdministracion = MyBase.Columns("Administracion")
            Me.columnUtilidad = MyBase.Columns("Utilidad")
            Me.columnRendimiento = MyBase.Columns("Rendimiento")
            Me.columnDig_Rend = MyBase.Columns("Dig_Rend")
            Me.columnIVA = MyBase.Columns("IVA")
            Me.columnCant_Part = MyBase.Columns("Cant_Part")
            Me.columnCant_Analisis = MyBase.Columns("Cant_Analisis")
            Me.columnDiv_Mat = MyBase.Columns("Div_Mat")
            Me.columnAPO = MyBase.Columns("APO")
            Me.columnCIV = MyBase.Columns("CIV")
            Me.columnLULO = MyBase.Columns("LULO")
            Me.columnBasePRAPO = MyBase.Columns("BasePRAPO")
            Me.columnFecBPRAPO = MyBase.Columns("FecBPRAPO")
            Me.columnBaseMTAPO = MyBase.Columns("BaseMTAPO")
            Me.columnFecBMTAPO = MyBase.Columns("FecBMTAPO")
            Me.columnBaseEQAPO = MyBase.Columns("BaseEQAPO")
            Me.columnFecBEQAPO = MyBase.Columns("FecBEQAPO")
            Me.columnBaseMOAPO = MyBase.Columns("BaseMOAPO")
            Me.columnFecBMOAPO = MyBase.Columns("FecBMOAPO")
            Me.columnBaseTRAPO = MyBase.Columns("BaseTRAPO")
            Me.columnFecBTRAPO = MyBase.Columns("FecBTRAPO")
            Me.columnBasePRCIV = MyBase.Columns("BasePRCIV")
            Me.columnFecBPRCIV = MyBase.Columns("FecBPRCIV")
            Me.columnBaseMTCIV = MyBase.Columns("BaseMTCIV")
            Me.columnFecBMTCIV = MyBase.Columns("FecBMTCIV")
            Me.columnBaseEQCIV = MyBase.Columns("BaseEQCIV")
            Me.columnFecBEQCIV = MyBase.Columns("FecBEQCIV")
            Me.columnBaseMOCIV = MyBase.Columns("BaseMOCIV")
            Me.columnFecBMOCIV = MyBase.Columns("FecBMOCIV")
            Me.columnBaseTRCIV = MyBase.Columns("BaseTRCIV")
            Me.columnFecBTRCIV = MyBase.Columns("FecBTRCIV")
            Me.columnBasePRLulo = MyBase.Columns("BasePRLulo")
            Me.columnFecBPRLulo = MyBase.Columns("FecBPRLulo")
            Me.columnBaseMTLulo = MyBase.Columns("BaseMTLulo")
            Me.columnFecBMTLulo = MyBase.Columns("FecBMTLulo")
            Me.columnBaseEQLulo = MyBase.Columns("BaseEQLulo")
            Me.columnFecBEQLulo = MyBase.Columns("FecBEQLulo")
            Me.columnBaseMOLulo = MyBase.Columns("BaseMOLulo")
            Me.columnFecBMOLulo = MyBase.Columns("FecBMOLulo")
            Me.columnMoneda_P = MyBase.Columns("Moneda_P")
            Me.columnMoneda_S = MyBase.Columns("Moneda_S")
            Me.columnPropietario = MyBase.Columns("Propietario")
            Me.columnIngFirma = MyBase.Columns("IngFirma")
            Me.columnCIV_Firma = MyBase.Columns("CIV_Firma")
            Me.columnIngRevisa = MyBase.Columns("IngRevisa")
            Me.columnCIV_Revisa = MyBase.Columns("CIV_Revisa")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columncod_obr = New Global.System.Data.DataColumn("cod-obr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columncod_obr.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columncod_obr")
            Me._columncod_obr.ExtendedProperties.Add("Generator_UserColumnName", "cod-obr")
            MyBase.Columns.Add(Me._columncod_obr)
            Me._columndesc_obr = New Global.System.Data.DataColumn("desc-obr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columndesc_obr.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columndesc_obr")
            Me._columndesc_obr.ExtendedProperties.Add("Generator_UserColumnName", "desc-obr")
            MyBase.Columns.Add(Me._columndesc_obr)
            Me.columnObra = New Global.System.Data.DataColumn("Obra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObra)
            Me.columnFCAS = New Global.System.Data.DataColumn("FCAS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCAS)
            Me.columnAdministracion = New Global.System.Data.DataColumn("Administracion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdministracion)
            Me.columnUtilidad = New Global.System.Data.DataColumn("Utilidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUtilidad)
            Me.columnRendimiento = New Global.System.Data.DataColumn("Rendimiento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRendimiento)
            Me.columnDig_Rend = New Global.System.Data.DataColumn("Dig_Rend", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDig_Rend)
            Me.columnIVA = New Global.System.Data.DataColumn("IVA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVA)
            Me.columnCant_Part = New Global.System.Data.DataColumn("Cant_Part", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCant_Part)
            Me.columnCant_Analisis = New Global.System.Data.DataColumn("Cant_Analisis", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCant_Analisis)
            Me.columnDiv_Mat = New Global.System.Data.DataColumn("Div_Mat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiv_Mat)
            Me.columnAPO = New Global.System.Data.DataColumn("APO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPO)
            Me.columnCIV = New Global.System.Data.DataColumn("CIV", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIV)
            Me.columnLULO = New Global.System.Data.DataColumn("LULO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLULO)
            Me.columnBasePRAPO = New Global.System.Data.DataColumn("BasePRAPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasePRAPO)
            Me.columnFecBPRAPO = New Global.System.Data.DataColumn("FecBPRAPO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBPRAPO)
            Me.columnBaseMTAPO = New Global.System.Data.DataColumn("BaseMTAPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseMTAPO)
            Me.columnFecBMTAPO = New Global.System.Data.DataColumn("FecBMTAPO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBMTAPO)
            Me.columnBaseEQAPO = New Global.System.Data.DataColumn("BaseEQAPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseEQAPO)
            Me.columnFecBEQAPO = New Global.System.Data.DataColumn("FecBEQAPO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBEQAPO)
            Me.columnBaseMOAPO = New Global.System.Data.DataColumn("BaseMOAPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseMOAPO)
            Me.columnFecBMOAPO = New Global.System.Data.DataColumn("FecBMOAPO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBMOAPO)
            Me.columnBaseTRAPO = New Global.System.Data.DataColumn("BaseTRAPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseTRAPO)
            Me.columnFecBTRAPO = New Global.System.Data.DataColumn("FecBTRAPO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBTRAPO)
            Me.columnBasePRCIV = New Global.System.Data.DataColumn("BasePRCIV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasePRCIV)
            Me.columnFecBPRCIV = New Global.System.Data.DataColumn("FecBPRCIV", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBPRCIV)
            Me.columnBaseMTCIV = New Global.System.Data.DataColumn("BaseMTCIV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseMTCIV)
            Me.columnFecBMTCIV = New Global.System.Data.DataColumn("FecBMTCIV", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBMTCIV)
            Me.columnBaseEQCIV = New Global.System.Data.DataColumn("BaseEQCIV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseEQCIV)
            Me.columnFecBEQCIV = New Global.System.Data.DataColumn("FecBEQCIV", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBEQCIV)
            Me.columnBaseMOCIV = New Global.System.Data.DataColumn("BaseMOCIV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseMOCIV)
            Me.columnFecBMOCIV = New Global.System.Data.DataColumn("FecBMOCIV", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBMOCIV)
            Me.columnBaseTRCIV = New Global.System.Data.DataColumn("BaseTRCIV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseTRCIV)
            Me.columnFecBTRCIV = New Global.System.Data.DataColumn("FecBTRCIV", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBTRCIV)
            Me.columnBasePRLulo = New Global.System.Data.DataColumn("BasePRLulo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasePRLulo)
            Me.columnFecBPRLulo = New Global.System.Data.DataColumn("FecBPRLulo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBPRLulo)
            Me.columnBaseMTLulo = New Global.System.Data.DataColumn("BaseMTLulo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseMTLulo)
            Me.columnFecBMTLulo = New Global.System.Data.DataColumn("FecBMTLulo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBMTLulo)
            Me.columnBaseEQLulo = New Global.System.Data.DataColumn("BaseEQLulo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseEQLulo)
            Me.columnFecBEQLulo = New Global.System.Data.DataColumn("FecBEQLulo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBEQLulo)
            Me.columnBaseMOLulo = New Global.System.Data.DataColumn("BaseMOLulo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseMOLulo)
            Me.columnFecBMOLulo = New Global.System.Data.DataColumn("FecBMOLulo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecBMOLulo)
            Me.columnMoneda_P = New Global.System.Data.DataColumn("Moneda_P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda_P)
            Me.columnMoneda_S = New Global.System.Data.DataColumn("Moneda_S", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda_S)
            Me.columnPropietario = New Global.System.Data.DataColumn("Propietario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropietario)
            Me.columnIngFirma = New Global.System.Data.DataColumn("IngFirma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngFirma)
            Me.columnCIV_Firma = New Global.System.Data.DataColumn("CIV_Firma", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIV_Firma)
            Me.columnIngRevisa = New Global.System.Data.DataColumn("IngRevisa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngRevisa)
            Me.columnCIV_Revisa = New Global.System.Data.DataColumn("CIV_Revisa", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIV_Revisa)
            Me._columncod_obr.MaxLength = 16
            Me._columndesc_obr.MaxLength = 54
            Me.columnObra.MaxLength = 7
            Me.columnDiv_Mat.MaxLength = 1
            Me.columnBasePRAPO.MaxLength = 50
            Me.columnBaseMTAPO.MaxLength = 50
            Me.columnBaseEQAPO.MaxLength = 50
            Me.columnBaseMOAPO.MaxLength = 50
            Me.columnBaseTRAPO.MaxLength = 50
            Me.columnBasePRCIV.MaxLength = 36
            Me.columnBaseMTCIV.MaxLength = 36
            Me.columnBaseEQCIV.MaxLength = 36
            Me.columnBaseMOCIV.MaxLength = 36
            Me.columnBaseTRCIV.MaxLength = 36
            Me.columnBasePRLulo.MaxLength = 47
            Me.columnBaseMTLulo.MaxLength = 47
            Me.columnBaseEQLulo.MaxLength = 47
            Me.columnBaseMOLulo.MaxLength = 47
            Me.columnMoneda_P.MaxLength = 4
            Me.columnMoneda_S.MaxLength = 3
            Me.columnPropietario.MaxLength = 3
            Me.columnIngFirma.MaxLength = 13
            Me.columnIngRevisa.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewobrasRow() As obrasRow
            Return CType(Me.NewRow,obrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New obrasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(obrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.obrasRowChangedEvent) Is Nothing) Then
                RaiseEvent obrasRowChanged(Me, New obrasRowChangeEvent(CType(e.Row,obrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.obrasRowChangingEvent) Is Nothing) Then
                RaiseEvent obrasRowChanging(Me, New obrasRowChangeEvent(CType(e.Row,obrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.obrasRowDeletedEvent) Is Nothing) Then
                RaiseEvent obrasRowDeleted(Me, New obrasRowChangeEvent(CType(e.Row,obrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.obrasRowDeletingEvent) Is Nothing) Then
                RaiseEvent obrasRowDeleting(Me, New obrasRowChangeEvent(CType(e.Row,obrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveobrasRow(ByVal row As obrasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ObrasAPO = New ObrasAPO
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "obrasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class obrasRow
        Inherits Global.System.Data.DataRow
        
        Private tableobras As obrasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableobras = CType(Me.Table,obrasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _cod_obr() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras._cod_obrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cod-obr' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras._cod_obrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _desc_obr() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras._desc_obrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'desc-obr' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras._desc_obrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Obra() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.ObraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Obra' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.ObraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCAS() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.FCASColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FCAS' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FCASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Administracion() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.AdministracionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Administracion' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.AdministracionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Utilidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.UtilidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Utilidad' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.UtilidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rendimiento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.RendimientoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rendimiento' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.RendimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dig_Rend() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.Dig_RendColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dig_Rend' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Dig_RendColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.IVAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IVA' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.IVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cant_Part() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.Cant_PartColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cant_Part' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Cant_PartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cant_Analisis() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.Cant_AnalisisColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cant_Analisis' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Cant_AnalisisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Div_Mat() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.Div_MatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Div_Mat' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Div_MatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.APOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.APOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIV() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.CIVColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CIV' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.CIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LULO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.LULOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LULO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.LULOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BasePRAPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BasePRAPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BasePRAPO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BasePRAPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBPRAPO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBPRAPOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBPRAPO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBPRAPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseMTAPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BaseMTAPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseMTAPO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BaseMTAPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBMTAPO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBMTAPOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBMTAPO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBMTAPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseEQAPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BaseEQAPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseEQAPO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BaseEQAPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBEQAPO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBEQAPOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBEQAPO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBEQAPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseMOAPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BaseMOAPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseMOAPO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BaseMOAPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBMOAPO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBMOAPOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBMOAPO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBMOAPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseTRAPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BaseTRAPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseTRAPO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BaseTRAPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBTRAPO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBTRAPOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBTRAPO' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBTRAPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BasePRCIV() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BasePRCIVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BasePRCIV' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BasePRCIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBPRCIV() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBPRCIVColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBPRCIV' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBPRCIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseMTCIV() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BaseMTCIVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseMTCIV' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BaseMTCIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBMTCIV() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBMTCIVColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBMTCIV' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBMTCIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseEQCIV() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BaseEQCIVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseEQCIV' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BaseEQCIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBEQCIV() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBEQCIVColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBEQCIV' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBEQCIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseMOCIV() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BaseMOCIVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseMOCIV' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BaseMOCIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBMOCIV() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBMOCIVColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBMOCIV' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBMOCIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseTRCIV() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BaseTRCIVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseTRCIV' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BaseTRCIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBTRCIV() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBTRCIVColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBTRCIV' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBTRCIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BasePRLulo() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BasePRLuloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BasePRLulo' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BasePRLuloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBPRLulo() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBPRLuloColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBPRLulo' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBPRLuloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseMTLulo() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BaseMTLuloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseMTLulo' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BaseMTLuloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBMTLulo() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBMTLuloColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBMTLulo' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBMTLuloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseEQLulo() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BaseEQLuloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseEQLulo' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BaseEQLuloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBEQLulo() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBEQLuloColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBEQLulo' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBEQLuloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BaseMOLulo() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.BaseMOLuloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseMOLulo' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.BaseMOLuloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecBMOLulo() As Date
            Get
                Try 
                    Return CType(Me(Me.tableobras.FecBMOLuloColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FecBMOLulo' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.FecBMOLuloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda_P() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.Moneda_PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moneda_P' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Moneda_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda_S() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.Moneda_SColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moneda_S' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.Moneda_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Propietario() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.PropietarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Propietario' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.PropietarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IngFirma() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.IngFirmaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IngFirma' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.IngFirmaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIV_Firma() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.CIV_FirmaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CIV_Firma' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.CIV_FirmaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IngRevisa() As String
            Get
                Try 
                    Return CType(Me(Me.tableobras.IngRevisaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IngRevisa' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.IngRevisaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIV_Revisa() As Double
            Get
                Try 
                    Return CType(Me(Me.tableobras.CIV_RevisaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CIV_Revisa' in table 'obras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableobras.CIV_RevisaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_cod_obrNull() As Boolean
            Return Me.IsNull(Me.tableobras._cod_obrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_cod_obrNull()
            Me(Me.tableobras._cod_obrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_desc_obrNull() As Boolean
            Return Me.IsNull(Me.tableobras._desc_obrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_desc_obrNull()
            Me(Me.tableobras._desc_obrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObraNull() As Boolean
            Return Me.IsNull(Me.tableobras.ObraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObraNull()
            Me(Me.tableobras.ObraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCASNull() As Boolean
            Return Me.IsNull(Me.tableobras.FCASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCASNull()
            Me(Me.tableobras.FCASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdministracionNull() As Boolean
            Return Me.IsNull(Me.tableobras.AdministracionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdministracionNull()
            Me(Me.tableobras.AdministracionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUtilidadNull() As Boolean
            Return Me.IsNull(Me.tableobras.UtilidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUtilidadNull()
            Me(Me.tableobras.UtilidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRendimientoNull() As Boolean
            Return Me.IsNull(Me.tableobras.RendimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRendimientoNull()
            Me(Me.tableobras.RendimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDig_RendNull() As Boolean
            Return Me.IsNull(Me.tableobras.Dig_RendColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDig_RendNull()
            Me(Me.tableobras.Dig_RendColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVANull() As Boolean
            Return Me.IsNull(Me.tableobras.IVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVANull()
            Me(Me.tableobras.IVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCant_PartNull() As Boolean
            Return Me.IsNull(Me.tableobras.Cant_PartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCant_PartNull()
            Me(Me.tableobras.Cant_PartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCant_AnalisisNull() As Boolean
            Return Me.IsNull(Me.tableobras.Cant_AnalisisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCant_AnalisisNull()
            Me(Me.tableobras.Cant_AnalisisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiv_MatNull() As Boolean
            Return Me.IsNull(Me.tableobras.Div_MatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiv_MatNull()
            Me(Me.tableobras.Div_MatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPONull() As Boolean
            Return Me.IsNull(Me.tableobras.APOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPONull()
            Me(Me.tableobras.APOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIVNull() As Boolean
            Return Me.IsNull(Me.tableobras.CIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIVNull()
            Me(Me.tableobras.CIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLULONull() As Boolean
            Return Me.IsNull(Me.tableobras.LULOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLULONull()
            Me(Me.tableobras.LULOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBasePRAPONull() As Boolean
            Return Me.IsNull(Me.tableobras.BasePRAPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBasePRAPONull()
            Me(Me.tableobras.BasePRAPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBPRAPONull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBPRAPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBPRAPONull()
            Me(Me.tableobras.FecBPRAPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseMTAPONull() As Boolean
            Return Me.IsNull(Me.tableobras.BaseMTAPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseMTAPONull()
            Me(Me.tableobras.BaseMTAPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBMTAPONull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBMTAPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBMTAPONull()
            Me(Me.tableobras.FecBMTAPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseEQAPONull() As Boolean
            Return Me.IsNull(Me.tableobras.BaseEQAPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseEQAPONull()
            Me(Me.tableobras.BaseEQAPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBEQAPONull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBEQAPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBEQAPONull()
            Me(Me.tableobras.FecBEQAPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseMOAPONull() As Boolean
            Return Me.IsNull(Me.tableobras.BaseMOAPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseMOAPONull()
            Me(Me.tableobras.BaseMOAPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBMOAPONull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBMOAPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBMOAPONull()
            Me(Me.tableobras.FecBMOAPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseTRAPONull() As Boolean
            Return Me.IsNull(Me.tableobras.BaseTRAPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseTRAPONull()
            Me(Me.tableobras.BaseTRAPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBTRAPONull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBTRAPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBTRAPONull()
            Me(Me.tableobras.FecBTRAPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBasePRCIVNull() As Boolean
            Return Me.IsNull(Me.tableobras.BasePRCIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBasePRCIVNull()
            Me(Me.tableobras.BasePRCIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBPRCIVNull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBPRCIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBPRCIVNull()
            Me(Me.tableobras.FecBPRCIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseMTCIVNull() As Boolean
            Return Me.IsNull(Me.tableobras.BaseMTCIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseMTCIVNull()
            Me(Me.tableobras.BaseMTCIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBMTCIVNull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBMTCIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBMTCIVNull()
            Me(Me.tableobras.FecBMTCIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseEQCIVNull() As Boolean
            Return Me.IsNull(Me.tableobras.BaseEQCIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseEQCIVNull()
            Me(Me.tableobras.BaseEQCIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBEQCIVNull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBEQCIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBEQCIVNull()
            Me(Me.tableobras.FecBEQCIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseMOCIVNull() As Boolean
            Return Me.IsNull(Me.tableobras.BaseMOCIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseMOCIVNull()
            Me(Me.tableobras.BaseMOCIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBMOCIVNull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBMOCIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBMOCIVNull()
            Me(Me.tableobras.FecBMOCIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseTRCIVNull() As Boolean
            Return Me.IsNull(Me.tableobras.BaseTRCIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseTRCIVNull()
            Me(Me.tableobras.BaseTRCIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBTRCIVNull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBTRCIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBTRCIVNull()
            Me(Me.tableobras.FecBTRCIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBasePRLuloNull() As Boolean
            Return Me.IsNull(Me.tableobras.BasePRLuloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBasePRLuloNull()
            Me(Me.tableobras.BasePRLuloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBPRLuloNull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBPRLuloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBPRLuloNull()
            Me(Me.tableobras.FecBPRLuloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseMTLuloNull() As Boolean
            Return Me.IsNull(Me.tableobras.BaseMTLuloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseMTLuloNull()
            Me(Me.tableobras.BaseMTLuloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBMTLuloNull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBMTLuloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBMTLuloNull()
            Me(Me.tableobras.FecBMTLuloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseEQLuloNull() As Boolean
            Return Me.IsNull(Me.tableobras.BaseEQLuloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseEQLuloNull()
            Me(Me.tableobras.BaseEQLuloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBEQLuloNull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBEQLuloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBEQLuloNull()
            Me(Me.tableobras.FecBEQLuloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseMOLuloNull() As Boolean
            Return Me.IsNull(Me.tableobras.BaseMOLuloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseMOLuloNull()
            Me(Me.tableobras.BaseMOLuloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecBMOLuloNull() As Boolean
            Return Me.IsNull(Me.tableobras.FecBMOLuloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecBMOLuloNull()
            Me(Me.tableobras.FecBMOLuloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoneda_PNull() As Boolean
            Return Me.IsNull(Me.tableobras.Moneda_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoneda_PNull()
            Me(Me.tableobras.Moneda_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoneda_SNull() As Boolean
            Return Me.IsNull(Me.tableobras.Moneda_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoneda_SNull()
            Me(Me.tableobras.Moneda_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPropietarioNull() As Boolean
            Return Me.IsNull(Me.tableobras.PropietarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPropietarioNull()
            Me(Me.tableobras.PropietarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngFirmaNull() As Boolean
            Return Me.IsNull(Me.tableobras.IngFirmaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngFirmaNull()
            Me(Me.tableobras.IngFirmaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIV_FirmaNull() As Boolean
            Return Me.IsNull(Me.tableobras.CIV_FirmaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIV_FirmaNull()
            Me(Me.tableobras.CIV_FirmaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngRevisaNull() As Boolean
            Return Me.IsNull(Me.tableobras.IngRevisaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngRevisaNull()
            Me(Me.tableobras.IngRevisaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIV_RevisaNull() As Boolean
            Return Me.IsNull(Me.tableobras.CIV_RevisaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIV_RevisaNull()
            Me(Me.tableobras.CIV_RevisaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class obrasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As obrasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As obrasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As obrasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ObrasAPOTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class obrasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "obras"
            tableMapping.ColumnMappings.Add("cod-obr", "cod-obr")
            tableMapping.ColumnMappings.Add("desc-obr", "desc-obr")
            tableMapping.ColumnMappings.Add("Obra", "Obra")
            tableMapping.ColumnMappings.Add("FCAS", "FCAS")
            tableMapping.ColumnMappings.Add("Administracion", "Administracion")
            tableMapping.ColumnMappings.Add("Utilidad", "Utilidad")
            tableMapping.ColumnMappings.Add("Rendimiento", "Rendimiento")
            tableMapping.ColumnMappings.Add("Dig_Rend", "Dig_Rend")
            tableMapping.ColumnMappings.Add("IVA", "IVA")
            tableMapping.ColumnMappings.Add("Cant_Part", "Cant_Part")
            tableMapping.ColumnMappings.Add("Cant_Analisis", "Cant_Analisis")
            tableMapping.ColumnMappings.Add("Div_Mat", "Div_Mat")
            tableMapping.ColumnMappings.Add("APO", "APO")
            tableMapping.ColumnMappings.Add("CIV", "CIV")
            tableMapping.ColumnMappings.Add("LULO", "LULO")
            tableMapping.ColumnMappings.Add("BasePRAPO", "BasePRAPO")
            tableMapping.ColumnMappings.Add("FecBPRAPO", "FecBPRAPO")
            tableMapping.ColumnMappings.Add("BaseMTAPO", "BaseMTAPO")
            tableMapping.ColumnMappings.Add("FecBMTAPO", "FecBMTAPO")
            tableMapping.ColumnMappings.Add("BaseEQAPO", "BaseEQAPO")
            tableMapping.ColumnMappings.Add("FecBEQAPO", "FecBEQAPO")
            tableMapping.ColumnMappings.Add("BaseMOAPO", "BaseMOAPO")
            tableMapping.ColumnMappings.Add("FecBMOAPO", "FecBMOAPO")
            tableMapping.ColumnMappings.Add("BaseTRAPO", "BaseTRAPO")
            tableMapping.ColumnMappings.Add("FecBTRAPO", "FecBTRAPO")
            tableMapping.ColumnMappings.Add("BasePRCIV", "BasePRCIV")
            tableMapping.ColumnMappings.Add("FecBPRCIV", "FecBPRCIV")
            tableMapping.ColumnMappings.Add("BaseMTCIV", "BaseMTCIV")
            tableMapping.ColumnMappings.Add("FecBMTCIV", "FecBMTCIV")
            tableMapping.ColumnMappings.Add("BaseEQCIV", "BaseEQCIV")
            tableMapping.ColumnMappings.Add("FecBEQCIV", "FecBEQCIV")
            tableMapping.ColumnMappings.Add("BaseMOCIV", "BaseMOCIV")
            tableMapping.ColumnMappings.Add("FecBMOCIV", "FecBMOCIV")
            tableMapping.ColumnMappings.Add("BaseTRCIV", "BaseTRCIV")
            tableMapping.ColumnMappings.Add("FecBTRCIV", "FecBTRCIV")
            tableMapping.ColumnMappings.Add("BasePRLulo", "BasePRLulo")
            tableMapping.ColumnMappings.Add("FecBPRLulo", "FecBPRLulo")
            tableMapping.ColumnMappings.Add("BaseMTLulo", "BaseMTLulo")
            tableMapping.ColumnMappings.Add("FecBMTLulo", "FecBMTLulo")
            tableMapping.ColumnMappings.Add("BaseEQLulo", "BaseEQLulo")
            tableMapping.ColumnMappings.Add("FecBEQLulo", "FecBEQLulo")
            tableMapping.ColumnMappings.Add("BaseMOLulo", "BaseMOLulo")
            tableMapping.ColumnMappings.Add("FecBMOLulo", "FecBMOLulo")
            tableMapping.ColumnMappings.Add("Moneda_P", "Moneda_P")
            tableMapping.ColumnMappings.Add("Moneda_S", "Moneda_S")
            tableMapping.ColumnMappings.Add("Propietario", "Propietario")
            tableMapping.ColumnMappings.Add("IngFirma", "IngFirma")
            tableMapping.ColumnMappings.Add("CIV_Firma", "CIV_Firma")
            tableMapping.ColumnMappings.Add("IngRevisa", "IngRevisa")
            tableMapping.ColumnMappings.Add("CIV_Revisa", "CIV_Revisa")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `obras` (`cod-obr`, `desc-obr`, `Obra`, `FCAS`, `Administracion`, `Ut"& _ 
                "ilidad`, `Rendimiento`, `Dig_Rend`, `IVA`, `Cant_Part`, `Cant_Analisis`, `Div_Ma"& _ 
                "t`, `APO`, `CIV`, `LULO`, `BasePRAPO`, `FecBPRAPO`, `BaseMTAPO`, `FecBMTAPO`, `B"& _ 
                "aseEQAPO`, `FecBEQAPO`, `BaseMOAPO`, `FecBMOAPO`, `BaseTRAPO`, `FecBTRAPO`, `Bas"& _ 
                "ePRCIV`, `FecBPRCIV`, `BaseMTCIV`, `FecBMTCIV`, `BaseEQCIV`, `FecBEQCIV`, `BaseM"& _ 
                "OCIV`, `FecBMOCIV`, `BaseTRCIV`, `FecBTRCIV`, `BasePRLulo`, `FecBPRLulo`, `BaseM"& _ 
                "TLulo`, `FecBMTLulo`, `BaseEQLulo`, `FecBEQLulo`, `BaseMOLulo`, `FecBMOLulo`, `M"& _ 
                "oneda_P`, `Moneda_S`, `Propietario`, `IngFirma`, `CIV_Firma`, `IngRevisa`, `CIV_"& _ 
                "Revisa`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("cod-obr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "cod-obr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("desc-obr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "desc-obr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Obra", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Obra", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FCAS", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FCAS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Administracion", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Administracion", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Utilidad", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Utilidad", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Rendimiento", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Rendimiento", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Dig_Rend", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Dig_Rend", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IVA", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IVA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cant_Part", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cant_Part", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Cant_Analisis", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cant_Analisis", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Div_Mat", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Div_Mat", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("APO", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "APO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CIV", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CIV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LULO", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LULO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BasePRAPO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BasePRAPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBPRAPO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBPRAPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseMTAPO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseMTAPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBMTAPO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBMTAPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseEQAPO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseEQAPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBEQAPO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBEQAPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseMOAPO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseMOAPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBMOAPO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBMOAPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseTRAPO", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseTRAPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBTRAPO", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBTRAPO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BasePRCIV", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BasePRCIV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBPRCIV", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBPRCIV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseMTCIV", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseMTCIV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBMTCIV", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBMTCIV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseEQCIV", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseEQCIV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBEQCIV", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBEQCIV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseMOCIV", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseMOCIV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBMOCIV", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBMOCIV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseTRCIV", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseTRCIV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBTRCIV", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBTRCIV", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BasePRLulo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BasePRLulo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBPRLulo", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBPRLulo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseMTLulo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseMTLulo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBMTLulo", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBMTLulo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseEQLulo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseEQLulo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBEQLulo", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBEQLulo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BaseMOLulo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BaseMOLulo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FecBMOLulo", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FecBMOLulo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Moneda_P", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Moneda_P", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Moneda_S", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Moneda_S", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Propietario", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Propietario", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IngFirma", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IngFirma", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CIV_Firma", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CIV_Firma", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IngRevisa", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IngRevisa", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CIV_Revisa", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CIV_Revisa", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.APP2020.My.MySettings.Default.MasterAPVConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        [cod-obr], [desc-obr], Obra, FCAS, Administracion, Utilidad, Rendim"& _ 
                "iento, Dig_Rend, IVA, Cant_Part, Cant_Analisis, Div_Mat, APO, CIV, LULO, BasePRA"& _ 
                "PO, FecBPRAPO, BaseMTAPO, FecBMTAPO, BaseEQAPO, FecBEQAPO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      BaseMOAPO, FecBMOAPO, BaseTRAPO, FecBTRAPO, BasePRCIV, FecBPRCIV, BaseMTCI"& _ 
                "V, FecBMTCIV, BaseEQCIV, FecBEQCIV, BaseMOCIV, FecBMOCIV, BaseTRCIV, FecBTRCIV, "& _ 
                "BasePRLulo, FecBPRLulo, BaseMTLulo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         FecBMTLulo, BaseE"& _ 
                "QLulo, FecBEQLulo, BaseMOLulo, FecBMOLulo, Moneda_P, Moneda_S, Propietario, IngF"& _ 
                "irma, CIV_Firma, IngRevisa, CIV_Revisa"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            obras"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY [cod-obr"& _ 
                "]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ObrasAPO.obrasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ObrasAPO.obrasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ObrasAPO.obrasDataTable = New ObrasAPO.obrasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ObrasAPO.obrasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ObrasAPO) As Integer
            Return Me.Adapter.Update(dataSet, "obras")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal _cod_obr As String,  _
                    ByVal _desc_obr As String,  _
                    ByVal Obra As String,  _
                    ByVal FCAS As Global.System.Nullable(Of Double),  _
                    ByVal Administracion As Global.System.Nullable(Of Double),  _
                    ByVal Utilidad As Global.System.Nullable(Of Double),  _
                    ByVal Rendimiento As Global.System.Nullable(Of Double),  _
                    ByVal Dig_Rend As Global.System.Nullable(Of Double),  _
                    ByVal IVA As Global.System.Nullable(Of Double),  _
                    ByVal Cant_Part As Global.System.Nullable(Of Double),  _
                    ByVal Cant_Analisis As Global.System.Nullable(Of Double),  _
                    ByVal Div_Mat As String,  _
                    ByVal APO As Global.System.Nullable(Of Double),  _
                    ByVal CIV As Global.System.Nullable(Of Double),  _
                    ByVal LULO As Global.System.Nullable(Of Double),  _
                    ByVal BasePRAPO As String,  _
                    ByVal FecBPRAPO As Global.System.Nullable(Of Date),  _
                    ByVal BaseMTAPO As String,  _
                    ByVal FecBMTAPO As Global.System.Nullable(Of Date),  _
                    ByVal BaseEQAPO As String,  _
                    ByVal FecBEQAPO As Global.System.Nullable(Of Date),  _
                    ByVal BaseMOAPO As String,  _
                    ByVal FecBMOAPO As Global.System.Nullable(Of Date),  _
                    ByVal BaseTRAPO As String,  _
                    ByVal FecBTRAPO As Global.System.Nullable(Of Date),  _
                    ByVal BasePRCIV As String,  _
                    ByVal FecBPRCIV As Global.System.Nullable(Of Date),  _
                    ByVal BaseMTCIV As String,  _
                    ByVal FecBMTCIV As Global.System.Nullable(Of Date),  _
                    ByVal BaseEQCIV As String,  _
                    ByVal FecBEQCIV As Global.System.Nullable(Of Date),  _
                    ByVal BaseMOCIV As String,  _
                    ByVal FecBMOCIV As Global.System.Nullable(Of Date),  _
                    ByVal BaseTRCIV As String,  _
                    ByVal FecBTRCIV As Global.System.Nullable(Of Date),  _
                    ByVal BasePRLulo As String,  _
                    ByVal FecBPRLulo As Global.System.Nullable(Of Date),  _
                    ByVal BaseMTLulo As String,  _
                    ByVal FecBMTLulo As Global.System.Nullable(Of Date),  _
                    ByVal BaseEQLulo As String,  _
                    ByVal FecBEQLulo As Global.System.Nullable(Of Date),  _
                    ByVal BaseMOLulo As String,  _
                    ByVal FecBMOLulo As Global.System.Nullable(Of Date),  _
                    ByVal Moneda_P As String,  _
                    ByVal Moneda_S As String,  _
                    ByVal Propietario As String,  _
                    ByVal IngFirma As String,  _
                    ByVal CIV_Firma As Global.System.Nullable(Of Double),  _
                    ByVal IngRevisa As String,  _
                    ByVal CIV_Revisa As Global.System.Nullable(Of Double)) As Integer
            If (_cod_obr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(_cod_obr,String)
            End If
            If (_desc_obr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(_desc_obr,String)
            End If
            If (Obra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Obra,String)
            End If
            If (FCAS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FCAS.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Administracion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Administracion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Utilidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Utilidad.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Rendimiento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Rendimiento.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Dig_Rend.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Dig_Rend.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (IVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IVA.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Cant_Part.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Cant_Part.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Cant_Analisis.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Cant_Analisis.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Div_Mat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Div_Mat,String)
            End If
            If (APO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(APO.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (CIV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(CIV.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (LULO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(LULO.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (BasePRAPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(BasePRAPO,String)
            End If
            If (FecBPRAPO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(FecBPRAPO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (BaseMTAPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(BaseMTAPO,String)
            End If
            If (FecBMTAPO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(FecBMTAPO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (BaseEQAPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(BaseEQAPO,String)
            End If
            If (FecBEQAPO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(FecBEQAPO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (BaseMOAPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(BaseMOAPO,String)
            End If
            If (FecBMOAPO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(FecBMOAPO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (BaseTRAPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(BaseTRAPO,String)
            End If
            If (FecBTRAPO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(FecBTRAPO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (BasePRCIV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(BasePRCIV,String)
            End If
            If (FecBPRCIV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(FecBPRCIV.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (BaseMTCIV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(BaseMTCIV,String)
            End If
            If (FecBMTCIV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(FecBMTCIV.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (BaseEQCIV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(BaseEQCIV,String)
            End If
            If (FecBEQCIV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(FecBEQCIV.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (BaseMOCIV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(BaseMOCIV,String)
            End If
            If (FecBMOCIV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(FecBMOCIV.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (BaseTRCIV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(BaseTRCIV,String)
            End If
            If (FecBTRCIV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(FecBTRCIV.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (BasePRLulo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(BasePRLulo,String)
            End If
            If (FecBPRLulo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(FecBPRLulo.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (BaseMTLulo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(BaseMTLulo,String)
            End If
            If (FecBMTLulo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(FecBMTLulo.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (BaseEQLulo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(BaseEQLulo,String)
            End If
            If (FecBEQLulo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(FecBEQLulo.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (BaseMOLulo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(BaseMOLulo,String)
            End If
            If (FecBMOLulo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(FecBMOLulo.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Moneda_P Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(Moneda_P,String)
            End If
            If (Moneda_S Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(Moneda_S,String)
            End If
            If (Propietario Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Propietario,String)
            End If
            If (IngFirma Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(IngFirma,String)
            End If
            If (CIV_Firma.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(CIV_Firma.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (IngRevisa Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(IngRevisa,String)
            End If
            If (CIV_Revisa.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(CIV_Revisa.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
